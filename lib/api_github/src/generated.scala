import Types._
import caliban.schema.Annotations._

object Types {
  case class LogoUrlArgs(size: Option[Int])
  case class AvatarUrlArgs(size: Option[Int])
  case class BranchProtectionRuleConflictsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class MatchingRefsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PushAllowancesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReviewDismissalAllowancesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AssociatedPullRequestsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[PullRequestOrder]
  )
  case class BlameArgs(path: String)
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class DeploymentsArgs(
      after: Option[String],
      before: Option[String],
      environments: Option[List[String]],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[DeploymentOrder]
  )
  case class HistoryArgs(
      after: Option[String],
      author: Option[CommitAuthor],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      path: Option[String],
      since: Option[GitTimestamp],
      until: Option[GitTimestamp]
  )
  case class ParentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class SubmodulesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ContributionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[CommitContributionOrder]
  )
  case class CommitContributionsByRepositoryArgs(maxRepositories: Option[Int])
  case class IssueContributionsArgs(
      after: Option[String],
      before: Option[String],
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class IssueContributionsByRepositoryArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean],
      maxRepositories: Option[Int]
  )
  case class PullRequestContributionsArgs(
      after: Option[String],
      before: Option[String],
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class PullRequestContributionsByRepositoryArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean],
      maxRepositories: Option[Int]
  )
  case class PullRequestReviewContributionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class PullRequestReviewContributionsByRepositoryArgs(
      maxRepositories: Option[Int]
  )
  case class RepositoryContributionsArgs(
      after: Option[String],
      before: Option[String],
      excludeFirst: Option[Boolean],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class TotalIssueContributionsArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean]
  )
  case class TotalPullRequestContributionsArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean]
  )
  case class TotalRepositoriesWithContributedIssuesArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean]
  )
  case class TotalRepositoriesWithContributedPullRequestsArgs(
      excludeFirst: Option[Boolean],
      excludePopular: Option[Boolean]
  )
  case class TotalRepositoryContributionsArgs(excludeFirst: Option[Boolean])
  case class StatusesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class MembersArgs(
      after: Option[String],
      before: Option[String],
      deployment: Option[EnterpriseUserDeployment],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseMemberOrder],
      organizationLogins: Option[List[String]],
      query: Option[String],
      role: Option[EnterpriseUserAccountMembershipRole]
  )
  case class OrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      query: Option[String]
  )
  case class UserAccountsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ExternalIdentitiesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class RepositoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[RepositoryOrder]
  )
  case class ActionExecutionCapabilitySettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder]
  )
  case class AdminsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseMemberOrder],
      query: Option[String],
      role: Option[EnterpriseAdministratorRole]
  )
  case class AffiliatedUsersWithTwoFactorDisabledArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AllowPrivateRepositoryForkingSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class DefaultRepositoryPermissionSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: DefaultRepositoryPermissionField
  )
  case class EnterpriseServerInstallationsArgs(
      after: Option[String],
      before: Option[String],
      connectedOnly: Option[Boolean],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseServerInstallationOrder]
  )
  case class IpAllowListEntriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[IpAllowListEntryOrder]
  )
  case class MembersCanChangeRepositoryVisibilitySettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class MembersCanCreateRepositoriesSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: OrganizationMembersCanCreateRepositoriesSettingValue
  )
  case class MembersCanDeleteIssuesSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class MembersCanDeleteRepositoriesSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class MembersCanInviteCollaboratorsSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class MembersCanUpdateProtectedBranchesSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class MembersCanViewDependencyInsightsSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class OrganizationProjectsSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class OutsideCollaboratorsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      login: Option[String],
      orderBy: Option[EnterpriseMemberOrder],
      query: Option[String],
      visibility: Option[RepositoryVisibility]
  )
  case class PendingAdminInvitationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseAdministratorInvitationOrder],
      query: Option[String],
      role: Option[EnterpriseAdministratorRole]
  )
  case class PendingCollaboratorsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[RepositoryInvitationOrder],
      query: Option[String]
  )
  case class PendingMemberInvitationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      query: Option[String]
  )
  case class RepositoryProjectsSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class SamlIdentityProviderSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: IdentityProviderConfigurationState
  )
  case class TeamDiscussionsSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class TwoFactorRequiredSettingOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      value: Boolean
  )
  case class RepositoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[RepositoryOrder]
  )
  case class UserAccountsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseServerUserAccountOrder]
  )
  case class UserAccountsUploadsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseServerUserAccountsUploadOrder]
  )
  case class EmailsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[EnterpriseServerUserAccountEmailOrder]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class OrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[OrganizationOrder],
      query: Option[String],
      role: Option[EnterpriseUserAccountMembershipRole]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class FilesArgs(limit: Option[Int], oid: Option[GitObjectID])
  case class ForksArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[GistOrder]
  )
  case class StargazersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[StarOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class TextArgs(truncate: Option[Int])
  case class AvatarUrlArgs(size: Option[Int])
  case class AssigneesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class HovercardArgs(includeNotificationContexts: Option[Boolean])
  case class LabelsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[LabelOrder]
  )
  case class ParticipantsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ProjectCardsArgs(
      after: Option[String],
      archivedStates: Option[List[Option[ProjectCardArchivedState]]],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class TimelineArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      since: Option[DateTime]
  )
  case class TimelineItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      itemTypes: Option[List[IssueTimelineItemsItemType]],
      last: Option[Int],
      since: Option[DateTime],
      skip: Option[Int]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ContributionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class IssuesArgs(
      after: Option[String],
      before: Option[String],
      filterBy: Option[IssueFilters],
      first: Option[Int],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[IssueState]]
  )
  case class PullRequestsArgs(
      after: Option[String],
      baseRefName: Option[String],
      before: Option[String],
      first: Option[Int],
      headRefName: Option[String],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[PullRequestState]]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class LogoUrlArgs(size: Option[Int])
  case class IssuesArgs(
      after: Option[String],
      before: Option[String],
      filterBy: Option[IssueFilters],
      first: Option[Int],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[IssueState]]
  )
  case class PullRequestsArgs(
      after: Option[String],
      baseRefName: Option[String],
      before: Option[String],
      first: Option[Int],
      headRefName: Option[String],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[PullRequestState]]
  )
  case class AcceptEnterpriseAdministratorInvitationArgs(
      input: AcceptEnterpriseAdministratorInvitationInput
  )
  case class AcceptTopicSuggestionArgs(input: AcceptTopicSuggestionInput)
  case class AddAssigneesToAssignableArgs(input: AddAssigneesToAssignableInput)
  case class AddCommentArgs(input: AddCommentInput)
  case class AddLabelsToLabelableArgs(input: AddLabelsToLabelableInput)
  case class AddProjectCardArgs(input: AddProjectCardInput)
  case class AddProjectColumnArgs(input: AddProjectColumnInput)
  case class AddPullRequestReviewArgs(input: AddPullRequestReviewInput)
  case class AddPullRequestReviewCommentArgs(
      input: AddPullRequestReviewCommentInput
  )
  case class AddReactionArgs(input: AddReactionInput)
  case class AddStarArgs(input: AddStarInput)
  case class ArchiveRepositoryArgs(input: ArchiveRepositoryInput)
  case class CancelEnterpriseAdminInvitationArgs(
      input: CancelEnterpriseAdminInvitationInput
  )
  case class ChangeUserStatusArgs(input: ChangeUserStatusInput)
  case class ClearLabelsFromLabelableArgs(input: ClearLabelsFromLabelableInput)
  case class CloneProjectArgs(input: CloneProjectInput)
  case class CloneTemplateRepositoryArgs(input: CloneTemplateRepositoryInput)
  case class CloseIssueArgs(input: CloseIssueInput)
  case class ClosePullRequestArgs(input: ClosePullRequestInput)
  case class ConvertProjectCardNoteToIssueArgs(
      input: ConvertProjectCardNoteToIssueInput
  )
  case class CreateBranchProtectionRuleArgs(
      input: CreateBranchProtectionRuleInput
  )
  case class CreateEnterpriseOrganizationArgs(
      input: CreateEnterpriseOrganizationInput
  )
  case class CreateIpAllowListEntryArgs(input: CreateIpAllowListEntryInput)
  case class CreateIssueArgs(input: CreateIssueInput)
  case class CreateProjectArgs(input: CreateProjectInput)
  case class CreatePullRequestArgs(input: CreatePullRequestInput)
  case class CreateRefArgs(input: CreateRefInput)
  case class CreateRepositoryArgs(input: CreateRepositoryInput)
  case class CreateTeamDiscussionArgs(input: CreateTeamDiscussionInput)
  case class CreateTeamDiscussionCommentArgs(
      input: CreateTeamDiscussionCommentInput
  )
  case class DeclineTopicSuggestionArgs(input: DeclineTopicSuggestionInput)
  case class DeleteBranchProtectionRuleArgs(
      input: DeleteBranchProtectionRuleInput
  )
  case class DeleteDeploymentArgs(input: DeleteDeploymentInput)
  case class DeleteIpAllowListEntryArgs(input: DeleteIpAllowListEntryInput)
  case class DeleteIssueArgs(input: DeleteIssueInput)
  case class DeleteIssueCommentArgs(input: DeleteIssueCommentInput)
  case class DeleteProjectArgs(input: DeleteProjectInput)
  case class DeleteProjectCardArgs(input: DeleteProjectCardInput)
  case class DeleteProjectColumnArgs(input: DeleteProjectColumnInput)
  case class DeletePullRequestReviewArgs(input: DeletePullRequestReviewInput)
  case class DeletePullRequestReviewCommentArgs(
      input: DeletePullRequestReviewCommentInput
  )
  case class DeleteRefArgs(input: DeleteRefInput)
  case class DeleteTeamDiscussionArgs(input: DeleteTeamDiscussionInput)
  case class DeleteTeamDiscussionCommentArgs(
      input: DeleteTeamDiscussionCommentInput
  )
  case class DismissPullRequestReviewArgs(input: DismissPullRequestReviewInput)
  case class FollowUserArgs(input: FollowUserInput)
  case class InviteEnterpriseAdminArgs(input: InviteEnterpriseAdminInput)
  case class LinkRepositoryToProjectArgs(input: LinkRepositoryToProjectInput)
  case class LockLockableArgs(input: LockLockableInput)
  case class MarkPullRequestReadyForReviewArgs(
      input: MarkPullRequestReadyForReviewInput
  )
  case class MergeBranchArgs(input: MergeBranchInput)
  case class MergePullRequestArgs(input: MergePullRequestInput)
  case class MoveProjectCardArgs(input: MoveProjectCardInput)
  case class MoveProjectColumnArgs(input: MoveProjectColumnInput)
  case class RegenerateEnterpriseIdentityProviderRecoveryCodesArgs(
      input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput
  )
  case class RemoveAssigneesFromAssignableArgs(
      input: RemoveAssigneesFromAssignableInput
  )
  case class RemoveEnterpriseAdminArgs(input: RemoveEnterpriseAdminInput)
  case class RemoveEnterpriseIdentityProviderArgs(
      input: RemoveEnterpriseIdentityProviderInput
  )
  case class RemoveEnterpriseOrganizationArgs(
      input: RemoveEnterpriseOrganizationInput
  )
  case class RemoveLabelsFromLabelableArgs(
      input: RemoveLabelsFromLabelableInput
  )
  case class RemoveOutsideCollaboratorArgs(
      input: RemoveOutsideCollaboratorInput
  )
  case class RemoveReactionArgs(input: RemoveReactionInput)
  case class RemoveStarArgs(input: RemoveStarInput)
  case class ReopenIssueArgs(input: ReopenIssueInput)
  case class ReopenPullRequestArgs(input: ReopenPullRequestInput)
  case class RequestReviewsArgs(input: RequestReviewsInput)
  case class ResolveReviewThreadArgs(input: ResolveReviewThreadInput)
  case class SetEnterpriseIdentityProviderArgs(
      input: SetEnterpriseIdentityProviderInput
  )
  case class SubmitPullRequestReviewArgs(input: SubmitPullRequestReviewInput)
  case class TransferIssueArgs(input: TransferIssueInput)
  case class UnarchiveRepositoryArgs(input: UnarchiveRepositoryInput)
  case class UnfollowUserArgs(input: UnfollowUserInput)
  case class UnlinkRepositoryFromProjectArgs(
      input: UnlinkRepositoryFromProjectInput
  )
  case class UnlockLockableArgs(input: UnlockLockableInput)
  case class UnmarkIssueAsDuplicateArgs(input: UnmarkIssueAsDuplicateInput)
  case class UnresolveReviewThreadArgs(input: UnresolveReviewThreadInput)
  case class UpdateBranchProtectionRuleArgs(
      input: UpdateBranchProtectionRuleInput
  )
  case class UpdateEnterpriseActionExecutionCapabilitySettingArgs(
      input: UpdateEnterpriseActionExecutionCapabilitySettingInput
  )
  case class UpdateEnterpriseAdministratorRoleArgs(
      input: UpdateEnterpriseAdministratorRoleInput
  )
  case class UpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs(
      input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
  )
  case class UpdateEnterpriseDefaultRepositoryPermissionSettingArgs(
      input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput
  )
  case class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs(
      input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
  )
  case class UpdateEnterpriseMembersCanCreateRepositoriesSettingArgs(
      input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
  )
  case class UpdateEnterpriseMembersCanDeleteIssuesSettingArgs(
      input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput
  )
  case class UpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs(
      input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
  )
  case class UpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs(
      input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
  )
  case class UpdateEnterpriseMembersCanMakePurchasesSettingArgs(
      input: UpdateEnterpriseMembersCanMakePurchasesSettingInput
  )
  case class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs(
      input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
  )
  case class UpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs(
      input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
  )
  case class UpdateEnterpriseOrganizationProjectsSettingArgs(
      input: UpdateEnterpriseOrganizationProjectsSettingInput
  )
  case class UpdateEnterpriseProfileArgs(input: UpdateEnterpriseProfileInput)
  case class UpdateEnterpriseRepositoryProjectsSettingArgs(
      input: UpdateEnterpriseRepositoryProjectsSettingInput
  )
  case class UpdateEnterpriseTeamDiscussionsSettingArgs(
      input: UpdateEnterpriseTeamDiscussionsSettingInput
  )
  case class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs(
      input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
  )
  case class UpdateIpAllowListEnabledSettingArgs(
      input: UpdateIpAllowListEnabledSettingInput
  )
  case class UpdateIpAllowListEntryArgs(input: UpdateIpAllowListEntryInput)
  case class UpdateIssueArgs(input: UpdateIssueInput)
  case class UpdateIssueCommentArgs(input: UpdateIssueCommentInput)
  case class UpdateProjectArgs(input: UpdateProjectInput)
  case class UpdateProjectCardArgs(input: UpdateProjectCardInput)
  case class UpdateProjectColumnArgs(input: UpdateProjectColumnInput)
  case class UpdatePullRequestArgs(input: UpdatePullRequestInput)
  case class UpdatePullRequestReviewArgs(input: UpdatePullRequestReviewInput)
  case class UpdatePullRequestReviewCommentArgs(
      input: UpdatePullRequestReviewCommentInput
  )
  case class UpdateRefArgs(input: UpdateRefInput)
  case class UpdateRepositoryArgs(input: UpdateRepositoryInput)
  case class UpdateSubscriptionArgs(input: UpdateSubscriptionInput)
  case class UpdateTeamDiscussionArgs(input: UpdateTeamDiscussionInput)
  case class UpdateTeamDiscussionCommentArgs(
      input: UpdateTeamDiscussionCommentInput
  )
  case class UpdateTopicsArgs(input: UpdateTopicsInput)
  case class AnyPinnableItemsArgs(`type`: Option[PinnableItemType])
  case class AuditLogArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[AuditLogOrder],
      query: Option[String]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class MemberStatusesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[UserStatusOrder]
  )
  case class MembersWithRoleArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PendingMembersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PinnableItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      types: Option[List[PinnableItemType]]
  )
  case class PinnedItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      types: Option[List[PinnableItemType]]
  )
  case class PinnedRepositoriesArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  case class ProjectArgs(number: Int)
  case class ProjectsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ProjectOrder],
      search: Option[String],
      states: Option[List[ProjectState]]
  )
  case class RegistryPackagesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      name: Option[String],
      names: Option[List[Option[String]]],
      packageType: Option[RegistryPackageType],
      publicOnly: Option[Boolean],
      registryPackageType: Option[String],
      repositoryId: Option[ID]
  )
  case class RegistryPackagesForQueryArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      packageType: Option[RegistryPackageType],
      query: Option[String]
  )
  case class RepositoriesArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isFork: Option[Boolean],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  case class RepositoryArgs(name: String)
  case class SponsorshipsAsMaintainerArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      includePrivate: Option[Boolean],
      last: Option[Int],
      orderBy: Option[SponsorshipOrder]
  )
  case class SponsorshipsAsSponsorArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SponsorshipOrder]
  )
  case class TeamArgs(slug: String)
  case class TeamsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      ldapMapped: Option[Boolean],
      orderBy: Option[TeamOrder],
      privacy: Option[TeamPrivacy],
      query: Option[String],
      role: Option[TeamRole],
      rootTeamsOnly: Option[Boolean],
      userLogins: Option[List[String]]
  )
  case class ExternalIdentitiesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class RelevantTeamsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class RelevantOrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ColumnsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PendingCardsArgs(
      after: Option[String],
      archivedStates: Option[List[Option[ProjectCardArchivedState]]],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CardsArgs(
      after: Option[String],
      archivedStates: Option[List[Option[ProjectCardArchivedState]]],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AssigneesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CommitsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class FilesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class HovercardArgs(includeNotificationContexts: Option[Boolean])
  case class LabelsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[LabelOrder]
  )
  case class ParticipantsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ProjectCardsArgs(
      after: Option[String],
      archivedStates: Option[List[Option[ProjectCardArchivedState]]],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class ReviewRequestsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReviewThreadsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReviewsArgs(
      after: Option[String],
      author: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      states: Option[List[PullRequestReviewState]]
  )
  case class TimelineArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      since: Option[DateTime]
  )
  case class TimelineItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      itemTypes: Option[List[PullRequestTimelineItemsItemType]],
      last: Option[Int],
      since: Option[DateTime],
      skip: Option[Int]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ContributionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class OnBehalfOfArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ContributionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ContributionOrder]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      skip: Option[Int]
  )
  case class CodeOfConductArgs(key: String)
  case class EnterpriseArgs(invitationToken: Option[String], slug: String)
  case class EnterpriseAdministratorInvitationArgs(
      enterpriseSlug: String,
      role: EnterpriseAdministratorRole,
      userLogin: String
  )
  case class EnterpriseAdministratorInvitationByTokenArgs(
      invitationToken: String
  )
  case class LicenseArgs(key: String)
  case class MarketplaceCategoriesArgs(
      excludeEmpty: Option[Boolean],
      excludeSubcategories: Option[Boolean],
      includeCategories: Option[List[String]]
  )
  case class MarketplaceCategoryArgs(
      slug: String,
      useTopicAliases: Option[Boolean]
  )
  case class MarketplaceListingArgs(slug: String)
  case class MarketplaceListingsArgs(
      adminId: Option[ID],
      after: Option[String],
      allStates: Option[Boolean],
      before: Option[String],
      categorySlug: Option[String],
      first: Option[Int],
      last: Option[Int],
      organizationId: Option[ID],
      primaryCategoryOnly: Option[Boolean],
      slugs: Option[List[Option[String]]],
      useTopicAliases: Option[Boolean],
      viewerCanAdmin: Option[Boolean],
      withFreeTrialsOnly: Option[Boolean]
  )
  case class NodeArgs(id: ID)
  case class NodesArgs(ids: List[ID])
  case class OrganizationArgs(login: String)
  case class RateLimitArgs(dryRun: Option[Boolean])
  case class RepositoryArgs(name: String, owner: String)
  case class RepositoryOwnerArgs(login: String)
  case class ResourceArgs(url: URI)
  case class SearchArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      query: String,
      `type`: SearchType
  )
  case class SecurityAdvisoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      identifier: Option[SecurityAdvisoryIdentifierFilter],
      last: Option[Int],
      orderBy: Option[SecurityAdvisoryOrder],
      publishedSince: Option[DateTime],
      updatedSince: Option[DateTime]
  )
  case class SecurityAdvisoryArgs(ghsaId: String)
  case class SecurityVulnerabilitiesArgs(
      after: Option[String],
      before: Option[String],
      ecosystem: Option[SecurityAdvisoryEcosystem],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SecurityVulnerabilityOrder],
      `package`: Option[String],
      severities: Option[List[SecurityAdvisorySeverity]]
  )
  case class SponsorsListingArgs(slug: String)
  case class TopicArgs(name: String)
  case class UserArgs(login: String)
  case class UsersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AssociatedPullRequestsArgs(
      after: Option[String],
      baseRefName: Option[String],
      before: Option[String],
      first: Option[Int],
      headRefName: Option[String],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[PullRequestState]]
  )
  case class PackageFileByGuidArgs(guid: String)
  case class PackageFileBySha256Args(sha256: String)
  case class PreReleaseVersionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class TagsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class TopicsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class VersionArgs(version: String)
  case class VersionByPlatformArgs(platform: String, version: String)
  case class VersionBySha256Args(sha256: String)
  case class VersionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class VersionsByMetadatumArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      metadatum: RegistryPackageMetadatum
  )
  case class DependenciesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      `type`: Option[RegistryPackageDependencyType]
  )
  case class FileByNameArgs(filename: String)
  case class FilesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReleaseAssetsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      name: Option[String]
  )
  case class ShortDescriptionHTMLArgs(limit: Option[Int])
  case class AssignableUsersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      query: Option[String]
  )
  case class BranchProtectionRulesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class CollaboratorsArgs(
      affiliation: Option[CollaboratorAffiliation],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      query: Option[String]
  )
  case class CommitCommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class DeployKeysArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class DeploymentsArgs(
      after: Option[String],
      before: Option[String],
      environments: Option[List[String]],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[DeploymentOrder]
  )
  case class ForksArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  case class IssueArgs(number: Int)
  case class IssueOrPullRequestArgs(number: Int)
  case class IssuesArgs(
      after: Option[String],
      before: Option[String],
      filterBy: Option[IssueFilters],
      first: Option[Int],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[IssueState]]
  )
  case class LabelArgs(name: String)
  case class LabelsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[LabelOrder],
      query: Option[String]
  )
  case class LanguagesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[LanguageOrder]
  )
  case class MentionableUsersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      query: Option[String]
  )
  case class MilestoneArgs(number: Int)
  case class MilestonesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[MilestoneOrder],
      states: Option[List[MilestoneState]]
  )
  case class ObjectArgs(expression: Option[String], oid: Option[GitObjectID])
  case class ProjectArgs(number: Int)
  case class ProjectsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ProjectOrder],
      search: Option[String],
      states: Option[List[ProjectState]]
  )
  case class PullRequestArgs(number: Int)
  case class PullRequestsArgs(
      after: Option[String],
      baseRefName: Option[String],
      before: Option[String],
      first: Option[Int],
      headRefName: Option[String],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[PullRequestState]]
  )
  case class RefArgs(qualifiedName: String)
  case class RefsArgs(
      after: Option[String],
      before: Option[String],
      direction: Option[OrderDirection],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[RefOrder],
      refPrefix: String
  )
  case class RegistryPackagesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      name: Option[String],
      names: Option[List[Option[String]]],
      packageType: Option[RegistryPackageType],
      publicOnly: Option[Boolean],
      registryPackageType: Option[String],
      repositoryId: Option[ID]
  )
  case class RegistryPackagesForQueryArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      packageType: Option[RegistryPackageType],
      query: Option[String]
  )
  case class ReleaseArgs(tagName: String)
  case class ReleasesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReleaseOrder]
  )
  case class RepositoryTopicsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ShortDescriptionHTMLArgs(limit: Option[Int])
  case class StargazersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[StarOrder]
  )
  case class SubmodulesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class VulnerabilityAlertsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class WatchersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class VulnerabilitiesArgs(
      after: Option[String],
      before: Option[String],
      ecosystem: Option[SecurityAdvisoryEcosystem],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SecurityVulnerabilityOrder],
      `package`: Option[String],
      severities: Option[List[SecurityAdvisorySeverity]]
  )
  case class TiersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SponsorsTierOrder]
  )
  case class SponsorshipsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      includePrivate: Option[Boolean],
      last: Option[Int],
      orderBy: Option[SponsorshipOrder]
  )
  case class ContextArgs(name: String)
  case class ContextsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class AncestorsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class AvatarUrlArgs(size: Option[Int])
  case class ChildTeamsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      immediateOnly: Option[Boolean],
      last: Option[Int],
      orderBy: Option[TeamOrder],
      userLogins: Option[List[String]]
  )
  case class DiscussionArgs(number: Int)
  case class DiscussionsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isPinned: Option[Boolean],
      last: Option[Int],
      orderBy: Option[TeamDiscussionOrder]
  )
  case class InvitationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class MemberStatusesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[UserStatusOrder]
  )
  case class MembersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      membership: Option[TeamMembershipType],
      orderBy: Option[TeamMemberOrder],
      query: Option[String],
      role: Option[TeamMemberRole]
  )
  case class RepositoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[TeamRepositoryOrder],
      query: Option[String]
  )
  case class CommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      fromComment: Option[Int],
      last: Option[Int],
      orderBy: Option[TeamDiscussionCommentOrder]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ReactionsArgs(
      after: Option[String],
      before: Option[String],
      content: Option[ReactionContent],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ReactionOrder]
  )
  case class UserContentEditsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class RelatedTopicsArgs(first: Option[Int])
  case class StargazersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[StarOrder]
  )
  case class AnyPinnableItemsArgs(`type`: Option[PinnableItemType])
  case class AvatarUrlArgs(size: Option[Int])
  case class CommitCommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class ContributionsCollectionArgs(
      from: Option[DateTime],
      organizationID: Option[ID],
      to: Option[DateTime]
  )
  case class FollowersArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class FollowingArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class GistArgs(name: String)
  case class GistCommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class GistsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[GistOrder],
      privacy: Option[GistPrivacy]
  )
  case class HovercardArgs(primarySubjectId: Option[ID])
  case class IssueCommentsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class IssuesArgs(
      after: Option[String],
      before: Option[String],
      filterBy: Option[IssueFilters],
      first: Option[Int],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[IssueState]]
  )
  case class OrganizationArgs(login: String)
  case class OrganizationsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PinnableItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      types: Option[List[PinnableItemType]]
  )
  case class PinnedItemsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      types: Option[List[PinnableItemType]]
  )
  case class PinnedRepositoriesArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  case class ProjectArgs(number: Int)
  case class ProjectsArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[ProjectOrder],
      search: Option[String],
      states: Option[List[ProjectState]]
  )
  case class PublicKeysArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int]
  )
  case class PullRequestsArgs(
      after: Option[String],
      baseRefName: Option[String],
      before: Option[String],
      first: Option[Int],
      headRefName: Option[String],
      labels: Option[List[String]],
      last: Option[Int],
      orderBy: Option[IssueOrder],
      states: Option[List[PullRequestState]]
  )
  case class RegistryPackagesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      name: Option[String],
      names: Option[List[Option[String]]],
      packageType: Option[RegistryPackageType],
      publicOnly: Option[Boolean],
      registryPackageType: Option[String],
      repositoryId: Option[ID]
  )
  case class RegistryPackagesForQueryArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      packageType: Option[RegistryPackageType],
      query: Option[String]
  )
  case class RepositoriesArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isFork: Option[Boolean],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  case class RepositoriesContributedToArgs(
      after: Option[String],
      before: Option[String],
      contributionTypes: Option[List[Option[RepositoryContributionType]]],
      first: Option[Int],
      includeUserRepositories: Option[Boolean],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      privacy: Option[RepositoryPrivacy]
  )
  case class RepositoryArgs(name: String)
  case class SavedRepliesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SavedReplyOrder]
  )
  case class SponsorshipsAsMaintainerArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      includePrivate: Option[Boolean],
      last: Option[Int],
      orderBy: Option[SponsorshipOrder]
  )
  case class SponsorshipsAsSponsorArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[SponsorshipOrder]
  )
  case class StarredRepositoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: Option[StarOrder],
      ownedByViewer: Option[Boolean]
  )
  case class TopRepositoriesArgs(
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      last: Option[Int],
      orderBy: RepositoryOrder,
      since: Option[DateTime]
  )
  case class WatchingArgs(
      affiliations: Option[List[Option[RepositoryAffiliation]]],
      after: Option[String],
      before: Option[String],
      first: Option[Int],
      isLocked: Option[Boolean],
      last: Option[Int],
      orderBy: Option[RepositoryOrder],
      ownerAffiliations: Option[List[Option[RepositoryAffiliation]]],
      privacy: Option[RepositoryPrivacy]
  )
  @GQLDescription(
    """Autogenerated return type of AcceptEnterpriseAdministratorInvitation"""
  )
  case class AcceptEnterpriseAdministratorInvitationPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The invitation that was accepted.""")
      invitation: Option[EnterpriseAdministratorInvitation],
      @GQLDescription(
        """A message confirming the result of accepting an administrator invitation."""
      )
      message: Option[String]
  )
  @GQLDescription("""Autogenerated return type of AcceptTopicSuggestion""")
  case class AcceptTopicSuggestionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The accepted topic.""")
      topic: Option[Topic]
  )
  @GQLDescription("""Location information for an actor""")
  case class ActorLocation(
      @GQLDescription("""City""")
      city: Option[String],
      @GQLDescription("""Country name""")
      country: Option[String],
      @GQLDescription("""Country code""")
      countryCode: Option[String],
      @GQLDescription("""Region name""")
      region: Option[String],
      @GQLDescription("""Region or state code""")
      regionCode: Option[String]
  )
  @GQLDescription("""Autogenerated return type of AddAssigneesToAssignable""")
  case class AddAssigneesToAssignablePayload(
      @GQLDescription("""The item that was assigned.""")
      assignable: Option[Assignable],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of AddComment""")
  case class AddCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The edge from the subject's comment connection.""")
      commentEdge: Option[IssueCommentEdge],
      @GQLDescription("""The subject""")
      subject: Option[Node],
      @GQLDescription("""The edge from the subject's timeline connection.""")
      timelineEdge: Option[IssueTimelineItemEdge]
  )
  @GQLDescription("""Autogenerated return type of AddLabelsToLabelable""")
  case class AddLabelsToLabelablePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The item that was labeled.""")
      labelable: Option[Labelable]
  )
  @GQLDescription("""Autogenerated return type of AddProjectCard""")
  case class AddProjectCardPayload(
      @GQLDescription("""The edge from the ProjectColumn's card connection.""")
      cardEdge: Option[ProjectCardEdge],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ProjectColumn""")
      projectColumn: Option[ProjectColumn]
  )
  @GQLDescription("""Autogenerated return type of AddProjectColumn""")
  case class AddProjectColumnPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The edge from the project's column connection.""")
      columnEdge: Option[ProjectColumnEdge],
      @GQLDescription("""The project""")
      project: Option[Project]
  )
  @GQLDescription(
    """Autogenerated return type of AddPullRequestReviewComment"""
  )
  case class AddPullRequestReviewCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The newly created comment.""")
      comment: Option[PullRequestReviewComment],
      @GQLDescription("""The edge from the review's comment connection.""")
      commentEdge: Option[PullRequestReviewCommentEdge]
  )
  @GQLDescription("""Autogenerated return type of AddPullRequestReview""")
  case class AddPullRequestReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The newly created pull request review.""")
      pullRequestReview: Option[PullRequestReview],
      @GQLDescription("""The edge from the pull request's review connection.""")
      reviewEdge: Option[PullRequestReviewEdge]
  )
  @GQLDescription("""Autogenerated return type of AddReaction""")
  case class AddReactionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The reaction object.""")
      reaction: Option[Reaction],
      @GQLDescription("""The reactable subject.""")
      subject: Option[Reactable]
  )
  @GQLDescription("""Autogenerated return type of AddStar""")
  case class AddStarPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The starrable.""")
      starrable: Option[Starrable]
  )
  @GQLDescription("""Autogenerated return type of ArchiveRepository""")
  case class ArchiveRepositoryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The repository that was marked as archived.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Represents a Git blame.""")
  case class Blame(
      @GQLDescription("""The list of ranges from a Git blame.""")
      ranges: List[BlameRange]
  )
  @GQLDescription("""Represents a range of information from a Git blame.""")
  case class BlameRange(
      @GQLDescription(
        """Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change."""
      )
      age: Int,
      @GQLDescription("""Identifies the line author""")
      commit: Commit,
      @GQLDescription("""The ending line for the range""")
      endingLine: Int,
      @GQLDescription("""The starting line for the range""")
      startingLine: Int
  )
  @GQLDescription("""Represents a Git blob.""")
  case class Blob(
      @GQLDescription("""An abbreviated version of the Git object ID""")
      abbreviatedOid: String,
      @GQLDescription("""Byte size of Blob object""")
      byteSize: Int,
      @GQLDescription("""The HTTP path for this Git object""")
      commitResourcePath: URI,
      @GQLDescription("""The HTTP URL for this Git object""")
      commitUrl: URI,
      id: ID,
      @GQLDescription("""Indicates whether the Blob is binary or text""")
      isBinary: Boolean,
      @GQLDescription("""Indicates whether the contents is truncated""")
      isTruncated: Boolean,
      @GQLDescription("""The Git object ID""")
      oid: GitObjectID,
      @GQLDescription("""The Repository the Git object belongs to""")
      repository: Repository,
      @GQLDescription("""UTF8 text data or null if the Blob is binary""")
      text: Option[String]
  )
  @GQLDescription("""A branch protection rule.""")
  case class BranchProtectionRule(
      @GQLDescription(
        """A list of conflicts matching branches protection rule and other branch protection rules"""
      )
      branchProtectionRuleConflicts: BranchProtectionRuleBranchProtectionRuleConflictsArgs => BranchProtectionRuleConflictConnection,
      @GQLDescription("""The actor who created this branch protection rule.""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription(
        """Will new commits pushed to matching branches dismiss pull request review approvals."""
      )
      dismissesStaleReviews: Boolean,
      id: ID,
      @GQLDescription("""Can admins overwrite branch protection.""")
      isAdminEnforced: Boolean,
      @GQLDescription("""Repository refs that are protected by this rule""")
      matchingRefs: BranchProtectionRuleMatchingRefsArgs => RefConnection,
      @GQLDescription("""Identifies the protection rule pattern.""")
      pattern: String,
      @GQLDescription(
        """A list push allowances for this branch protection rule."""
      )
      pushAllowances: BranchProtectionRulePushAllowancesArgs => PushAllowanceConnection,
      @GQLDescription(
        """The repository associated with this branch protection rule."""
      )
      repository: Option[Repository],
      @GQLDescription(
        """Number of approving reviews required to update matching branches."""
      )
      requiredApprovingReviewCount: Option[Int],
      @GQLDescription(
        """List of required status check contexts that must pass for commits to be accepted to matching branches."""
      )
      requiredStatusCheckContexts: Option[List[Option[String]]],
      @GQLDescription(
        """Are approving reviews required to update matching branches."""
      )
      requiresApprovingReviews: Boolean,
      @GQLDescription(
        """Are reviews from code owners required to update matching branches."""
      )
      requiresCodeOwnerReviews: Boolean,
      @GQLDescription("""Are commits required to be signed.""")
      requiresCommitSignatures: Boolean,
      @GQLDescription(
        """Are status checks required to update matching branches."""
      )
      requiresStatusChecks: Boolean,
      @GQLDescription(
        """Are branches required to be up to date before merging."""
      )
      requiresStrictStatusChecks: Boolean,
      @GQLDescription("""Is pushing to matching branches restricted.""")
      restrictsPushes: Boolean,
      @GQLDescription("""Is dismissal of pull request reviews restricted.""")
      restrictsReviewDismissals: Boolean,
      @GQLDescription(
        """A list review dismissal allowances for this branch protection rule."""
      )
      reviewDismissalAllowances: BranchProtectionRuleReviewDismissalAllowancesArgs => ReviewDismissalAllowanceConnection
  )
  @GQLDescription("""A conflict between two branch protection rules.""")
  case class BranchProtectionRuleConflict(
      @GQLDescription("""Identifies the branch protection rule.""")
      branchProtectionRule: Option[BranchProtectionRule],
      @GQLDescription("""Identifies the conflicting branch protection rule.""")
      conflictingBranchProtectionRule: Option[BranchProtectionRule],
      @GQLDescription(
        """Identifies the branch ref that has conflicting rules"""
      )
      ref: Option[Ref]
  )
  @GQLDescription("""The connection type for BranchProtectionRuleConflict.""")
  case class BranchProtectionRuleConflictConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[BranchProtectionRuleConflictEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[BranchProtectionRuleConflict]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class BranchProtectionRuleConflictEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[BranchProtectionRuleConflict]
  )
  @GQLDescription("""The connection type for BranchProtectionRule.""")
  case class BranchProtectionRuleConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[BranchProtectionRuleEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[BranchProtectionRule]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class BranchProtectionRuleEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[BranchProtectionRule]
  )
  @GQLDescription(
    """Autogenerated return type of CancelEnterpriseAdminInvitation"""
  )
  case class CancelEnterpriseAdminInvitationPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The invitation that was canceled.""")
      invitation: Option[EnterpriseAdministratorInvitation],
      @GQLDescription(
        """A message confirming the result of canceling an administrator invitation."""
      )
      message: Option[String]
  )
  @GQLDescription("""Autogenerated return type of ChangeUserStatus""")
  case class ChangeUserStatusPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""Your updated status.""")
      status: Option[UserStatus]
  )
  @GQLDescription("""Autogenerated return type of ClearLabelsFromLabelable""")
  case class ClearLabelsFromLabelablePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The item that was unlabeled.""")
      labelable: Option[Labelable]
  )
  @GQLDescription("""Autogenerated return type of CloneProject""")
  case class CloneProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The id of the JobStatus for populating cloned fields."""
      )
      jobStatusId: Option[String],
      @GQLDescription("""The new cloned project.""")
      project: Option[Project]
  )
  @GQLDescription("""Autogenerated return type of CloneTemplateRepository""")
  case class CloneTemplateRepositoryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new repository.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of CloseIssue""")
  case class CloseIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The issue that was closed.""")
      issue: Option[Issue]
  )
  @GQLDescription("""Autogenerated return type of ClosePullRequest""")
  case class ClosePullRequestPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The pull request that was closed.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription("""The Code of Conduct for a repository""")
  case class CodeOfConduct(
      @GQLDescription("""The body of the Code of Conduct""")
      body: Option[String],
      id: ID,
      @GQLDescription("""The key for the Code of Conduct""")
      key: String,
      @GQLDescription("""The formal name of the Code of Conduct""")
      name: String,
      @GQLDescription("""The HTTP path for this Code of Conduct""")
      resourcePath: Option[URI],
      @GQLDescription("""The HTTP URL for this Code of Conduct""")
      url: Option[URI]
  )
  @GQLDescription("""Represents a comment on a given Commit.""")
  case class CommitComment(
      @GQLDescription("""The actor who authored the comment.""")
      author: Option[Actor],
      @GQLDescription(
        """Author's association with the subject of the comment."""
      )
      authorAssociation: CommentAuthorAssociation,
      @GQLDescription("""Identifies the comment body.""")
      body: String,
      @GQLDescription("""The body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription("""The body rendered to text.""")
      bodyText: String,
      @GQLDescription(
        """Identifies the commit associated with the comment, if the commit exists."""
      )
      commit: Option[Commit],
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """Check if this comment was created via an email reply."""
      )
      createdViaEmail: Boolean,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription("""The actor who edited the comment.""")
      editor: Option[Actor],
      id: ID,
      @GQLDescription(
        """Check if this comment was edited and includes an edit with the creation data"""
      )
      includesCreatedEdit: Boolean,
      @GQLDescription(
        """Returns whether or not a comment has been minimized."""
      )
      isMinimized: Boolean,
      @GQLDescription("""The moment the editor made the last edit""")
      lastEditedAt: Option[DateTime],
      @GQLDescription("""Returns why the comment was minimized.""")
      minimizedReason: Option[String],
      @GQLDescription(
        """Identifies the file path associated with the comment."""
      )
      path: Option[String],
      @GQLDescription(
        """Identifies the line position associated with the comment."""
      )
      position: Option[Int],
      @GQLDescription("""Identifies when the comment was published at.""")
      publishedAt: Option[DateTime],
      @GQLDescription(
        """A list of reactions grouped by content left on the subject."""
      )
      reactionGroups: Option[List[ReactionGroup]],
      @GQLDescription("""A list of Reactions left on the Issue.""")
      reactions: CommitCommentReactionsArgs => ReactionConnection,
      @GQLDescription("""The repository associated with this node.""")
      repository: Repository,
      @GQLDescription("""The HTTP path permalink for this commit comment.""")
      resourcePath: URI,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL permalink for this commit comment.""")
      url: URI,
      @GQLDescription("""A list of edits to this content.""")
      userContentEdits: CommitCommentUserContentEditsArgs => Option[
        UserContentEditConnection
      ],
      @GQLDescription("""Check if the current viewer can delete this object.""")
      viewerCanDelete: Boolean,
      @GQLDescription(
        """Check if the current viewer can minimize this object."""
      )
      viewerCanMinimize: Boolean,
      @GQLDescription("""Can user react to this subject""")
      viewerCanReact: Boolean,
      @GQLDescription("""Check if the current viewer can update this object.""")
      viewerCanUpdate: Boolean,
      @GQLDescription(
        """Reasons why the current viewer can not update this comment."""
      )
      viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
      @GQLDescription("""Did the viewer author this comment.""")
      viewerDidAuthor: Boolean
  )
  @GQLDescription("""The connection type for CommitComment.""")
  case class CommitCommentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CommitCommentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CommitComment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CommitCommentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CommitComment]
  )
  @GQLDescription("""The connection type for Commit.""")
  case class CommitConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CommitEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Commit]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """This aggregates commits made by a user within one repository."""
  )
  case class CommitContributionsByRepository(
      @GQLDescription("""The commit contributions, each representing a day.""")
      contributions: CommitContributionsByRepositoryContributionsArgs => CreatedCommitContributionConnection,
      @GQLDescription("""The repository in which the commits were made.""")
      repository: Repository,
      @GQLDescription(
        """The HTTP path for the user's commits to the repository in this time range."""
      )
      resourcePath: URI,
      @GQLDescription(
        """The HTTP URL for the user's commits to the repository in this time range."""
      )
      url: URI
  )
  @GQLDescription("""An edge in a connection.""")
  case class CommitEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Commit]
  )
  @GQLDescription("""The connection type for Commit.""")
  case class CommitHistoryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CommitEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Commit]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""A calendar of contributions made on GitHub by a user.""")
  case class ContributionCalendar(
      @GQLDescription(
        """A list of hex color codes used in this calendar. The darker the color, the more contributions it represents."""
      )
      colors: List[String],
      @GQLDescription(
        """Determine if the color set was chosen because it's currently Halloween."""
      )
      isHalloween: Boolean,
      @GQLDescription(
        """A list of the months of contributions in this calendar."""
      )
      months: List[ContributionCalendarMonth],
      @GQLDescription("""The count of total contributions in the calendar.""")
      totalContributions: Int,
      @GQLDescription(
        """A list of the weeks of contributions in this calendar."""
      )
      weeks: List[ContributionCalendarWeek]
  )
  @GQLDescription(
    """Represents a single day of contributions on GitHub by a user."""
  )
  case class ContributionCalendarDay(
      @GQLDescription(
        """The hex color code that represents how many contributions were made on this day compared to others in the calendar."""
      )
      color: String,
      @GQLDescription(
        """How many contributions were made by the user on this day."""
      )
      contributionCount: Int,
      @GQLDescription("""The day this square represents.""")
      date: Date,
      @GQLDescription(
        """A number representing which day of the week this square represents, e.g., 1 is Monday."""
      )
      weekday: Int
  )
  @GQLDescription(
    """A month of contributions in a user's contribution graph."""
  )
  case class ContributionCalendarMonth(
      @GQLDescription("""The date of the first day of this month.""")
      firstDay: Date,
      @GQLDescription("""The name of the month.""")
      name: String,
      @GQLDescription("""How many weeks started in this month.""")
      totalWeeks: Int,
      @GQLDescription("""The year the month occurred in.""")
      year: Int
  )
  @GQLDescription("""A week of contributions in a user's contribution graph.""")
  case class ContributionCalendarWeek(
      @GQLDescription("""The days of contributions in this week.""")
      contributionDays: List[ContributionCalendarDay],
      @GQLDescription("""The date of the earliest square in this week.""")
      firstDay: Date
  )
  @GQLDescription(
    """A contributions collection aggregates contributions such as opened issues and commits created by a user."""
  )
  case class ContributionsCollection(
      @GQLDescription(
        """Commit contributions made by the user, grouped by repository."""
      )
      commitContributionsByRepository: ContributionsCollectionCommitContributionsByRepositoryArgs => List[
        CommitContributionsByRepository
      ],
      @GQLDescription("""A calendar of this user's contributions on GitHub.""")
      contributionCalendar: ContributionCalendar,
      @GQLDescription(
        """The years the user has been making contributions with the most recent year first."""
      )
      contributionYears: List[Int],
      @GQLDescription(
        """Determine if this collection's time span ends in the current month."""
      )
      doesEndInCurrentMonth: Boolean,
      @GQLDescription(
        """The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts."""
      )
      earliestRestrictedContributionDate: Option[Date],
      @GQLDescription("""The ending date and time of this collection.""")
      endedAt: DateTime,
      @GQLDescription(
        """The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned."""
      )
      firstIssueContribution: Option[CreatedIssueOrRestrictedContribution],
      @GQLDescription(
        """The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned."""
      )
      firstPullRequestContribution: Option[
        CreatedPullRequestOrRestrictedContribution
      ],
      @GQLDescription(
        """The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned."""
      )
      firstRepositoryContribution: Option[
        CreatedRepositoryOrRestrictedContribution
      ],
      @GQLDescription(
        """Does the user have any more activity in the timeline that occurred prior to the collection's time range?"""
      )
      hasActivityInThePast: Boolean,
      @GQLDescription(
        """Determine if there are any contributions in this collection."""
      )
      hasAnyContributions: Boolean,
      @GQLDescription(
        """Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts."""
      )
      hasAnyRestrictedContributions: Boolean,
      @GQLDescription(
        """Whether or not the collector's time span is all within the same day."""
      )
      isSingleDay: Boolean,
      @GQLDescription("""A list of issues the user opened.""")
      issueContributions: ContributionsCollectionIssueContributionsArgs => CreatedIssueContributionConnection,
      @GQLDescription(
        """Issue contributions made by the user, grouped by repository."""
      )
      issueContributionsByRepository: ContributionsCollectionIssueContributionsByRepositoryArgs => List[
        IssueContributionsByRepository
      ],
      @GQLDescription(
        """When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false."""
      )
      joinedGitHubContribution: Option[JoinedGitHubContribution],
      @GQLDescription(
        """The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts."""
      )
      latestRestrictedContributionDate: Option[Date],
      @GQLDescription(
        """When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity."""
      )
      mostRecentCollectionWithActivity: Option[ContributionsCollection],
      @GQLDescription(
        """Returns a different contributions collection from an earlier time range than this one
that does not have any contributions."""
      )
      mostRecentCollectionWithoutActivity: Option[ContributionsCollection],
      @GQLDescription(
        """The issue the user opened on GitHub that received the most comments in the specified
time frame."""
      )
      popularIssueContribution: Option[CreatedIssueContribution],
      @GQLDescription(
        """The pull request the user opened on GitHub that received the most comments in the
specified time frame."""
      )
      popularPullRequestContribution: Option[CreatedPullRequestContribution],
      @GQLDescription("""Pull request contributions made by the user.""")
      pullRequestContributions: ContributionsCollectionPullRequestContributionsArgs => CreatedPullRequestContributionConnection,
      @GQLDescription(
        """Pull request contributions made by the user, grouped by repository."""
      )
      pullRequestContributionsByRepository: ContributionsCollectionPullRequestContributionsByRepositoryArgs => List[
        PullRequestContributionsByRepository
      ],
      @GQLDescription("""Pull request review contributions made by the user.""")
      pullRequestReviewContributions: ContributionsCollectionPullRequestReviewContributionsArgs => CreatedPullRequestReviewContributionConnection,
      @GQLDescription(
        """Pull request review contributions made by the user, grouped by repository."""
      )
      pullRequestReviewContributionsByRepository: ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs => List[
        PullRequestReviewContributionsByRepository
      ],
      @GQLDescription(
        """A list of repositories owned by the user that the user created in this time range."""
      )
      repositoryContributions: ContributionsCollectionRepositoryContributionsArgs => CreatedRepositoryContributionConnection,
      @GQLDescription(
        """A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts."""
      )
      restrictedContributionsCount: Int,
      @GQLDescription("""The beginning date and time of this collection.""")
      startedAt: DateTime,
      @GQLDescription(
        """How many commits were made by the user in this time span."""
      )
      totalCommitContributions: Int,
      @GQLDescription("""How many issues the user opened.""")
      totalIssueContributions: ContributionsCollectionTotalIssueContributionsArgs => Int,
      @GQLDescription("""How many pull requests the user opened.""")
      totalPullRequestContributions: ContributionsCollectionTotalPullRequestContributionsArgs => Int,
      @GQLDescription("""How many pull request reviews the user left.""")
      totalPullRequestReviewContributions: Int,
      @GQLDescription(
        """How many different repositories the user committed to."""
      )
      totalRepositoriesWithContributedCommits: Int,
      @GQLDescription(
        """How many different repositories the user opened issues in."""
      )
      totalRepositoriesWithContributedIssues: ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs => Int,
      @GQLDescription(
        """How many different repositories the user left pull request reviews in."""
      )
      totalRepositoriesWithContributedPullRequestReviews: Int,
      @GQLDescription(
        """How many different repositories the user opened pull requests in."""
      )
      totalRepositoriesWithContributedPullRequests: ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs => Int,
      @GQLDescription("""How many repositories the user created.""")
      totalRepositoryContributions: ContributionsCollectionTotalRepositoryContributionsArgs => Int,
      @GQLDescription(
        """The user who made the contributions in this collection."""
      )
      user: User
  )
  @GQLDescription(
    """Autogenerated return type of ConvertProjectCardNoteToIssue"""
  )
  case class ConvertProjectCardNoteToIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated ProjectCard.""")
      projectCard: Option[ProjectCard]
  )
  @GQLDescription("""Autogenerated return type of CreateBranchProtectionRule""")
  case class CreateBranchProtectionRulePayload(
      @GQLDescription("""The newly created BranchProtectionRule.""")
      branchProtectionRule: Option[BranchProtectionRule],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of CreateEnterpriseOrganization"""
  )
  case class CreateEnterpriseOrganizationPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The enterprise that owns the created organization.""")
      enterprise: Option[Enterprise],
      @GQLDescription("""The organization that was created.""")
      organization: Option[Organization]
  )
  @GQLDescription("""Autogenerated return type of CreateIpAllowListEntry""")
  case class CreateIpAllowListEntryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The IP allow list entry that was created.""")
      ipAllowListEntry: Option[IpAllowListEntry]
  )
  @GQLDescription("""Autogenerated return type of CreateIssue""")
  case class CreateIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new issue.""")
      issue: Option[Issue]
  )
  @GQLDescription("""Autogenerated return type of CreateProject""")
  case class CreateProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new project.""")
      project: Option[Project]
  )
  @GQLDescription("""Autogenerated return type of CreatePullRequest""")
  case class CreatePullRequestPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new pull request.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription("""Autogenerated return type of CreateRef""")
  case class CreateRefPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The newly created ref.""")
      ref: Option[Ref]
  )
  @GQLDescription("""Autogenerated return type of CreateRepository""")
  case class CreateRepositoryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new repository.""")
      repository: Option[Repository]
  )
  @GQLDescription(
    """Autogenerated return type of CreateTeamDiscussionComment"""
  )
  case class CreateTeamDiscussionCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new comment.""")
      teamDiscussionComment: Option[TeamDiscussionComment]
  )
  @GQLDescription("""Autogenerated return type of CreateTeamDiscussion""")
  case class CreateTeamDiscussionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new discussion.""")
      teamDiscussion: Option[TeamDiscussion]
  )
  @GQLDescription(
    """Represents the contribution a user made by committing to a repository."""
  )
  case class CreatedCommitContribution(
      @GQLDescription(
        """How many commits were made on this day to this repository by the user."""
      )
      commitCount: Int,
      @GQLDescription(
        """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
      )
      isRestricted: Boolean,
      @GQLDescription("""When this contribution was made.""")
      occurredAt: DateTime,
      @GQLDescription("""The repository the user made a commit in.""")
      repository: Repository,
      @GQLDescription("""The HTTP path for this contribution.""")
      resourcePath: URI,
      @GQLDescription("""The HTTP URL for this contribution.""")
      url: URI,
      @GQLDescription("""The user who made this contribution.""")
      user: User
  )
  @GQLDescription("""The connection type for CreatedCommitContribution.""")
  case class CreatedCommitContributionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CreatedCommitContributionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CreatedCommitContribution]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of commits across days and repositories in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CreatedCommitContributionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CreatedCommitContribution]
  )
  @GQLDescription("""The connection type for CreatedIssueContribution.""")
  case class CreatedIssueContributionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CreatedIssueContributionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CreatedIssueContribution]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CreatedIssueContributionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CreatedIssueContribution]
  )
  @GQLDescription("""The connection type for CreatedPullRequestContribution.""")
  case class CreatedPullRequestContributionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CreatedPullRequestContributionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CreatedPullRequestContribution]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CreatedPullRequestContributionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CreatedPullRequestContribution]
  )
  @GQLDescription(
    """Represents the contribution a user made by leaving a review on a pull request."""
  )
  case class CreatedPullRequestReviewContribution(
      @GQLDescription(
        """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
      )
      isRestricted: Boolean,
      @GQLDescription("""When this contribution was made.""")
      occurredAt: DateTime,
      @GQLDescription("""The pull request the user reviewed.""")
      pullRequest: PullRequest,
      @GQLDescription("""The review the user left on the pull request.""")
      pullRequestReview: PullRequestReview,
      @GQLDescription(
        """The repository containing the pull request that the user reviewed."""
      )
      repository: Repository,
      @GQLDescription("""The HTTP path for this contribution.""")
      resourcePath: URI,
      @GQLDescription("""The HTTP URL for this contribution.""")
      url: URI,
      @GQLDescription("""The user who made this contribution.""")
      user: User
  )
  @GQLDescription(
    """The connection type for CreatedPullRequestReviewContribution."""
  )
  case class CreatedPullRequestReviewContributionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CreatedPullRequestReviewContributionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CreatedPullRequestReviewContribution]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CreatedPullRequestReviewContributionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CreatedPullRequestReviewContribution]
  )
  @GQLDescription("""The connection type for CreatedRepositoryContribution.""")
  case class CreatedRepositoryContributionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[CreatedRepositoryContributionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[CreatedRepositoryContribution]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class CreatedRepositoryContributionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[CreatedRepositoryContribution]
  )
  @GQLDescription("""Autogenerated return type of DeclineTopicSuggestion""")
  case class DeclineTopicSuggestionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The declined topic.""")
      topic: Option[Topic]
  )
  @GQLDescription("""Autogenerated return type of DeleteBranchProtectionRule""")
  case class DeleteBranchProtectionRulePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of DeleteDeployment""")
  case class DeleteDeploymentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of DeleteIpAllowListEntry""")
  case class DeleteIpAllowListEntryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The IP allow list entry that was deleted.""")
      ipAllowListEntry: Option[IpAllowListEntry]
  )
  @GQLDescription("""Autogenerated return type of DeleteIssueComment""")
  case class DeleteIssueCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of DeleteIssue""")
  case class DeleteIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The repository the issue belonged to""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of DeleteProjectCard""")
  case class DeleteProjectCardPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The column the deleted card was in.""")
      column: Option[ProjectColumn],
      @GQLDescription("""The deleted card ID.""")
      deletedCardId: Option[ID]
  )
  @GQLDescription("""Autogenerated return type of DeleteProjectColumn""")
  case class DeleteProjectColumnPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The deleted column ID.""")
      deletedColumnId: Option[ID],
      @GQLDescription("""The project the deleted column was in.""")
      project: Option[Project]
  )
  @GQLDescription("""Autogenerated return type of DeleteProject""")
  case class DeleteProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The repository or organization the project was removed from."""
      )
      owner: Option[ProjectOwner]
  )
  @GQLDescription(
    """Autogenerated return type of DeletePullRequestReviewComment"""
  )
  case class DeletePullRequestReviewCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The pull request review the deleted comment belonged to."""
      )
      pullRequestReview: Option[PullRequestReview]
  )
  @GQLDescription("""Autogenerated return type of DeletePullRequestReview""")
  case class DeletePullRequestReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The deleted pull request review.""")
      pullRequestReview: Option[PullRequestReview]
  )
  @GQLDescription("""Autogenerated return type of DeleteRef""")
  case class DeleteRefPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of DeleteTeamDiscussionComment"""
  )
  case class DeleteTeamDiscussionCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of DeleteTeamDiscussion""")
  case class DeleteTeamDiscussionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""A repository deploy key.""")
  case class DeployKey(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      id: ID,
      @GQLDescription("""The deploy key.""")
      key: String,
      @GQLDescription("""Whether or not the deploy key is read only.""")
      readOnly: Boolean,
      @GQLDescription("""The deploy key title.""")
      title: String,
      @GQLDescription("""Whether or not the deploy key has been verified.""")
      verified: Boolean
  )
  @GQLDescription("""The connection type for DeployKey.""")
  case class DeployKeyConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[DeployKeyEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[DeployKey]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class DeployKeyEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[DeployKey]
  )
  @GQLDescription("""Represents triggered deployment instance.""")
  case class Deployment(
      @GQLDescription("""Identifies the commit sha of the deployment.""")
      commit: Option[Commit],
      @GQLDescription(
        """Identifies the oid of the deployment commit, even if the commit has been deleted."""
      )
      commitOid: String,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""Identifies the actor who triggered the deployment.""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription("""The deployment description.""")
      description: Option[String],
      @GQLDescription(
        """The latest environment to which this deployment was made."""
      )
      environment: Option[String],
      id: ID,
      @GQLDescription(
        """The latest environment to which this deployment was made."""
      )
      latestEnvironment: Option[String],
      @GQLDescription("""The latest status of this deployment.""")
      latestStatus: Option[DeploymentStatus],
      @GQLDescription(
        """The original environment to which this deployment was made."""
      )
      originalEnvironment: Option[String],
      @GQLDescription(
        """Extra information that a deployment system might need."""
      )
      payload: Option[String],
      @GQLDescription(
        """Identifies the Ref of the deployment, if the deployment was created by ref."""
      )
      ref: Option[Ref],
      @GQLDescription(
        """Identifies the repository associated with the deployment."""
      )
      repository: Repository,
      @GQLDescription("""The current state of the deployment.""")
      state: Option[DeploymentState],
      @GQLDescription("""A list of statuses associated with the deployment.""")
      statuses: DeploymentStatusesArgs => Option[DeploymentStatusConnection],
      @GQLDescription("""The deployment task.""")
      task: Option[String],
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""The connection type for Deployment.""")
  case class DeploymentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[DeploymentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Deployment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class DeploymentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Deployment]
  )
  @GQLDescription("""Describes the status of a given deployment attempt.""")
  case class DeploymentStatus(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""Identifies the actor who triggered the deployment.""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the deployment associated with status.""")
      deployment: Deployment,
      @GQLDescription("""Identifies the description of the deployment.""")
      description: Option[String],
      @GQLDescription("""Identifies the environment URL of the deployment.""")
      environmentUrl: Option[URI],
      id: ID,
      @GQLDescription("""Identifies the log URL of the deployment.""")
      logUrl: Option[URI],
      @GQLDescription("""Identifies the current state of the deployment.""")
      state: DeploymentStatusState,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""The connection type for DeploymentStatus.""")
  case class DeploymentStatusConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[DeploymentStatusEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[DeploymentStatus]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class DeploymentStatusEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[DeploymentStatus]
  )
  @GQLDescription("""Autogenerated return type of DismissPullRequestReview""")
  case class DismissPullRequestReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The dismissed pull request review.""")
      pullRequestReview: Option[PullRequestReview]
  )
  @GQLDescription("""The connection type for User.""")
  case class EnterpriseAdministratorConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseAdministratorEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""A User who is an administrator of an enterprise.""")
  case class EnterpriseAdministratorEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[User],
      @GQLDescription("""The role of the administrator.""")
      role: EnterpriseAdministratorRole
  )
  @GQLDescription(
    """An invitation for a user to become an owner or billing manager of an enterprise."""
  )
  case class EnterpriseAdministratorInvitation(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """The email of the person who was invited to the enterprise."""
      )
      email: Option[String],
      @GQLDescription("""The enterprise the invitation is for.""")
      enterprise: Enterprise,
      id: ID,
      @GQLDescription("""The user who was invited to the enterprise.""")
      invitee: Option[User],
      @GQLDescription("""The user who created the invitation.""")
      inviter: Option[User],
      @GQLDescription(
        """The invitee's pending role in the enterprise (owner or billing_manager)."""
      )
      role: EnterpriseAdministratorRole
  )
  @GQLDescription(
    """The connection type for EnterpriseAdministratorInvitation."""
  )
  case class EnterpriseAdministratorInvitationConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseAdministratorInvitationEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseAdministratorInvitation]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseAdministratorInvitationEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseAdministratorInvitation]
  )
  @GQLDescription(
    """Enterprise billing information visible to enterprise billing managers and owners."""
  )
  case class EnterpriseBillingInfo(
      @GQLDescription(
        """The number of licenseable users/emails across the enterprise."""
      )
      allLicensableUsersCount: Int,
      @GQLDescription(
        """The number of data packs used by all organizations owned by the enterprise."""
      )
      assetPacks: Int,
      @GQLDescription(
        """The number of available seats across all owned organizations based on the unique number of billable users."""
      )
      availableSeats: Int,
      @GQLDescription(
        """The bandwidth quota in GB for all organizations owned by the enterprise."""
      )
      bandwidthQuota: Float,
      @GQLDescription(
        """The bandwidth usage in GB for all organizations owned by the enterprise."""
      )
      bandwidthUsage: Float,
      @GQLDescription(
        """The bandwidth usage as a percentage of the bandwidth quota."""
      )
      bandwidthUsagePercentage: Int,
      @GQLDescription(
        """The total seats across all organizations owned by the enterprise."""
      )
      seats: Int,
      @GQLDescription(
        """The storage quota in GB for all organizations owned by the enterprise."""
      )
      storageQuota: Float,
      @GQLDescription(
        """The storage usage in GB for all organizations owned by the enterprise."""
      )
      storageUsage: Float,
      @GQLDescription(
        """The storage usage as a percentage of the storage quota."""
      )
      storageUsagePercentage: Int,
      @GQLDescription(
        """The number of available licenses across all owned organizations based on the unique number of billable users."""
      )
      totalAvailableLicenses: Int,
      @GQLDescription("""The total number of licenses allocated.""")
      totalLicenses: Int
  )
  @GQLDescription(
    """An identity provider configured to provision identities for an enterprise."""
  )
  case class EnterpriseIdentityProvider(
      @GQLDescription(
        """The digest algorithm used to sign SAML requests for the identity provider."""
      )
      digestMethod: Option[SamlDigestAlgorithm],
      @GQLDescription("""The enterprise this identity provider belongs to.""")
      enterprise: Option[Enterprise],
      @GQLDescription(
        """ExternalIdentities provisioned by this identity provider."""
      )
      externalIdentities: EnterpriseIdentityProviderExternalIdentitiesArgs => ExternalIdentityConnection,
      id: ID,
      @GQLDescription(
        """The x509 certificate used by the identity provider to sign assertions and responses."""
      )
      idpCertificate: Option[X509Certificate],
      @GQLDescription(
        """The Issuer Entity ID for the SAML identity provider."""
      )
      issuer: Option[String],
      @GQLDescription(
        """Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable."""
      )
      recoveryCodes: Option[List[String]],
      @GQLDescription(
        """The signature algorithm used to sign SAML requests for the identity provider."""
      )
      signatureMethod: Option[SamlSignatureAlgorithm],
      @GQLDescription(
        """The URL endpoint for the identity provider's SAML SSO."""
      )
      ssoUrl: Option[URI]
  )
  @GQLDescription("""The connection type for EnterpriseMember.""")
  case class EnterpriseMemberConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseMemberEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseMember]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """A User who is a member of an enterprise through one or more organizations."""
  )
  case class EnterpriseMemberEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """Whether the user does not have a license for the enterprise."""
      )
      isUnlicensed: Boolean,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseMember]
  )
  @GQLDescription("""The connection type for Organization.""")
  case class EnterpriseOrganizationMembershipConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseOrganizationMembershipEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Organization]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An enterprise organization that a user is a member of.""")
  case class EnterpriseOrganizationMembershipEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Organization],
      @GQLDescription("""The role of the user in the enterprise membership.""")
      role: EnterpriseUserAccountMembershipRole
  )
  @GQLDescription("""The connection type for User.""")
  case class EnterpriseOutsideCollaboratorConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseOutsideCollaboratorEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """A User who is an outside collaborator of an enterprise through one or more organizations."""
  )
  case class EnterpriseOutsideCollaboratorEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """Whether the outside collaborator does not have a license for the enterprise."""
      )
      isUnlicensed: Boolean,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[User],
      @GQLDescription(
        """The enterprise organization repositories this user is a member of."""
      )
      repositories: EnterpriseOutsideCollaboratorEdgeRepositoriesArgs => EnterpriseRepositoryInfoConnection
  )
  @GQLDescription(
    """Enterprise information only visible to enterprise owners."""
  )
  case class EnterpriseOwnerInfo(
      @GQLDescription(
        """A list of enterprise organizations configured with the provided action execution capabilities setting value."""
      )
      actionExecutionCapabilitySettingOrganizations: EnterpriseOwnerInfoActionExecutionCapabilitySettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """A list of all of the administrators for this enterprise."""
      )
      admins: EnterpriseOwnerInfoAdminsArgs => EnterpriseAdministratorConnection,
      @GQLDescription(
        """A list of users in the enterprise who currently have two-factor authentication disabled."""
      )
      affiliatedUsersWithTwoFactorDisabled: EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs => UserConnection,
      @GQLDescription(
        """Whether or not affiliated users with two-factor authentication disabled exist in the enterprise."""
      )
      affiliatedUsersWithTwoFactorDisabledExist: Boolean,
      @GQLDescription(
        """The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise."""
      )
      allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided private repository forking setting value."""
      )
      allowPrivateRepositoryForkingSettingOrganizations: EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for base repository permissions for organizations in this enterprise."""
      )
      defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided default repository permission."""
      )
      defaultRepositoryPermissionSettingOrganizations: EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """Enterprise Server installations owned by the enterprise."""
      )
      enterpriseServerInstallations: EnterpriseOwnerInfoEnterpriseServerInstallationsArgs => EnterpriseServerInstallationConnection,
      @GQLDescription(
        """The setting value for whether the enterprise has an IP allow list enabled."""
      )
      ipAllowListEnabledSetting: IpAllowListEnabledSettingValue,
      @GQLDescription(
        """The IP addresses that are allowed to access resources owned by the enterprise."""
      )
      ipAllowListEntries: EnterpriseOwnerInfoIpAllowListEntriesArgs => IpAllowListEntryConnection,
      @GQLDescription(
        """Whether or not the default repository permission is currently being updated."""
      )
      isUpdatingDefaultRepositoryPermission: Boolean,
      @GQLDescription(
        """Whether the two-factor authentication requirement is currently being enforced."""
      )
      isUpdatingTwoFactorRequirement: Boolean,
      @GQLDescription(
        """The setting value for whether organization members with admin permissions on a
repository can change repository visibility."""
      )
      membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided can change repository visibility setting value."""
      )
      membersCanChangeRepositoryVisibilitySettingOrganizations: EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether members of organizations in the enterprise can create internal repositories."""
      )
      membersCanCreateInternalRepositoriesSetting: Option[Boolean],
      @GQLDescription(
        """The setting value for whether members of organizations in the enterprise can create private repositories."""
      )
      membersCanCreatePrivateRepositoriesSetting: Option[Boolean],
      @GQLDescription(
        """The setting value for whether members of organizations in the enterprise can create public repositories."""
      )
      membersCanCreatePublicRepositoriesSetting: Option[Boolean],
      @GQLDescription(
        """The setting value for whether members of organizations in the enterprise can create repositories."""
      )
      membersCanCreateRepositoriesSetting: Option[
        EnterpriseMembersCanCreateRepositoriesSettingValue
      ],
      @GQLDescription(
        """A list of enterprise organizations configured with the provided repository creation setting value."""
      )
      membersCanCreateRepositoriesSettingOrganizations: EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether members with admin permissions for repositories can delete issues."""
      )
      membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided members can delete issues setting value."""
      )
      membersCanDeleteIssuesSettingOrganizations: EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether members with admin permissions for repositories can delete or transfer repositories."""
      )
      membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided members can delete repositories setting value."""
      )
      membersCanDeleteRepositoriesSettingOrganizations: EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether members of organizations in the enterprise can invite outside collaborators."""
      )
      membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided members can invite collaborators setting value."""
      )
      membersCanInviteCollaboratorsSettingOrganizations: EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """Indicates whether members of this enterprise's organizations can purchase additional services for those organizations."""
      )
      membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue,
      @GQLDescription(
        """The setting value for whether members with admin permissions for repositories can update protected branches."""
      )
      membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided members can update protected branches setting value."""
      )
      membersCanUpdateProtectedBranchesSettingOrganizations: EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether members can view dependency insights."""
      )
      membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided members can view dependency insights setting value."""
      )
      membersCanViewDependencyInsightsSettingOrganizations: EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether organization projects are enabled for organizations in this enterprise."""
      )
      organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided organization projects setting value."""
      )
      organizationProjectsSettingOrganizations: EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """A list of outside collaborators across the repositories in the enterprise."""
      )
      outsideCollaborators: EnterpriseOwnerInfoOutsideCollaboratorsArgs => EnterpriseOutsideCollaboratorConnection,
      @GQLDescription(
        """A list of pending administrator invitations for the enterprise."""
      )
      pendingAdminInvitations: EnterpriseOwnerInfoPendingAdminInvitationsArgs => EnterpriseAdministratorInvitationConnection,
      @GQLDescription(
        """A list of pending collaborators across the repositories in the enterprise."""
      )
      pendingCollaborators: EnterpriseOwnerInfoPendingCollaboratorsArgs => EnterprisePendingCollaboratorConnection,
      @GQLDescription(
        """A list of pending member invitations for organizations in the enterprise."""
      )
      pendingMemberInvitations: EnterpriseOwnerInfoPendingMemberInvitationsArgs => EnterprisePendingMemberInvitationConnection,
      @GQLDescription(
        """The setting value for whether repository projects are enabled in this enterprise."""
      )
      repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided repository projects setting value."""
      )
      repositoryProjectsSettingOrganizations: EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription("""The SAML Identity Provider for the enterprise.""")
      samlIdentityProvider: Option[EnterpriseIdentityProvider],
      @GQLDescription(
        """A list of enterprise organizations configured with the SAML single sign-on setting value."""
      )
      samlIdentityProviderSettingOrganizations: EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether team discussions are enabled for organizations in this enterprise."""
      )
      teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the provided team discussions setting value."""
      )
      teamDiscussionsSettingOrganizations: EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs => OrganizationConnection,
      @GQLDescription(
        """The setting value for whether the enterprise requires two-factor authentication for its organizations and users."""
      )
      twoFactorRequiredSetting: EnterpriseEnabledSettingValue,
      @GQLDescription(
        """A list of enterprise organizations configured with the two-factor authentication setting value."""
      )
      twoFactorRequiredSettingOrganizations: EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs => OrganizationConnection
  )
  @GQLDescription("""The connection type for User.""")
  case class EnterprisePendingCollaboratorConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterprisePendingCollaboratorEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise."""
  )
  case class EnterprisePendingCollaboratorEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """Whether the invited collaborator does not have a license for the enterprise."""
      )
      isUnlicensed: Boolean,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[User],
      @GQLDescription(
        """The enterprise organization repositories this user is a member of."""
      )
      repositories: EnterprisePendingCollaboratorEdgeRepositoriesArgs => EnterpriseRepositoryInfoConnection
  )
  @GQLDescription("""The connection type for OrganizationInvitation.""")
  case class EnterprisePendingMemberInvitationConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterprisePendingMemberInvitationEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[OrganizationInvitation]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """Identifies the total count of unique users in the connection."""
      )
      totalUniqueUserCount: Int
  )
  @GQLDescription(
    """An invitation to be a member in an enterprise organization."""
  )
  case class EnterprisePendingMemberInvitationEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """Whether the invitation has a license for the enterprise."""
      )
      isUnlicensed: Boolean,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[OrganizationInvitation]
  )
  @GQLDescription(
    """A subset of repository information queryable from an enterprise."""
  )
  case class EnterpriseRepositoryInfo(
      id: ID,
      @GQLDescription("""Identifies if the repository is private.""")
      isPrivate: Boolean,
      @GQLDescription("""The repository's name.""")
      name: String,
      @GQLDescription("""The repository's name with owner.""")
      nameWithOwner: String
  )
  @GQLDescription("""The connection type for EnterpriseRepositoryInfo.""")
  case class EnterpriseRepositoryInfoConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseRepositoryInfoEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseRepositoryInfo]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseRepositoryInfoEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseRepositoryInfo]
  )
  @GQLDescription("""An Enterprise Server installation.""")
  case class EnterpriseServerInstallation(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """The customer name to which the Enterprise Server installation belongs."""
      )
      customerName: String,
      @GQLDescription(
        """The host name of the Enterprise Server installation."""
      )
      hostName: String,
      id: ID,
      @GQLDescription(
        """Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect."""
      )
      isConnected: Boolean,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription(
        """User accounts on this Enterprise Server installation."""
      )
      userAccounts: EnterpriseServerInstallationUserAccountsArgs => EnterpriseServerUserAccountConnection,
      @GQLDescription(
        """User accounts uploads for the Enterprise Server installation."""
      )
      userAccountsUploads: EnterpriseServerInstallationUserAccountsUploadsArgs => EnterpriseServerUserAccountsUploadConnection
  )
  @GQLDescription("""The connection type for EnterpriseServerInstallation.""")
  case class EnterpriseServerInstallationConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseServerInstallationEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseServerInstallation]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseServerInstallationEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseServerInstallation]
  )
  @GQLDescription("""A user account on an Enterprise Server installation.""")
  case class EnterpriseServerUserAccount(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""User emails belonging to this user account.""")
      emails: EnterpriseServerUserAccountEmailsArgs => EnterpriseServerUserAccountEmailConnection,
      @GQLDescription(
        """The Enterprise Server installation on which this user account exists."""
      )
      enterpriseServerInstallation: EnterpriseServerInstallation,
      id: ID,
      @GQLDescription(
        """Whether the user account is a site administrator on the Enterprise Server installation."""
      )
      isSiteAdmin: Boolean,
      @GQLDescription(
        """The login of the user account on the Enterprise Server installation."""
      )
      login: String,
      @GQLDescription(
        """The profile name of the user account on the Enterprise Server installation."""
      )
      profileName: Option[String],
      @GQLDescription(
        """The date and time when the user account was created on the Enterprise Server installation."""
      )
      remoteCreatedAt: DateTime,
      @GQLDescription(
        """The ID of the user account on the Enterprise Server installation."""
      )
      remoteUserId: Int,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""The connection type for EnterpriseServerUserAccount.""")
  case class EnterpriseServerUserAccountConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseServerUserAccountEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseServerUserAccount]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseServerUserAccountEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseServerUserAccount]
  )
  @GQLDescription(
    """An email belonging to a user account on an Enterprise Server installation."""
  )
  case class EnterpriseServerUserAccountEmail(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The email address.""")
      email: String,
      id: ID,
      @GQLDescription(
        """Indicates whether this is the primary email of the associated user account."""
      )
      isPrimary: Boolean,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The user account to which the email belongs.""")
      userAccount: EnterpriseServerUserAccount
  )
  @GQLDescription(
    """The connection type for EnterpriseServerUserAccountEmail."""
  )
  case class EnterpriseServerUserAccountEmailConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseServerUserAccountEmailEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseServerUserAccountEmail]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseServerUserAccountEmailEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseServerUserAccountEmail]
  )
  @GQLDescription(
    """A user accounts upload from an Enterprise Server installation."""
  )
  case class EnterpriseServerUserAccountsUpload(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The enterprise to which this upload belongs.""")
      enterprise: Enterprise,
      @GQLDescription(
        """The Enterprise Server installation for which this upload was generated."""
      )
      enterpriseServerInstallation: EnterpriseServerInstallation,
      id: ID,
      @GQLDescription("""The name of the file uploaded.""")
      name: String,
      @GQLDescription("""The synchronization state of the upload""")
      syncState: EnterpriseServerUserAccountsUploadSyncState,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription(
    """The connection type for EnterpriseServerUserAccountsUpload."""
  )
  case class EnterpriseServerUserAccountsUploadConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseServerUserAccountsUploadEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseServerUserAccountsUpload]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseServerUserAccountsUploadEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseServerUserAccountsUpload]
  )
  @GQLDescription("""The connection type for EnterpriseUserAccount.""")
  case class EnterpriseUserAccountConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[EnterpriseUserAccountEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[EnterpriseUserAccount]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class EnterpriseUserAccountEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[EnterpriseUserAccount]
  )
  @GQLDescription("""An external identity provisioned by SAML SSO or SCIM.""")
  case class ExternalIdentity(
      @GQLDescription("""The GUID for this identity""")
      guid: String,
      id: ID,
      @GQLDescription(
        """Organization invitation for this SCIM-provisioned external identity"""
      )
      organizationInvitation: Option[OrganizationInvitation],
      @GQLDescription("""SAML Identity attributes""")
      samlIdentity: Option[ExternalIdentitySamlAttributes],
      @GQLDescription("""SCIM Identity attributes""")
      scimIdentity: Option[ExternalIdentityScimAttributes],
      @GQLDescription(
        """User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member."""
      )
      user: Option[User]
  )
  @GQLDescription("""The connection type for ExternalIdentity.""")
  case class ExternalIdentityConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ExternalIdentityEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ExternalIdentity]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ExternalIdentityEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ExternalIdentity]
  )
  @GQLDescription("""SAML attributes for the External Identity""")
  case class ExternalIdentitySamlAttributes(
      @GQLDescription("""The NameID of the SAML identity""")
      nameId: Option[String]
  )
  @GQLDescription("""SCIM attributes for the External Identity""")
  case class ExternalIdentityScimAttributes(
      @GQLDescription("""The userName of the SCIM identity""")
      username: Option[String]
  )
  @GQLDescription("""Autogenerated return type of FollowUser""")
  case class FollowUserPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The user that was followed.""")
      user: Option[User]
  )
  @GQLDescription("""The connection type for User.""")
  case class FollowerConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[UserEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""The connection type for User.""")
  case class FollowingConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[UserEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""A funding platform link for a repository.""")
  case class FundingLink(
      @GQLDescription("""The funding platform this link is for.""")
      platform: FundingPlatform,
      @GQLDescription("""The configured URL for this funding link.""")
      url: URI
  )
  @GQLDescription("""A generic hovercard context with a message and icon""")
  case class GenericHovercardContext(
      @GQLDescription("""A string describing this context""")
      message: String,
      @GQLDescription("""An octicon to accompany this context""")
      octicon: String
  )
  @GQLDescription("""Represents a comment on an Gist.""")
  case class GistComment(
      @GQLDescription("""The actor who authored the comment.""")
      author: Option[Actor],
      @GQLDescription("""Author's association with the gist.""")
      authorAssociation: CommentAuthorAssociation,
      @GQLDescription("""Identifies the comment body.""")
      body: String,
      @GQLDescription("""The body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription("""The body rendered to text.""")
      bodyText: String,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """Check if this comment was created via an email reply."""
      )
      createdViaEmail: Boolean,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription("""The actor who edited the comment.""")
      editor: Option[Actor],
      @GQLDescription("""The associated gist.""")
      gist: Gist,
      id: ID,
      @GQLDescription(
        """Check if this comment was edited and includes an edit with the creation data"""
      )
      includesCreatedEdit: Boolean,
      @GQLDescription(
        """Returns whether or not a comment has been minimized."""
      )
      isMinimized: Boolean,
      @GQLDescription("""The moment the editor made the last edit""")
      lastEditedAt: Option[DateTime],
      @GQLDescription("""Returns why the comment was minimized.""")
      minimizedReason: Option[String],
      @GQLDescription("""Identifies when the comment was published at.""")
      publishedAt: Option[DateTime],
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""A list of edits to this content.""")
      userContentEdits: GistCommentUserContentEditsArgs => Option[
        UserContentEditConnection
      ],
      @GQLDescription("""Check if the current viewer can delete this object.""")
      viewerCanDelete: Boolean,
      @GQLDescription(
        """Check if the current viewer can minimize this object."""
      )
      viewerCanMinimize: Boolean,
      @GQLDescription("""Check if the current viewer can update this object.""")
      viewerCanUpdate: Boolean,
      @GQLDescription(
        """Reasons why the current viewer can not update this comment."""
      )
      viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
      @GQLDescription("""Did the viewer author this comment.""")
      viewerDidAuthor: Boolean
  )
  @GQLDescription("""The connection type for GistComment.""")
  case class GistCommentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[GistCommentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[GistComment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class GistCommentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[GistComment]
  )
  @GQLDescription("""The connection type for Gist.""")
  case class GistConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[GistEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Gist]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class GistEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Gist]
  )
  @GQLDescription("""A file in a gist.""")
  case class GistFile(
      @GQLDescription(
        """The file name encoded to remove characters that are invalid in URL paths."""
      )
      encodedName: Option[String],
      @GQLDescription("""The gist file encoding.""")
      encoding: Option[String],
      @GQLDescription("""The file extension from the file name.""")
      extension: Option[String],
      @GQLDescription("""Indicates if this file is an image.""")
      isImage: Boolean,
      @GQLDescription("""Whether the file's contents were truncated.""")
      isTruncated: Boolean,
      @GQLDescription("""The programming language this file is written in.""")
      language: Option[Language],
      @GQLDescription("""The gist file name.""")
      name: Option[String],
      @GQLDescription("""The gist file size in bytes.""")
      size: Option[Int],
      @GQLDescription("""UTF8 text data or null if the file is binary""")
      text: GistFileTextArgs => Option[String]
  )
  @GQLDescription(
    """Represents an actor in a Git commit (ie. an author or committer)."""
  )
  case class GitActor(
      @GQLDescription("""A URL pointing to the author's public avatar.""")
      avatarUrl: GitActorAvatarUrlArgs => URI,
      @GQLDescription(
        """The timestamp of the Git action (authoring or committing)."""
      )
      date: Option[GitTimestamp],
      @GQLDescription("""The email in the Git commit.""")
      email: Option[String],
      @GQLDescription("""The name in the Git commit.""")
      name: Option[String],
      @GQLDescription(
        """The GitHub user corresponding to the email field. Null if no such user exists."""
      )
      user: Option[User]
  )
  @GQLDescription("""Represents information about the GitHub instance.""")
  case class GitHubMetadata(
      @GQLDescription("""Returns a String that's a SHA of `github-services`""")
      gitHubServicesSha: GitObjectID,
      @GQLDescription(
        """IP addresses that users connect to for git operations"""
      )
      gitIpAddresses: Option[List[String]],
      @GQLDescription("""IP addresses that service hooks are sent from""")
      hookIpAddresses: Option[List[String]],
      @GQLDescription("""IP addresses that the importer connects from""")
      importerIpAddresses: Option[List[String]],
      @GQLDescription("""Whether or not users are verified""")
      isPasswordAuthenticationVerifiable: Boolean,
      @GQLDescription("""IP addresses for GitHub Pages' A records""")
      pagesIpAddresses: Option[List[String]]
  )
  @GQLDescription("""Represents a GPG signature on a Commit or Tag.""")
  case class GpgSignature(
      @GQLDescription("""Email used to sign this object.""")
      email: String,
      @GQLDescription(
        """True if the signature is valid and verified by GitHub."""
      )
      isValid: Boolean,
      @GQLDescription("""Hex-encoded ID of the key that signed this object.""")
      keyId: Option[String],
      @GQLDescription(
        """Payload for GPG signing object. Raw ODB object without the signature header."""
      )
      payload: String,
      @GQLDescription("""ASCII-armored signature header from object.""")
      signature: String,
      @GQLDescription(
        """GitHub user corresponding to the email signing this commit."""
      )
      signer: Option[User],
      @GQLDescription(
        """The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid."""
      )
      state: GitSignatureState,
      @GQLDescription(
        """True if the signature was made with GitHub's signing key."""
      )
      wasSignedByGitHub: Boolean
  )
  @GQLDescription("""Detail needed to display a hovercard for a user""")
  case class Hovercard(
      @GQLDescription("""Each of the contexts for this hovercard""")
      contexts: List[HovercardContext]
  )
  @GQLDescription("""Autogenerated return type of InviteEnterpriseAdmin""")
  case class InviteEnterpriseAdminPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The created enterprise administrator invitation.""")
      invitation: Option[EnterpriseAdministratorInvitation]
  )
  @GQLDescription(
    """An IP address or range of addresses that is allowed to access an owner's resources."""
  )
  case class IpAllowListEntry(
      @GQLDescription(
        """A single IP address or range of IP addresses in CIDR notation."""
      )
      allowListValue: String,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      id: ID,
      @GQLDescription("""Whether the entry is currently active.""")
      isActive: Boolean,
      @GQLDescription("""The name of the IP allow list entry.""")
      name: Option[String],
      @GQLDescription("""The owner of the IP allow list entry.""")
      owner: IpAllowListOwner,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""The connection type for IpAllowListEntry.""")
  case class IpAllowListEntryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[IpAllowListEntryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[IpAllowListEntry]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class IpAllowListEntryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[IpAllowListEntry]
  )
  @GQLDescription("""The connection type for IssueComment.""")
  case class IssueCommentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[IssueCommentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[IssueComment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class IssueCommentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[IssueComment]
  )
  @GQLDescription("""The connection type for Issue.""")
  case class IssueConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[IssueEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Issue]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """This aggregates issues opened by a user within one repository."""
  )
  case class IssueContributionsByRepository(
      @GQLDescription("""The issue contributions.""")
      contributions: IssueContributionsByRepositoryContributionsArgs => CreatedIssueContributionConnection,
      @GQLDescription("""The repository in which the issues were opened.""")
      repository: Repository
  )
  @GQLDescription("""An edge in a connection.""")
  case class IssueEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Issue]
  )
  @GQLDescription("""The connection type for IssueTimelineItem.""")
  case class IssueTimelineConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[IssueTimelineItemEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[IssueTimelineItem]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class IssueTimelineItemEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[IssueTimelineItem]
  )
  @GQLDescription("""The connection type for IssueTimelineItems.""")
  case class IssueTimelineItemsConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[IssueTimelineItemsEdge]]],
      @GQLDescription(
        """Identifies the count of items after applying `before` and `after` filters."""
      )
      filteredCount: Int,
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[IssueTimelineItems]]],
      @GQLDescription(
        """Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing."""
      )
      pageCount: Int,
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """Identifies the date and time when the timeline was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""An edge in a connection.""")
  case class IssueTimelineItemsEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[IssueTimelineItems]
  )
  @GQLDescription("""Represents a user signing up for a GitHub account.""")
  case class JoinedGitHubContribution(
      @GQLDescription(
        """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
      )
      isRestricted: Boolean,
      @GQLDescription("""When this contribution was made.""")
      occurredAt: DateTime,
      @GQLDescription("""The HTTP path for this contribution.""")
      resourcePath: URI,
      @GQLDescription("""The HTTP URL for this contribution.""")
      url: URI,
      @GQLDescription("""The user who made this contribution.""")
      user: User
  )
  @GQLDescription(
    """A label for categorizing Issues or Milestones with a given Repository."""
  )
  case class Label(
      @GQLDescription("""Identifies the label color.""")
      color: String,
      @GQLDescription(
        """Identifies the date and time when the label was created."""
      )
      createdAt: Option[DateTime],
      @GQLDescription("""A brief description of this label.""")
      description: Option[String],
      id: ID,
      @GQLDescription("""Indicates whether or not this is a default label.""")
      isDefault: Boolean,
      @GQLDescription("""A list of issues associated with this label.""")
      issues: LabelIssuesArgs => IssueConnection,
      @GQLDescription("""Identifies the label name.""")
      name: String,
      @GQLDescription("""A list of pull requests associated with this label.""")
      pullRequests: LabelPullRequestsArgs => PullRequestConnection,
      @GQLDescription("""The repository associated with this label.""")
      repository: Repository,
      @GQLDescription("""The HTTP path for this label.""")
      resourcePath: URI,
      @GQLDescription(
        """Identifies the date and time when the label was last updated."""
      )
      updatedAt: Option[DateTime],
      @GQLDescription("""The HTTP URL for this label.""")
      url: URI
  )
  @GQLDescription("""The connection type for Label.""")
  case class LabelConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[LabelEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Label]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class LabelEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Label]
  )
  @GQLDescription("""Represents a given language found in repositories.""")
  case class Language(
      @GQLDescription("""The color defined for the current language.""")
      color: Option[String],
      id: ID,
      @GQLDescription("""The name of the current language.""")
      name: String
  )
  @GQLDescription("""A list of languages associated with the parent.""")
  case class LanguageConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[LanguageEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Language]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """The total size in bytes of files written in that language."""
      )
      totalSize: Int
  )
  @GQLDescription("""Represents the language of a repository.""")
  case class LanguageEdge(
      cursor: String,
      node: Language,
      @GQLDescription(
        """The number of bytes of code written in the language."""
      )
      size: Int
  )
  @GQLDescription("""A repository's open source license""")
  case class License(
      @GQLDescription("""The full text of the license""")
      body: String,
      @GQLDescription("""The conditions set by the license""")
      conditions: List[Option[LicenseRule]],
      @GQLDescription("""A human-readable description of the license""")
      description: Option[String],
      @GQLDescription("""Whether the license should be featured""")
      featured: Boolean,
      @GQLDescription(
        """Whether the license should be displayed in license pickers"""
      )
      hidden: Boolean,
      id: ID,
      @GQLDescription("""Instructions on how to implement the license""")
      implementation: Option[String],
      @GQLDescription("""The lowercased SPDX ID of the license""")
      key: String,
      @GQLDescription("""The limitations set by the license""")
      limitations: List[Option[LicenseRule]],
      @GQLDescription(
        """The license full name specified by <https://spdx.org/licenses>"""
      )
      name: String,
      @GQLDescription("""Customary short name if applicable (e.g, GPLv3)""")
      nickname: Option[String],
      @GQLDescription("""The permissions set by the license""")
      permissions: List[Option[LicenseRule]],
      @GQLDescription(
        """Whether the license is a pseudo-license placeholder (e.g., other, no-license)"""
      )
      pseudoLicense: Boolean,
      @GQLDescription(
        """Short identifier specified by <https://spdx.org/licenses>"""
      )
      spdxId: Option[String],
      @GQLDescription("""URL to the license on <https://choosealicense.com>""")
      url: Option[URI]
  )
  @GQLDescription(
    """Describes a License's conditions, permissions, and limitations"""
  )
  case class LicenseRule(
      @GQLDescription("""A description of the rule""")
      description: String,
      @GQLDescription("""The machine-readable rule key""")
      key: String,
      @GQLDescription("""The human-readable rule label""")
      label: String
  )
  @GQLDescription("""Autogenerated return type of LinkRepositoryToProject""")
  case class LinkRepositoryToProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The linked Project.""")
      project: Option[Project],
      @GQLDescription("""The linked Repository.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of LockLockable""")
  case class LockLockablePayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The item that was locked.""")
      lockedRecord: Option[Lockable]
  )
  @GQLDescription(
    """Autogenerated return type of MarkPullRequestReadyForReview"""
  )
  case class MarkPullRequestReadyForReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The pull request that is ready for review.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription("""A public description of a Marketplace category.""")
  case class MarketplaceCategory(
      @GQLDescription("""The category's description.""")
      description: Option[String],
      @GQLDescription(
        """The technical description of how apps listed in this category work with GitHub."""
      )
      howItWorks: Option[String],
      id: ID,
      @GQLDescription("""The category's name.""")
      name: String,
      @GQLDescription(
        """How many Marketplace listings have this as their primary category."""
      )
      primaryListingCount: Int,
      @GQLDescription("""The HTTP path for this Marketplace category.""")
      resourcePath: URI,
      @GQLDescription(
        """How many Marketplace listings have this as their secondary category."""
      )
      secondaryListingCount: Int,
      @GQLDescription("""The short name of the category used in its URL.""")
      slug: String,
      @GQLDescription("""The HTTP URL for this Marketplace category.""")
      url: URI
  )
  @GQLDescription("""Look up Marketplace Listings""")
  case class MarketplaceListingConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[MarketplaceListingEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[MarketplaceListing]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class MarketplaceListingEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[MarketplaceListing]
  )
  @GQLDescription("""Autogenerated return type of MergeBranch""")
  case class MergeBranchPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The resulting merge Commit.""")
      mergeCommit: Option[Commit]
  )
  @GQLDescription("""Autogenerated return type of MergePullRequest""")
  case class MergePullRequestPayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The pull request that was merged.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription("""Represents a Milestone object on a given repository.""")
  case class Milestone(
      @GQLDescription(
        """`true` if the object is closed (definition of closed may depend on type)"""
      )
      closed: Boolean,
      @GQLDescription(
        """Identifies the date and time when the object was closed."""
      )
      closedAt: Option[DateTime],
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""Identifies the actor who created the milestone.""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the description of the milestone.""")
      description: Option[String],
      @GQLDescription("""Identifies the due date of the milestone.""")
      dueOn: Option[DateTime],
      id: ID,
      @GQLDescription("""Just for debugging on review-lab""")
      issuePrioritiesDebug: String,
      @GQLDescription("""A list of issues associated with the milestone.""")
      issues: MilestoneIssuesArgs => IssueConnection,
      @GQLDescription("""Identifies the number of the milestone.""")
      number: Int,
      @GQLDescription(
        """A list of pull requests associated with the milestone."""
      )
      pullRequests: MilestonePullRequestsArgs => PullRequestConnection,
      @GQLDescription("""The repository associated with this milestone.""")
      repository: Repository,
      @GQLDescription("""The HTTP path for this milestone""")
      resourcePath: URI,
      @GQLDescription("""Identifies the state of the milestone.""")
      state: MilestoneState,
      @GQLDescription("""Identifies the title of the milestone.""")
      title: String,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this milestone""")
      url: URI
  )
  @GQLDescription("""The connection type for Milestone.""")
  case class MilestoneConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[MilestoneEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Milestone]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class MilestoneEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Milestone]
  )
  @GQLDescription("""Autogenerated return type of MoveProjectCard""")
  case class MoveProjectCardPayload(
      @GQLDescription("""The new edge of the moved card.""")
      cardEdge: Option[ProjectCardEdge],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of MoveProjectColumn""")
  case class MoveProjectColumnPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new edge of the moved column.""")
      columnEdge: Option[ProjectColumnEdge]
  )
  @GQLDescription("""The connection type for OrganizationAuditEntry.""")
  case class OrganizationAuditEntryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[OrganizationAuditEntryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[OrganizationAuditEntry]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class OrganizationAuditEntryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[OrganizationAuditEntry]
  )
  @GQLDescription("""The connection type for Organization.""")
  case class OrganizationConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[OrganizationEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Organization]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class OrganizationEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Organization]
  )
  @GQLDescription(
    """An Identity Provider configured to provision SAML and SCIM identities for Organizations"""
  )
  case class OrganizationIdentityProvider(
      @GQLDescription(
        """The digest algorithm used to sign SAML requests for the Identity Provider."""
      )
      digestMethod: Option[URI],
      @GQLDescription(
        """External Identities provisioned by this Identity Provider"""
      )
      externalIdentities: OrganizationIdentityProviderExternalIdentitiesArgs => ExternalIdentityConnection,
      id: ID,
      @GQLDescription(
        """The x509 certificate used by the Identity Provder to sign assertions and responses."""
      )
      idpCertificate: Option[X509Certificate],
      @GQLDescription("""The Issuer Entity ID for the SAML Identity Provider""")
      issuer: Option[String],
      @GQLDescription("""Organization this Identity Provider belongs to""")
      organization: Option[Organization],
      @GQLDescription(
        """The signature algorithm used to sign SAML requests for the Identity Provider."""
      )
      signatureMethod: Option[URI],
      @GQLDescription(
        """The URL endpoint for the Identity Provider's SAML SSO."""
      )
      ssoUrl: Option[URI]
  )
  @GQLDescription("""An Invitation for a user to an organization.""")
  case class OrganizationInvitation(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """The email address of the user invited to the organization."""
      )
      email: Option[String],
      id: ID,
      @GQLDescription(
        """The type of invitation that was sent (e.g. email, user)."""
      )
      invitationType: OrganizationInvitationType,
      @GQLDescription("""The user who was invited to the organization.""")
      invitee: Option[User],
      @GQLDescription("""The user who created the invitation.""")
      inviter: User,
      @GQLDescription("""The organization the invite is for""")
      organization: Organization,
      @GQLDescription(
        """The user's pending role in the organization (e.g. member, owner)."""
      )
      role: OrganizationInvitationRole
  )
  @GQLDescription("""The connection type for OrganizationInvitation.""")
  case class OrganizationInvitationConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[OrganizationInvitationEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[OrganizationInvitation]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class OrganizationInvitationEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[OrganizationInvitation]
  )
  @GQLDescription("""The connection type for User.""")
  case class OrganizationMemberConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[OrganizationMemberEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a user within an organization.""")
  case class OrganizationMemberEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer."""
      )
      hasTwoFactorEnabled: Option[Boolean],
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[User],
      @GQLDescription("""The role this user has in the organization.""")
      role: Option[OrganizationMemberRole]
  )
  @GQLDescription("""An organization teams hovercard context""")
  case class OrganizationTeamsHovercardContext(
      @GQLDescription("""A string describing this context""")
      message: String,
      @GQLDescription("""An octicon to accompany this context""")
      octicon: String,
      @GQLDescription(
        """Teams in this organization the user is a member of that are relevant"""
      )
      relevantTeams: OrganizationTeamsHovercardContextRelevantTeamsArgs => TeamConnection,
      @GQLDescription("""The path for the full team list for this user""")
      teamsResourcePath: URI,
      @GQLDescription("""The URL for the full team list for this user""")
      teamsUrl: URI,
      @GQLDescription(
        """The total number of teams the user is on in the organization"""
      )
      totalTeamCount: Int
  )
  @GQLDescription("""An organization list hovercard context""")
  case class OrganizationsHovercardContext(
      @GQLDescription("""A string describing this context""")
      message: String,
      @GQLDescription("""An octicon to accompany this context""")
      octicon: String,
      @GQLDescription(
        """Organizations this user is a member of that are relevant"""
      )
      relevantOrganizations: OrganizationsHovercardContextRelevantOrganizationsArgs => OrganizationConnection,
      @GQLDescription("""The total number of organizations this user is in""")
      totalOrganizationCount: Int
  )
  @GQLDescription("""Information about pagination in a connection.""")
  case class PageInfo(
      @GQLDescription("""When paginating forwards, the cursor to continue.""")
      endCursor: Option[String],
      @GQLDescription("""When paginating forwards, are there more items?""")
      hasNextPage: Boolean,
      @GQLDescription("""When paginating backwards, are there more items?""")
      hasPreviousPage: Boolean,
      @GQLDescription("""When paginating backwards, the cursor to continue.""")
      startCursor: Option[String]
  )
  @GQLDescription(
    """A level of permission and source for a user's access to a repository."""
  )
  case class PermissionSource(
      @GQLDescription("""The organization the repository belongs to.""")
      organization: Organization,
      @GQLDescription(
        """The level of access this source has granted to the user."""
      )
      permission: DefaultRepositoryPermissionField,
      @GQLDescription("""The source of this permission.""")
      source: PermissionGranter
  )
  @GQLDescription("""The connection type for PinnableItem.""")
  case class PinnableItemConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PinnableItemEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PinnableItem]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PinnableItemEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PinnableItem]
  )
  @GQLDescription(
    """A curatable list of repositories relating to a repository owner, which defaults
to showing the most popular repositories they own."""
  )
  case class ProfileItemShowcase(
      @GQLDescription(
        """Whether or not the owner has pinned any repositories or gists."""
      )
      hasPinnedItems: Boolean,
      @GQLDescription(
        """The repositories and gists in the showcase. If the profile owner has any
pinned items, those will be returned. Otherwise, the profile owner's popular
repositories will be returned."""
      )
      items: ProfileItemShowcaseItemsArgs => PinnableItemConnection
  )
  @GQLDescription(
    """Projects manage issues, pull requests and notes within a project owner."""
  )
  case class Project(
      @GQLDescription("""The project's description body.""")
      body: Option[String],
      @GQLDescription("""The projects description body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription(
        """`true` if the object is closed (definition of closed may depend on type)"""
      )
      closed: Boolean,
      @GQLDescription(
        """Identifies the date and time when the object was closed."""
      )
      closedAt: Option[DateTime],
      @GQLDescription("""List of columns in the project""")
      columns: ProjectColumnsArgs => ProjectColumnConnection,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The actor who originally created the project.""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription("""The project's name.""")
      name: String,
      @GQLDescription("""The project's number.""")
      number: Int,
      @GQLDescription(
        """The project's owner. Currently limited to repositories, organizations, and users."""
      )
      owner: ProjectOwner,
      @GQLDescription("""List of pending cards in this project""")
      pendingCards: ProjectPendingCardsArgs => ProjectCardConnection,
      @GQLDescription("""The HTTP path for this project""")
      resourcePath: URI,
      @GQLDescription("""Whether the project is open or closed.""")
      state: ProjectState,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this project""")
      url: URI,
      @GQLDescription("""Check if the current viewer can update this object.""")
      viewerCanUpdate: Boolean
  )
  @GQLDescription("""A card in a project.""")
  case class ProjectCard(
      @GQLDescription(
        """The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future."""
      )
      column: Option[ProjectColumn],
      @GQLDescription("""The card content item""")
      content: Option[ProjectCardItem],
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The actor who created this card""")
      creator: Option[Actor],
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription("""Whether the card is archived""")
      isArchived: Boolean,
      @GQLDescription("""The card note""")
      note: Option[String],
      @GQLDescription("""The project that contains this card.""")
      project: Project,
      @GQLDescription("""The HTTP path for this card""")
      resourcePath: URI,
      @GQLDescription("""The state of ProjectCard""")
      state: Option[ProjectCardState],
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this card""")
      url: URI
  )
  @GQLDescription("""The connection type for ProjectCard.""")
  case class ProjectCardConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ProjectCardEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ProjectCard]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ProjectCardEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ProjectCard]
  )
  @GQLDescription("""A column inside a project.""")
  case class ProjectColumn(
      @GQLDescription("""List of cards in the column""")
      cards: ProjectColumnCardsArgs => ProjectCardConnection,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription("""The project column's name.""")
      name: String,
      @GQLDescription("""The project that contains this column.""")
      project: Project,
      @GQLDescription("""The semantic purpose of the column""")
      purpose: Option[ProjectColumnPurpose],
      @GQLDescription("""The HTTP path for this project column""")
      resourcePath: URI,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this project column""")
      url: URI
  )
  @GQLDescription("""The connection type for ProjectColumn.""")
  case class ProjectColumnConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ProjectColumnEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ProjectColumn]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ProjectColumnEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ProjectColumn]
  )
  @GQLDescription("""A list of projects associated with the owner.""")
  case class ProjectConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ProjectEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Project]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ProjectEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Project]
  )
  @GQLDescription("""A user's public key.""")
  case class PublicKey(
      @GQLDescription(
        """The last time this authorization was used to perform an action. Values will be null for keys not owned by the user."""
      )
      accessedAt: Option[DateTime],
      @GQLDescription(
        """Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user."""
      )
      createdAt: Option[DateTime],
      @GQLDescription("""The fingerprint for this PublicKey.""")
      fingerprint: String,
      id: ID,
      @GQLDescription(
        """Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user."""
      )
      isReadOnly: Option[Boolean],
      @GQLDescription("""The public key string.""")
      key: String,
      @GQLDescription(
        """Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user."""
      )
      updatedAt: Option[DateTime]
  )
  @GQLDescription("""The connection type for PublicKey.""")
  case class PublicKeyConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PublicKeyEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PublicKey]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PublicKeyEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PublicKey]
  )
  @GQLDescription("""A file changed in a pull request.""")
  case class PullRequestChangedFile(
      @GQLDescription("""The number of additions to the file.""")
      additions: Int,
      @GQLDescription("""The number of deletions to the file.""")
      deletions: Int,
      @GQLDescription("""The path of the file.""")
      path: String
  )
  @GQLDescription("""The connection type for PullRequestChangedFile.""")
  case class PullRequestChangedFileConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestChangedFileEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestChangedFile]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestChangedFileEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestChangedFile]
  )
  @GQLDescription("""The connection type for PullRequestCommit.""")
  case class PullRequestCommitConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestCommitEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestCommit]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestCommitEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestCommit]
  )
  @GQLDescription("""The connection type for PullRequest.""")
  case class PullRequestConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequest]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """This aggregates pull requests opened by a user within one repository."""
  )
  case class PullRequestContributionsByRepository(
      @GQLDescription("""The pull request contributions.""")
      contributions: PullRequestContributionsByRepositoryContributionsArgs => CreatedPullRequestContributionConnection,
      @GQLDescription(
        """The repository in which the pull requests were opened."""
      )
      repository: Repository
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequest]
  )
  @GQLDescription("""The connection type for PullRequestReviewComment.""")
  case class PullRequestReviewCommentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestReviewCommentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestReviewComment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestReviewCommentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestReviewComment]
  )
  @GQLDescription("""The connection type for PullRequestReview.""")
  case class PullRequestReviewConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestReviewEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestReview]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """This aggregates pull request reviews made by a user within one repository."""
  )
  case class PullRequestReviewContributionsByRepository(
      @GQLDescription("""The pull request review contributions.""")
      contributions: PullRequestReviewContributionsByRepositoryContributionsArgs => CreatedPullRequestReviewContributionConnection,
      @GQLDescription(
        """The repository in which the pull request reviews were made."""
      )
      repository: Repository
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestReviewEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestReview]
  )
  @GQLDescription("""Review comment threads for a pull request review.""")
  case class PullRequestReviewThreadConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestReviewThreadEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestReviewThread]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestReviewThreadEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestReviewThread]
  )
  @GQLDescription("""The connection type for PullRequestTimelineItem.""")
  case class PullRequestTimelineConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestTimelineItemEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestTimelineItem]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestTimelineItemEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestTimelineItem]
  )
  @GQLDescription("""The connection type for PullRequestTimelineItems.""")
  case class PullRequestTimelineItemsConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PullRequestTimelineItemsEdge]]],
      @GQLDescription(
        """Identifies the count of items after applying `before` and `after` filters."""
      )
      filteredCount: Int,
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PullRequestTimelineItems]]],
      @GQLDescription(
        """Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing."""
      )
      pageCount: Int,
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """Identifies the date and time when the timeline was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""An edge in a connection.""")
  case class PullRequestTimelineItemsEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PullRequestTimelineItems]
  )
  @GQLDescription(
    """A team, user or app who has the ability to push to a protected branch."""
  )
  case class PushAllowance(
      @GQLDescription("""The actor that can push.""")
      actor: Option[PushAllowanceActor],
      @GQLDescription(
        """Identifies the branch protection rule associated with the allowed user or team."""
      )
      branchProtectionRule: Option[BranchProtectionRule],
      id: ID
  )
  @GQLDescription("""The connection type for PushAllowance.""")
  case class PushAllowanceConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[PushAllowanceEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[PushAllowance]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class PushAllowanceEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[PushAllowance]
  )
  @GQLDescription("""Represents the client's rate limit.""")
  case class RateLimit(
      @GQLDescription(
        """The point cost for the current query counting against the rate limit."""
      )
      cost: Int,
      @GQLDescription(
        """The maximum number of points the client is permitted to consume in a 60 minute window."""
      )
      limit: Int,
      @GQLDescription("""The maximum number of nodes this query may return""")
      nodeCount: Int,
      @GQLDescription(
        """The number of points remaining in the current rate limit window."""
      )
      remaining: Int,
      @GQLDescription(
        """The time at which the current rate limit window resets in UTC epoch seconds."""
      )
      resetAt: DateTime
  )
  @GQLDescription("""The connection type for User.""")
  case class ReactingUserConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReactingUserEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a user that's made a reaction.""")
  case class ReactingUserEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      node: User,
      @GQLDescription("""The moment when the user made the reaction.""")
      reactedAt: DateTime
  )
  @GQLDescription("""An emoji reaction to a particular piece of content.""")
  case class Reaction(
      @GQLDescription("""Identifies the emoji reaction.""")
      content: ReactionContent,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription("""The reactable piece of content""")
      reactable: Reactable,
      @GQLDescription("""Identifies the user who created this reaction.""")
      user: Option[User]
  )
  @GQLDescription("""A list of reactions that have been left on the subject.""")
  case class ReactionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReactionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Reaction]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """Whether or not the authenticated user has left a reaction on the subject."""
      )
      viewerHasReacted: Boolean
  )
  @GQLDescription("""An edge in a connection.""")
  case class ReactionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Reaction]
  )
  @GQLDescription(
    """A group of emoji reactions to a particular piece of content."""
  )
  case class ReactionGroup(
      @GQLDescription("""Identifies the emoji reaction.""")
      content: ReactionContent,
      @GQLDescription("""Identifies when the reaction was created.""")
      createdAt: Option[DateTime],
      @GQLDescription("""The subject that was reacted to.""")
      subject: Reactable,
      @GQLDescription(
        """Users who have reacted to the reaction subject with the emotion represented by this reaction group"""
      )
      users: ReactionGroupUsersArgs => ReactingUserConnection,
      @GQLDescription(
        """Whether or not the authenticated user has left a reaction on the subject."""
      )
      viewerHasReacted: Boolean
  )
  @GQLDescription("""Represents a Git reference.""")
  case class Ref(
      @GQLDescription(
        """A list of pull requests with this ref as the head ref."""
      )
      associatedPullRequests: RefAssociatedPullRequestsArgs => PullRequestConnection,
      id: ID,
      @GQLDescription("""The ref name.""")
      name: String,
      @GQLDescription(
        """The ref's prefix, such as `refs/heads/` or `refs/tags/`."""
      )
      prefix: String,
      @GQLDescription("""The repository the ref belongs to.""")
      repository: Repository,
      @GQLDescription("""The object the ref points to.""")
      target: GitObject
  )
  @GQLDescription("""The connection type for Ref.""")
  case class RefConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RefEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Ref]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RefEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Ref]
  )
  @GQLDescription(
    """Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes"""
  )
  case class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The identity provider for the enterprise.""")
      identityProvider: Option[EnterpriseIdentityProvider]
  )
  @GQLDescription(
    """A registry package contains the content for an uploaded package."""
  )
  case class RegistryPackage(
      @GQLDescription("""The package type color""")
      color: String,
      id: ID,
      @GQLDescription("""Find the latest version for the package.""")
      latestVersion: Option[RegistryPackageVersion],
      @GQLDescription("""Identifies the title of the package.""")
      name: String,
      @GQLDescription(
        """Identifies the title of the package, with the owner prefixed."""
      )
      nameWithOwner: String,
      @GQLDescription("""Find the package file identified by the guid.""")
      packageFileByGuid: RegistryPackagePackageFileByGuidArgs => Option[
        RegistryPackageFile
      ],
      @GQLDescription("""Find the package file identified by the sha256.""")
      packageFileBySha256: RegistryPackagePackageFileBySha256Args => Option[
        RegistryPackageFile
      ],
      @GQLDescription("""Identifies the type of the package.""")
      packageType: RegistryPackageType,
      @GQLDescription("""List the prerelease versions for this package.""")
      preReleaseVersions: RegistryPackagePreReleaseVersionsArgs => Option[
        RegistryPackageVersionConnection
      ],
      @GQLDescription("""The type of the package.""")
      registryPackageType: Option[String],
      @GQLDescription("""repository that the release is associated with""")
      repository: Option[Repository],
      @GQLDescription("""Statistics about package activity.""")
      statistics: Option[RegistryPackageStatistics],
      @GQLDescription("""list of tags for this package""")
      tags: RegistryPackageTagsArgs => RegistryPackageTagConnection,
      @GQLDescription("""List the topics for this package.""")
      topics: RegistryPackageTopicsArgs => Option[TopicConnection],
      @GQLDescription("""Find package version by version string.""")
      version: RegistryPackageVersionArgs => Option[RegistryPackageVersion],
      @GQLDescription("""Find package version by version string.""")
      versionByPlatform: RegistryPackageVersionByPlatformArgs => Option[
        RegistryPackageVersion
      ],
      @GQLDescription("""Find package version by manifest SHA256.""")
      versionBySha256: RegistryPackageVersionBySha256Args => Option[
        RegistryPackageVersion
      ],
      @GQLDescription("""list of versions for this package""")
      versions: RegistryPackageVersionsArgs => RegistryPackageVersionConnection,
      @GQLDescription("""List package versions with a specific metadatum.""")
      versionsByMetadatum: RegistryPackageVersionsByMetadatumArgs => Option[
        RegistryPackageVersionConnection
      ]
  )
  @GQLDescription("""The connection type for RegistryPackage.""")
  case class RegistryPackageConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RegistryPackageEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RegistryPackage]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """A package dependency contains the information needed to satisfy a dependency."""
  )
  case class RegistryPackageDependency(
      @GQLDescription("""Identifies the type of dependency.""")
      dependencyType: RegistryPackageDependencyType,
      id: ID,
      @GQLDescription("""Identifies the name of the dependency.""")
      name: String,
      @GQLDescription("""Identifies the version of the dependency.""")
      version: String
  )
  @GQLDescription("""The connection type for RegistryPackageDependency.""")
  case class RegistryPackageDependencyConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RegistryPackageDependencyEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RegistryPackageDependency]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RegistryPackageDependencyEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RegistryPackageDependency]
  )
  @GQLDescription("""An edge in a connection.""")
  case class RegistryPackageEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RegistryPackage]
  )
  @GQLDescription("""A file in a specific registry package version.""")
  case class RegistryPackageFile(
      @GQLDescription("""A unique identifier for this file.""")
      guid: Option[String],
      id: ID,
      @GQLDescription("""Identifies the md5.""")
      md5: Option[String],
      @GQLDescription("""URL to download the asset metadata.""")
      metadataUrl: URI,
      @GQLDescription("""Name of the file""")
      name: String,
      @GQLDescription("""The package version this file belongs to.""")
      packageVersion: RegistryPackageVersion,
      @GQLDescription("""Identifies the sha1.""")
      sha1: Option[String],
      @GQLDescription("""Identifies the sha256.""")
      sha256: Option[String],
      @GQLDescription("""Identifies the size.""")
      size: Option[Int],
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""URL to download the asset.""")
      url: URI
  )
  @GQLDescription("""The connection type for RegistryPackageFile.""")
  case class RegistryPackageFileConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RegistryPackageFileEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RegistryPackageFile]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RegistryPackageFileEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RegistryPackageFile]
  )
  @GQLDescription(
    """Represents a object that contains package activity statistics such as downloads."""
  )
  case class RegistryPackageStatistics(
      @GQLDescription(
        """Number of times the package was downloaded this month."""
      )
      downloadsThisMonth: Int,
      @GQLDescription(
        """Number of times the package was downloaded this week."""
      )
      downloadsThisWeek: Int,
      @GQLDescription(
        """Number of times the package was downloaded this year."""
      )
      downloadsThisYear: Int,
      @GQLDescription("""Number of times the package was downloaded today.""")
      downloadsToday: Int,
      @GQLDescription(
        """Number of times the package was downloaded since it was created."""
      )
      downloadsTotalCount: Int
  )
  @GQLDescription(
    """A version tag contains the mapping between a tag name and a version."""
  )
  case class RegistryPackageTag(
      id: ID,
      @GQLDescription("""Identifies the tag name of the version.""")
      name: String,
      @GQLDescription("""version that the tag is associated with""")
      version: Option[RegistryPackageVersion]
  )
  @GQLDescription("""The connection type for RegistryPackageTag.""")
  case class RegistryPackageTagConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RegistryPackageTagEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RegistryPackageTag]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RegistryPackageTagEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RegistryPackageTag]
  )
  @GQLDescription(
    """A package version contains the information about a specific package version."""
  )
  case class RegistryPackageVersion(
      @GQLDescription("""list of dependencies for this package""")
      dependencies: RegistryPackageVersionDependenciesArgs => RegistryPackageDependencyConnection,
      @GQLDescription(
        """A file associated with this registry package version"""
      )
      fileByName: RegistryPackageVersionFileByNameArgs => Option[
        RegistryPackageFile
      ],
      @GQLDescription(
        """List of files associated with this registry package version"""
      )
      files: RegistryPackageVersionFilesArgs => RegistryPackageFileConnection,
      id: ID,
      @GQLDescription(
        """A single line of text to install this package version."""
      )
      installationCommand: Option[String],
      @GQLDescription(
        """Identifies the package manifest for this package version."""
      )
      manifest: Option[String],
      @GQLDescription("""Identifies the platform this version was built for.""")
      platform: Option[String],
      @GQLDescription("""Indicates whether this version is a pre-release.""")
      preRelease: Boolean,
      @GQLDescription("""The README of this package version""")
      readme: Option[String],
      @GQLDescription("""The HTML README of this package version""")
      readmeHtml: Option[HTML],
      @GQLDescription("""Registry package associated with this version.""")
      registryPackage: Option[RegistryPackage],
      @GQLDescription("""Release associated with this package.""")
      release: Option[Release],
      @GQLDescription("""Identifies the sha256.""")
      sha256: Option[String],
      @GQLDescription("""Identifies the size.""")
      size: Option[Int],
      @GQLDescription("""Statistics about package activity.""")
      statistics: Option[RegistryPackageVersionStatistics],
      @GQLDescription("""Identifies the package version summary.""")
      summary: Option[String],
      @GQLDescription(
        """Time at which the most recent file upload for this package version finished"""
      )
      updatedAt: DateTime,
      @GQLDescription("""Identifies the version number.""")
      version: String,
      @GQLDescription("""Can the current viewer edit this Package version.""")
      viewerCanEdit: Boolean
  )
  @GQLDescription("""The connection type for RegistryPackageVersion.""")
  case class RegistryPackageVersionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RegistryPackageVersionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RegistryPackageVersion]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RegistryPackageVersionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RegistryPackageVersion]
  )
  @GQLDescription(
    """Represents a object that contains package version activity statistics such as downloads."""
  )
  case class RegistryPackageVersionStatistics(
      @GQLDescription(
        """Number of times the package was downloaded this month."""
      )
      downloadsThisMonth: Int,
      @GQLDescription(
        """Number of times the package was downloaded this week."""
      )
      downloadsThisWeek: Int,
      @GQLDescription(
        """Number of times the package was downloaded this year."""
      )
      downloadsThisYear: Int,
      @GQLDescription("""Number of times the package was downloaded today.""")
      downloadsToday: Int,
      @GQLDescription(
        """Number of times the package was downloaded since it was created."""
      )
      downloadsTotalCount: Int
  )
  @GQLDescription("""A release contains the content for a release.""")
  case class Release(
      @GQLDescription("""The author of the release""")
      author: Option[User],
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The description of the release.""")
      description: Option[String],
      @GQLDescription("""The description of this release rendered to HTML.""")
      descriptionHTML: Option[HTML],
      id: ID,
      @GQLDescription("""Whether or not the release is a draft""")
      isDraft: Boolean,
      @GQLDescription("""Whether or not the release is a prerelease""")
      isPrerelease: Boolean,
      @GQLDescription("""The title of the release.""")
      name: Option[String],
      @GQLDescription(
        """Identifies the date and time when the release was created."""
      )
      publishedAt: Option[DateTime],
      @GQLDescription(
        """List of releases assets which are dependent on this release."""
      )
      releaseAssets: ReleaseReleaseAssetsArgs => ReleaseAssetConnection,
      @GQLDescription("""The HTTP path for this issue""")
      resourcePath: URI,
      @GQLDescription(
        """A description of the release, rendered to HTML without any links in it."""
      )
      shortDescriptionHTML: ReleaseShortDescriptionHTMLArgs => Option[HTML],
      @GQLDescription("""The Git tag the release points to""")
      tag: Option[Ref],
      @GQLDescription("""The name of the release's Git tag""")
      tagName: String,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this issue""")
      url: URI
  )
  @GQLDescription(
    """A release asset contains the content for a release asset."""
  )
  case class ReleaseAsset(
      @GQLDescription("""The asset's content-type""")
      contentType: String,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The number of times this asset was downloaded""")
      downloadCount: Int,
      @GQLDescription(
        """Identifies the URL where you can download the release asset via the browser."""
      )
      downloadUrl: URI,
      id: ID,
      @GQLDescription("""Identifies the title of the release asset.""")
      name: String,
      @GQLDescription("""Release that the asset is associated with""")
      release: Option[Release],
      @GQLDescription("""The size (in bytes) of the asset""")
      size: Int,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The user that performed the upload""")
      uploadedBy: User,
      @GQLDescription("""Identifies the URL of the release asset.""")
      url: URI
  )
  @GQLDescription("""The connection type for ReleaseAsset.""")
  case class ReleaseAssetConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReleaseAssetEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ReleaseAsset]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ReleaseAssetEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ReleaseAsset]
  )
  @GQLDescription("""The connection type for Release.""")
  case class ReleaseConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReleaseEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Release]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ReleaseEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Release]
  )
  @GQLDescription(
    """Autogenerated return type of RemoveAssigneesFromAssignable"""
  )
  case class RemoveAssigneesFromAssignablePayload(
      @GQLDescription("""The item that was unassigned.""")
      assignable: Option[Assignable],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated return type of RemoveEnterpriseAdmin""")
  case class RemoveEnterpriseAdminPayload(
      @GQLDescription("""The user who was removed as an administrator.""")
      admin: Option[User],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated enterprise.""")
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of removing an administrator."""
      )
      message: Option[String],
      @GQLDescription("""The viewer performing the mutation.""")
      viewer: Option[User]
  )
  @GQLDescription(
    """Autogenerated return type of RemoveEnterpriseIdentityProvider"""
  )
  case class RemoveEnterpriseIdentityProviderPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The identity provider that was removed from the enterprise."""
      )
      identityProvider: Option[EnterpriseIdentityProvider]
  )
  @GQLDescription(
    """Autogenerated return type of RemoveEnterpriseOrganization"""
  )
  case class RemoveEnterpriseOrganizationPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated enterprise.""")
      enterprise: Option[Enterprise],
      @GQLDescription(
        """The organization that was removed from the enterprise."""
      )
      organization: Option[Organization],
      @GQLDescription("""The viewer performing the mutation.""")
      viewer: Option[User]
  )
  @GQLDescription("""Autogenerated return type of RemoveLabelsFromLabelable""")
  case class RemoveLabelsFromLabelablePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Labelable the labels were removed from.""")
      labelable: Option[Labelable]
  )
  @GQLDescription("""Autogenerated return type of RemoveOutsideCollaborator""")
  case class RemoveOutsideCollaboratorPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The user that was removed as an outside collaborator."""
      )
      removedUser: Option[User]
  )
  @GQLDescription("""Autogenerated return type of RemoveReaction""")
  case class RemoveReactionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The reaction object.""")
      reaction: Option[Reaction],
      @GQLDescription("""The reactable subject.""")
      subject: Option[Reactable]
  )
  @GQLDescription("""Autogenerated return type of RemoveStar""")
  case class RemoveStarPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The starrable.""")
      starrable: Option[Starrable]
  )
  @GQLDescription("""Autogenerated return type of ReopenIssue""")
  case class ReopenIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The issue that was opened.""")
      issue: Option[Issue]
  )
  @GQLDescription("""Autogenerated return type of ReopenPullRequest""")
  case class ReopenPullRequestPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The pull request that was reopened.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription("""The connection type for User.""")
  case class RepositoryCollaboratorConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RepositoryCollaboratorEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription(
    """Represents a user who is a collaborator of a repository."""
  )
  case class RepositoryCollaboratorEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      node: User,
      @GQLDescription("""The permission the user has on the repository.""")
      permission: RepositoryPermission,
      @GQLDescription(
        """A list of sources for the user's access to the repository."""
      )
      permissionSources: Option[List[PermissionSource]]
  )
  @GQLDescription("""A list of repositories owned by the subject.""")
  case class RepositoryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RepositoryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Repository]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int,
      @GQLDescription(
        """The total size in kilobytes of all repositories in the connection."""
      )
      totalDiskUsage: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RepositoryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Repository]
  )
  @GQLDescription("""An invitation for a user to be added to a repository.""")
  case class RepositoryInvitation(
      id: ID,
      @GQLDescription("""The user who received the invitation.""")
      invitee: User,
      @GQLDescription("""The user who created the invitation.""")
      inviter: User,
      @GQLDescription(
        """The permission granted on this repository by this invitation."""
      )
      permission: RepositoryPermission,
      @GQLDescription("""The Repository the user is invited to.""")
      repository: Option[RepositoryInfo]
  )
  @GQLDescription("""A repository-topic connects a repository to a topic.""")
  case class RepositoryTopic(
      id: ID,
      @GQLDescription("""The HTTP path for this repository-topic.""")
      resourcePath: URI,
      @GQLDescription("""The topic.""")
      topic: Topic,
      @GQLDescription("""The HTTP URL for this repository-topic.""")
      url: URI
  )
  @GQLDescription("""The connection type for RepositoryTopic.""")
  case class RepositoryTopicConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RepositoryTopicEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RepositoryTopic]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RepositoryTopicEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RepositoryTopic]
  )
  @GQLDescription(
    """A alert for a repository with an affected vulnerability."""
  )
  case class RepositoryVulnerabilityAlert(
      @GQLDescription("""The affected version""")
      affectedRange: String,
      @GQLDescription("""When was the alert created?""")
      createdAt: DateTime,
      @GQLDescription("""The reason the alert was dismissed""")
      dismissReason: Option[String],
      @GQLDescription("""When was the alert dimissed?""")
      dismissedAt: Option[DateTime],
      @GQLDescription("""The user who dismissed the alert""")
      dismisser: Option[User],
      @GQLDescription("""The external identifier for the vulnerability""")
      externalIdentifier: Option[String],
      @GQLDescription("""The external reference for the vulnerability""")
      externalReference: String,
      @GQLDescription("""The fixed version""")
      fixedIn: Option[String],
      id: ID,
      @GQLDescription("""The affected package""")
      packageName: String,
      @GQLDescription("""The associated repository""")
      repository: Repository,
      @GQLDescription("""The associated security advisory""")
      securityAdvisory: Option[SecurityAdvisory],
      @GQLDescription("""The associated security vulnerablity""")
      securityVulnerability: Option[SecurityVulnerability],
      @GQLDescription("""The vulnerable manifest filename""")
      vulnerableManifestFilename: String,
      @GQLDescription("""The vulnerable manifest path""")
      vulnerableManifestPath: String,
      @GQLDescription("""The vulnerable requirements""")
      vulnerableRequirements: Option[String]
  )
  @GQLDescription("""The connection type for RepositoryVulnerabilityAlert.""")
  case class RepositoryVulnerabilityAlertConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[RepositoryVulnerabilityAlertEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[RepositoryVulnerabilityAlert]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class RepositoryVulnerabilityAlertEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[RepositoryVulnerabilityAlert]
  )
  @GQLDescription("""Autogenerated return type of RequestReviews""")
  case class RequestReviewsPayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The pull request that is getting requests.""")
      pullRequest: Option[PullRequest],
      @GQLDescription(
        """The edge from the pull request to the requested reviewers."""
      )
      requestedReviewersEdge: Option[UserEdge]
  )
  @GQLDescription("""Autogenerated return type of ResolveReviewThread""")
  case class ResolveReviewThreadPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The thread to resolve.""")
      thread: Option[PullRequestReviewThread]
  )
  @GQLDescription(
    """A team or user who has the ability to dismiss a review on a protected branch."""
  )
  case class ReviewDismissalAllowance(
      @GQLDescription("""The actor that can dismiss.""")
      actor: Option[ReviewDismissalAllowanceActor],
      @GQLDescription(
        """Identifies the branch protection rule associated with the allowed user or team."""
      )
      branchProtectionRule: Option[BranchProtectionRule],
      id: ID
  )
  @GQLDescription("""The connection type for ReviewDismissalAllowance.""")
  case class ReviewDismissalAllowanceConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReviewDismissalAllowanceEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ReviewDismissalAllowance]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ReviewDismissalAllowanceEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ReviewDismissalAllowance]
  )
  @GQLDescription("""A request for a user to review a pull request.""")
  case class ReviewRequest(
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription(
        """Identifies the pull request associated with this review request."""
      )
      pullRequest: PullRequest,
      @GQLDescription("""The reviewer that is requested.""")
      requestedReviewer: Option[RequestedReviewer]
  )
  @GQLDescription("""The connection type for ReviewRequest.""")
  case class ReviewRequestConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[ReviewRequestEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[ReviewRequest]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class ReviewRequestEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[ReviewRequest]
  )
  @GQLDescription(
    """A hovercard context with a message describing the current code review state of the pull
request."""
  )
  case class ReviewStatusHovercardContext(
      @GQLDescription("""A string describing this context""")
      message: String,
      @GQLDescription("""An octicon to accompany this context""")
      octicon: String,
      @GQLDescription(
        """The current status of the pull request with respect to code review."""
      )
      reviewDecision: Option[PullRequestReviewDecision]
  )
  @GQLDescription("""A Saved Reply is text a user can use to reply quickly.""")
  case class SavedReply(
      @GQLDescription("""The body of the saved reply.""")
      body: String,
      @GQLDescription("""The saved reply body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      id: ID,
      @GQLDescription("""The title of the saved reply.""")
      title: String,
      @GQLDescription("""The user that saved this reply.""")
      user: Option[Actor]
  )
  @GQLDescription("""The connection type for SavedReply.""")
  case class SavedReplyConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SavedReplyEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[SavedReply]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SavedReplyEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[SavedReply]
  )
  @GQLDescription("""A list of results that matched against a search query.""")
  case class SearchResultItemConnection(
      @GQLDescription(
        """The number of pieces of code that matched the search query."""
      )
      codeCount: Int,
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SearchResultItemEdge]]],
      @GQLDescription("""The number of issues that matched the search query.""")
      issueCount: Int,
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[SearchResultItem]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """The number of repositories that matched the search query."""
      )
      repositoryCount: Int,
      @GQLDescription("""The number of users that matched the search query.""")
      userCount: Int,
      @GQLDescription(
        """The number of wiki pages that matched the search query."""
      )
      wikiCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SearchResultItemEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[SearchResultItem],
      @GQLDescription("""Text matches on the result found.""")
      textMatches: Option[List[Option[TextMatch]]]
  )
  @GQLDescription("""A GitHub Security Advisory""")
  case class SecurityAdvisory(
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription(
        """This is a long plaintext description of the advisory"""
      )
      description: String,
      @GQLDescription("""The GitHub Security Advisory ID""")
      ghsaId: String,
      id: ID,
      @GQLDescription("""A list of identifiers for this advisory""")
      identifiers: List[SecurityAdvisoryIdentifier],
      @GQLDescription("""The organization that originated the advisory""")
      origin: String,
      @GQLDescription("""The permalink for the advisory""")
      permalink: Option[URI],
      @GQLDescription("""When the advisory was published""")
      publishedAt: DateTime,
      @GQLDescription("""A list of references for this advisory""")
      references: List[SecurityAdvisoryReference],
      @GQLDescription("""The severity of the advisory""")
      severity: SecurityAdvisorySeverity,
      @GQLDescription("""A short plaintext summary of the advisory""")
      summary: String,
      @GQLDescription("""When the advisory was last updated""")
      updatedAt: DateTime,
      @GQLDescription("""Vulnerabilities associated with this Advisory""")
      vulnerabilities: SecurityAdvisoryVulnerabilitiesArgs => SecurityVulnerabilityConnection,
      @GQLDescription(
        """When the advisory was withdrawn, if it has been withdrawn"""
      )
      withdrawnAt: Option[DateTime]
  )
  @GQLDescription("""The connection type for SecurityAdvisory.""")
  case class SecurityAdvisoryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SecurityAdvisoryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[SecurityAdvisory]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SecurityAdvisoryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[SecurityAdvisory]
  )
  @GQLDescription("""A GitHub Security Advisory Identifier""")
  case class SecurityAdvisoryIdentifier(
      @GQLDescription("""The identifier type, e.g. GHSA, CVE""")
      `type`: String,
      @GQLDescription("""The identifier""")
      value: String
  )
  @GQLDescription("""An individual package""")
  case class SecurityAdvisoryPackage(
      @GQLDescription(
        """The ecosystem the package belongs to, e.g. RUBYGEMS, NPM"""
      )
      ecosystem: SecurityAdvisoryEcosystem,
      @GQLDescription("""The package name""")
      name: String
  )
  @GQLDescription("""An individual package version""")
  case class SecurityAdvisoryPackageVersion(
      @GQLDescription("""The package name or version""")
      identifier: String
  )
  @GQLDescription("""A GitHub Security Advisory Reference""")
  case class SecurityAdvisoryReference(
      @GQLDescription("""A publicly accessible reference""")
      url: URI
  )
  @GQLDescription("""An individual vulnerability within an Advisory""")
  case class SecurityVulnerability(
      @GQLDescription("""The Advisory associated with this Vulnerability""")
      advisory: SecurityAdvisory,
      @GQLDescription(
        """The first version containing a fix for the vulnerability"""
      )
      firstPatchedVersion: Option[SecurityAdvisoryPackageVersion],
      @GQLDescription("""A description of the vulnerable package""")
      `package`: SecurityAdvisoryPackage,
      @GQLDescription(
        """The severity of the vulnerability within this package"""
      )
      severity: SecurityAdvisorySeverity,
      @GQLDescription("""When the vulnerability was last updated""")
      updatedAt: DateTime,
      @GQLDescription(
        """A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum"""
      )
      vulnerableVersionRange: String
  )
  @GQLDescription("""The connection type for SecurityVulnerability.""")
  case class SecurityVulnerabilityConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SecurityVulnerabilityEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[SecurityVulnerability]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SecurityVulnerabilityEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[SecurityVulnerability]
  )
  @GQLDescription(
    """Autogenerated return type of SetEnterpriseIdentityProvider"""
  )
  case class SetEnterpriseIdentityProviderPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The identity provider for the enterprise.""")
      identityProvider: Option[EnterpriseIdentityProvider]
  )
  @GQLDescription("""Represents an S/MIME signature on a Commit or Tag.""")
  case class SmimeSignature(
      @GQLDescription("""Email used to sign this object.""")
      email: String,
      @GQLDescription(
        """True if the signature is valid and verified by GitHub."""
      )
      isValid: Boolean,
      @GQLDescription(
        """Payload for GPG signing object. Raw ODB object without the signature header."""
      )
      payload: String,
      @GQLDescription("""ASCII-armored signature header from object.""")
      signature: String,
      @GQLDescription(
        """GitHub user corresponding to the email signing this commit."""
      )
      signer: Option[User],
      @GQLDescription(
        """The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid."""
      )
      state: GitSignatureState,
      @GQLDescription(
        """True if the signature was made with GitHub's signing key."""
      )
      wasSignedByGitHub: Boolean
  )
  @GQLDescription("""A GitHub Sponsors listing.""")
  case class SponsorsListing(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The full description of the listing.""")
      fullDescription: String,
      @GQLDescription(
        """The full description of the listing rendered to HTML."""
      )
      fullDescriptionHTML: HTML,
      id: ID,
      @GQLDescription("""The listing's full name.""")
      name: String,
      @GQLDescription("""The short description of the listing.""")
      shortDescription: String,
      @GQLDescription("""The short name of the listing.""")
      slug: String,
      @GQLDescription(
        """The published tiers for this GitHub Sponsors listing."""
      )
      tiers: SponsorsListingTiersArgs => Option[SponsorsTierConnection]
  )
  @GQLDescription(
    """A GitHub Sponsors tier associated with a GitHub Sponsors listing."""
  )
  case class SponsorsTier(
      @GQLDescription(
        """SponsorsTier information only visible to users that can administer the associated Sponsors listing."""
      )
      adminInfo: Option[SponsorsTierAdminInfo],
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""The description of the tier.""")
      description: String,
      @GQLDescription("""The tier description rendered to HTML""")
      descriptionHTML: HTML,
      id: ID,
      @GQLDescription("""How much this tier costs per month in cents.""")
      monthlyPriceInCents: Int,
      @GQLDescription("""How much this tier costs per month in dollars.""")
      monthlyPriceInDollars: Int,
      @GQLDescription("""The name of the tier.""")
      name: String,
      @GQLDescription("""The sponsors listing that this tier belongs to.""")
      sponsorsListing: SponsorsListing,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription(
    """SponsorsTier information only visible to users that can administer the associated Sponsors listing."""
  )
  case class SponsorsTierAdminInfo(
      @GQLDescription("""The sponsorships associated with this tier.""")
      sponsorships: SponsorsTierAdminInfoSponsorshipsArgs => SponsorshipConnection
  )
  @GQLDescription("""The connection type for SponsorsTier.""")
  case class SponsorsTierConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SponsorsTierEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[SponsorsTier]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SponsorsTierEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[SponsorsTier]
  )
  @GQLDescription(
    """A sponsorship relationship between a sponsor and a maintainer"""
  )
  case class Sponsorship(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      id: ID,
      @GQLDescription("""The entity that is being sponsored""")
      maintainer: User,
      @GQLDescription("""The privacy level for this sponsorship.""")
      privacyLevel: SponsorshipPrivacy,
      @GQLDescription(
        """The entity that is sponsoring. Returns null if the sponsorship is private"""
      )
      sponsor: Option[User],
      @GQLDescription("""The entity that is being sponsored""")
      sponsorable: Sponsorable,
      @GQLDescription("""The associated sponsorship tier""")
      tier: Option[SponsorsTier]
  )
  @GQLDescription("""The connection type for Sponsorship.""")
  case class SponsorshipConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SponsorshipEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Sponsorship]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SponsorshipEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Sponsorship]
  )
  @GQLDescription("""The connection type for User.""")
  case class StargazerConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[StargazerEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a user that's starred a repository.""")
  case class StargazerEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      node: User,
      @GQLDescription("""Identifies when the item was starred.""")
      starredAt: DateTime
  )
  @GQLDescription("""The connection type for Repository.""")
  case class StarredRepositoryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[StarredRepositoryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Repository]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a starred repository.""")
  case class StarredRepositoryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      node: Repository,
      @GQLDescription("""Identifies when the item was starred.""")
      starredAt: DateTime
  )
  @GQLDescription("""Represents a commit status.""")
  case class Status(
      @GQLDescription("""The commit this status is attached to.""")
      commit: Option[Commit],
      @GQLDescription(
        """Looks up an individual status context by context name."""
      )
      context: StatusContextArgs => Option[StatusContext],
      @GQLDescription("""The individual status contexts for this commit.""")
      contexts: List[StatusContext],
      id: ID,
      @GQLDescription("""The combined commit status.""")
      state: StatusState
  )
  @GQLDescription(
    """Represents the rollup for both the check runs and status for a commit."""
  )
  case class StatusCheckRollup(
      @GQLDescription(
        """The commit the status and check runs are attached to."""
      )
      commit: Option[Commit],
      @GQLDescription(
        """A list of status contexts and check runs for this commit."""
      )
      contexts: StatusCheckRollupContextsArgs => StatusCheckRollupContextConnection,
      id: ID,
      @GQLDescription("""The combined status for the commit.""")
      state: StatusState
  )
  @GQLDescription("""The connection type for StatusCheckRollupContext.""")
  case class StatusCheckRollupContextConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[StatusCheckRollupContextEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[StatusCheckRollupContext]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class StatusCheckRollupContextEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[StatusCheckRollupContext]
  )
  @GQLDescription("""Autogenerated return type of SubmitPullRequestReview""")
  case class SubmitPullRequestReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The submitted pull request review.""")
      pullRequestReview: Option[PullRequestReview]
  )
  @GQLDescription(
    """A pointer to a repository at a specific revision embedded inside another repository."""
  )
  case class Submodule(
      @GQLDescription(
        """The branch of the upstream submodule for tracking updates"""
      )
      branch: Option[String],
      @GQLDescription("""The git URL of the submodule repository""")
      gitUrl: URI,
      @GQLDescription("""The name of the submodule in .gitmodules""")
      name: String,
      @GQLDescription(
        """The path in the superproject that this submodule is located in"""
      )
      path: String,
      @GQLDescription(
        """The commit revision of the subproject repository being tracked by the submodule"""
      )
      subprojectCommitOid: Option[GitObjectID]
  )
  @GQLDescription("""The connection type for Submodule.""")
  case class SubmoduleConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[SubmoduleEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Submodule]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class SubmoduleEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Submodule]
  )
  @GQLDescription(
    """A suggestion to review a pull request based on a user's commit history and review comments."""
  )
  case class SuggestedReviewer(
      @GQLDescription("""Is this suggestion based on past commits?""")
      isAuthor: Boolean,
      @GQLDescription("""Is this suggestion based on past review comments?""")
      isCommenter: Boolean,
      @GQLDescription(
        """Identifies the user suggested to review the pull request."""
      )
      reviewer: User
  )
  @GQLDescription("""Represents a Git tag.""")
  case class Tag(
      @GQLDescription("""An abbreviated version of the Git object ID""")
      abbreviatedOid: String,
      @GQLDescription("""The HTTP path for this Git object""")
      commitResourcePath: URI,
      @GQLDescription("""The HTTP URL for this Git object""")
      commitUrl: URI,
      id: ID,
      @GQLDescription("""The Git tag message.""")
      message: Option[String],
      @GQLDescription("""The Git tag name.""")
      name: String,
      @GQLDescription("""The Git object ID""")
      oid: GitObjectID,
      @GQLDescription("""The Repository the Git object belongs to""")
      repository: Repository,
      @GQLDescription("""Details about the tag author.""")
      tagger: Option[GitActor],
      @GQLDescription("""The Git object the tag points to.""")
      target: GitObject
  )
  @GQLDescription("""The connection type for Team.""")
  case class TeamConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TeamEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Team]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""A team discussion.""")
  case class TeamDiscussion(
      @GQLDescription("""The actor who authored the comment.""")
      author: Option[Actor],
      @GQLDescription("""Author's association with the discussion's team.""")
      authorAssociation: CommentAuthorAssociation,
      @GQLDescription("""The body as Markdown.""")
      body: String,
      @GQLDescription("""The body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription("""The body rendered to text.""")
      bodyText: String,
      @GQLDescription("""Identifies the discussion body hash.""")
      bodyVersion: String,
      @GQLDescription("""A list of comments on this discussion.""")
      comments: TeamDiscussionCommentsArgs => TeamDiscussionCommentConnection,
      @GQLDescription("""The HTTP path for discussion comments""")
      commentsResourcePath: URI,
      @GQLDescription("""The HTTP URL for discussion comments""")
      commentsUrl: URI,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """Check if this comment was created via an email reply."""
      )
      createdViaEmail: Boolean,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription("""The actor who edited the comment.""")
      editor: Option[Actor],
      id: ID,
      @GQLDescription(
        """Check if this comment was edited and includes an edit with the creation data"""
      )
      includesCreatedEdit: Boolean,
      @GQLDescription("""Whether or not the discussion is pinned.""")
      isPinned: Boolean,
      @GQLDescription(
        """Whether or not the discussion is only visible to team members and org admins."""
      )
      isPrivate: Boolean,
      @GQLDescription("""The moment the editor made the last edit""")
      lastEditedAt: Option[DateTime],
      @GQLDescription("""Identifies the discussion within its team.""")
      number: Int,
      @GQLDescription("""Identifies when the comment was published at.""")
      publishedAt: Option[DateTime],
      @GQLDescription(
        """A list of reactions grouped by content left on the subject."""
      )
      reactionGroups: Option[List[ReactionGroup]],
      @GQLDescription("""A list of Reactions left on the Issue.""")
      reactions: TeamDiscussionReactionsArgs => ReactionConnection,
      @GQLDescription("""The HTTP path for this discussion""")
      resourcePath: URI,
      @GQLDescription(
        """The team that defines the context of this discussion."""
      )
      team: Team,
      @GQLDescription("""The title of the discussion""")
      title: String,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this discussion""")
      url: URI,
      @GQLDescription("""A list of edits to this content.""")
      userContentEdits: TeamDiscussionUserContentEditsArgs => Option[
        UserContentEditConnection
      ],
      @GQLDescription("""Check if the current viewer can delete this object.""")
      viewerCanDelete: Boolean,
      @GQLDescription(
        """Whether or not the current viewer can pin this discussion."""
      )
      viewerCanPin: Boolean,
      @GQLDescription("""Can user react to this subject""")
      viewerCanReact: Boolean,
      @GQLDescription(
        """Check if the viewer is able to change their subscription status for the repository."""
      )
      viewerCanSubscribe: Boolean,
      @GQLDescription("""Check if the current viewer can update this object.""")
      viewerCanUpdate: Boolean,
      @GQLDescription(
        """Reasons why the current viewer can not update this comment."""
      )
      viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
      @GQLDescription("""Did the viewer author this comment.""")
      viewerDidAuthor: Boolean,
      @GQLDescription(
        """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
      )
      viewerSubscription: Option[SubscriptionState]
  )
  @GQLDescription("""A comment on a team discussion.""")
  case class TeamDiscussionComment(
      @GQLDescription("""The actor who authored the comment.""")
      author: Option[Actor],
      @GQLDescription("""Author's association with the comment's team.""")
      authorAssociation: CommentAuthorAssociation,
      @GQLDescription("""The body as Markdown.""")
      body: String,
      @GQLDescription("""The body rendered to HTML.""")
      bodyHTML: HTML,
      @GQLDescription("""The body rendered to text.""")
      bodyText: String,
      @GQLDescription("""The current version of the body content.""")
      bodyVersion: String,
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """Check if this comment was created via an email reply."""
      )
      createdViaEmail: Boolean,
      @GQLDescription("""Identifies the primary key from the database.""")
      databaseId: Option[Int],
      @GQLDescription("""The discussion this comment is about.""")
      discussion: TeamDiscussion,
      @GQLDescription("""The actor who edited the comment.""")
      editor: Option[Actor],
      id: ID,
      @GQLDescription(
        """Check if this comment was edited and includes an edit with the creation data"""
      )
      includesCreatedEdit: Boolean,
      @GQLDescription("""The moment the editor made the last edit""")
      lastEditedAt: Option[DateTime],
      @GQLDescription("""Identifies the comment number.""")
      number: Int,
      @GQLDescription("""Identifies when the comment was published at.""")
      publishedAt: Option[DateTime],
      @GQLDescription(
        """A list of reactions grouped by content left on the subject."""
      )
      reactionGroups: Option[List[ReactionGroup]],
      @GQLDescription("""A list of Reactions left on the Issue.""")
      reactions: TeamDiscussionCommentReactionsArgs => ReactionConnection,
      @GQLDescription("""The HTTP path for this comment""")
      resourcePath: URI,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The HTTP URL for this comment""")
      url: URI,
      @GQLDescription("""A list of edits to this content.""")
      userContentEdits: TeamDiscussionCommentUserContentEditsArgs => Option[
        UserContentEditConnection
      ],
      @GQLDescription("""Check if the current viewer can delete this object.""")
      viewerCanDelete: Boolean,
      @GQLDescription("""Can user react to this subject""")
      viewerCanReact: Boolean,
      @GQLDescription("""Check if the current viewer can update this object.""")
      viewerCanUpdate: Boolean,
      @GQLDescription(
        """Reasons why the current viewer can not update this comment."""
      )
      viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
      @GQLDescription("""Did the viewer author this comment.""")
      viewerDidAuthor: Boolean
  )
  @GQLDescription("""The connection type for TeamDiscussionComment.""")
  case class TeamDiscussionCommentConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TeamDiscussionCommentEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[TeamDiscussionComment]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class TeamDiscussionCommentEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[TeamDiscussionComment]
  )
  @GQLDescription("""The connection type for TeamDiscussion.""")
  case class TeamDiscussionConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TeamDiscussionEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[TeamDiscussion]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class TeamDiscussionEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[TeamDiscussion]
  )
  @GQLDescription("""An edge in a connection.""")
  case class TeamEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Team]
  )
  @GQLDescription("""The connection type for User.""")
  case class TeamMemberConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TeamMemberEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a user who is a member of a team.""")
  case class TeamMemberEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription(
        """The HTTP path to the organization's member access page."""
      )
      memberAccessResourcePath: URI,
      @GQLDescription(
        """The HTTP URL to the organization's member access page."""
      )
      memberAccessUrl: URI,
      node: User,
      @GQLDescription("""The role the member has on the team.""")
      role: TeamMemberRole
  )
  @GQLDescription("""The connection type for Repository.""")
  case class TeamRepositoryConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TeamRepositoryEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Repository]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""Represents a team repository.""")
  case class TeamRepositoryEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      node: Repository,
      @GQLDescription("""The permission level the team has on the repository""")
      permission: RepositoryPermission
  )
  @GQLDescription("""A text match within a search result.""")
  case class TextMatch(
      @GQLDescription(
        """The specific text fragment within the property matched on."""
      )
      fragment: String,
      @GQLDescription("""Highlights within the matched fragment.""")
      highlights: List[TextMatchHighlight],
      @GQLDescription("""The property matched on.""")
      property: String
  )
  @GQLDescription("""Represents a single highlight in a search result match.""")
  case class TextMatchHighlight(
      @GQLDescription(
        """The indice in the fragment where the matched text begins."""
      )
      beginIndice: Int,
      @GQLDescription(
        """The indice in the fragment where the matched text ends."""
      )
      endIndice: Int,
      @GQLDescription("""The text matched.""")
      text: String
  )
  @GQLDescription(
    """A topic aggregates entities that are related to a subject."""
  )
  case class Topic(
      id: ID,
      @GQLDescription("""The topic's name.""")
      name: String,
      @GQLDescription(
        """A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics."""
      )
      relatedTopics: TopicRelatedTopicsArgs => List[Topic],
      @GQLDescription("""A list of users who have starred this starrable.""")
      stargazers: TopicStargazersArgs => StargazerConnection,
      @GQLDescription(
        """Returns a boolean indicating whether the viewing user has starred this starrable."""
      )
      viewerHasStarred: Boolean
  )
  @GQLDescription("""The connection type for Topic.""")
  case class TopicConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[TopicEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[Topic]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class TopicEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[Topic]
  )
  @GQLDescription("""Autogenerated return type of TransferIssue""")
  case class TransferIssuePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The issue that was transferred""")
      issue: Option[Issue]
  )
  @GQLDescription("""Represents a Git tree.""")
  case class Tree(
      @GQLDescription("""An abbreviated version of the Git object ID""")
      abbreviatedOid: String,
      @GQLDescription("""The HTTP path for this Git object""")
      commitResourcePath: URI,
      @GQLDescription("""The HTTP URL for this Git object""")
      commitUrl: URI,
      @GQLDescription("""A list of tree entries.""")
      entries: Option[List[TreeEntry]],
      id: ID,
      @GQLDescription("""The Git object ID""")
      oid: GitObjectID,
      @GQLDescription("""The Repository the Git object belongs to""")
      repository: Repository
  )
  @GQLDescription("""Represents a Git tree entry.""")
  case class TreeEntry(
      @GQLDescription("""Entry file mode.""")
      mode: Int,
      @GQLDescription("""Entry file name.""")
      name: String,
      @GQLDescription("""Entry file object.""")
      `object`: Option[GitObject],
      @GQLDescription("""Entry file Git object ID.""")
      oid: GitObjectID,
      @GQLDescription("""The Repository the tree entry belongs to""")
      repository: Repository,
      @GQLDescription(
        """If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule"""
      )
      submodule: Option[Submodule],
      @GQLDescription("""Entry file type.""")
      `type`: String
  )
  @GQLDescription("""Autogenerated return type of UnarchiveRepository""")
  case class UnarchiveRepositoryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The repository that was unarchived.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of UnfollowUser""")
  case class UnfollowUserPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The user that was unfollowed.""")
      user: Option[User]
  )
  @GQLDescription("""Represents an unknown signature on a Commit or Tag.""")
  case class UnknownSignature(
      @GQLDescription("""Email used to sign this object.""")
      email: String,
      @GQLDescription(
        """True if the signature is valid and verified by GitHub."""
      )
      isValid: Boolean,
      @GQLDescription(
        """Payload for GPG signing object. Raw ODB object without the signature header."""
      )
      payload: String,
      @GQLDescription("""ASCII-armored signature header from object.""")
      signature: String,
      @GQLDescription(
        """GitHub user corresponding to the email signing this commit."""
      )
      signer: Option[User],
      @GQLDescription(
        """The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid."""
      )
      state: GitSignatureState,
      @GQLDescription(
        """True if the signature was made with GitHub's signing key."""
      )
      wasSignedByGitHub: Boolean
  )
  @GQLDescription(
    """Autogenerated return type of UnlinkRepositoryFromProject"""
  )
  case class UnlinkRepositoryFromProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The linked Project.""")
      project: Option[Project],
      @GQLDescription("""The linked Repository.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of UnlockLockable""")
  case class UnlockLockablePayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The item that was unlocked.""")
      unlockedRecord: Option[Lockable]
  )
  @GQLDescription("""Autogenerated return type of UnmarkIssueAsDuplicate""")
  case class UnmarkIssueAsDuplicatePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The issue or pull request that was marked as a duplicate."""
      )
      duplicate: Option[IssueOrPullRequest]
  )
  @GQLDescription("""Autogenerated return type of UnresolveReviewThread""")
  case class UnresolveReviewThreadPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The thread to resolve.""")
      thread: Option[PullRequestReviewThread]
  )
  @GQLDescription("""Autogenerated return type of UpdateBranchProtectionRule""")
  case class UpdateBranchProtectionRulePayload(
      @GQLDescription("""The newly created BranchProtectionRule.""")
      branchProtectionRule: Option[BranchProtectionRule],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting"""
  )
  case class UpdateEnterpriseActionExecutionCapabilitySettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated action execution capability setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the action execution capability setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseAdministratorRole"""
  )
  case class UpdateEnterpriseAdministratorRolePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """A message confirming the result of changing the administrator's role."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting"""
  )
  case class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated allow private repository forking setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the allow private repository forking setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting"""
  )
  case class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated default repository permission setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the default repository permission setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting"""
  )
  case class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can change repository visibility setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can change repository visibility setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting"""
  )
  case class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can create repositories setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can create repositories setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting"""
  )
  case class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can delete issues setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can delete issues setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting"""
  )
  case class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can delete repositories setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can delete repositories setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting"""
  )
  case class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can invite collaborators setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can invite collaborators setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting"""
  )
  case class UpdateEnterpriseMembersCanMakePurchasesSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can make purchases setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can make purchases setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting"""
  )
  case class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can update protected branches setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can update protected branches setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting"""
  )
  case class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated members can view dependency insights setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the members can view dependency insights setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting"""
  )
  case class UpdateEnterpriseOrganizationProjectsSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated organization projects setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the organization projects setting."""
      )
      message: Option[String]
  )
  @GQLDescription("""Autogenerated return type of UpdateEnterpriseProfile""")
  case class UpdateEnterpriseProfilePayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated enterprise.""")
      enterprise: Option[Enterprise]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting"""
  )
  case class UpdateEnterpriseRepositoryProjectsSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated repository projects setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the repository projects setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting"""
  )
  case class UpdateEnterpriseTeamDiscussionsSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated team discussions setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the team discussions setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"""
  )
  case class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The enterprise with the updated two factor authentication required setting."""
      )
      enterprise: Option[Enterprise],
      @GQLDescription(
        """A message confirming the result of updating the two factor authentication required setting."""
      )
      message: Option[String]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateIpAllowListEnabledSetting"""
  )
  case class UpdateIpAllowListEnabledSettingPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The IP allow list owner on which the setting was updated."""
      )
      owner: Option[IpAllowListOwner]
  )
  @GQLDescription("""Autogenerated return type of UpdateIpAllowListEntry""")
  case class UpdateIpAllowListEntryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The IP allow list entry that was updated.""")
      ipAllowListEntry: Option[IpAllowListEntry]
  )
  @GQLDescription("""Autogenerated return type of UpdateIssueComment""")
  case class UpdateIssueCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated comment.""")
      issueComment: Option[IssueComment]
  )
  @GQLDescription("""Autogenerated return type of UpdateIssue""")
  case class UpdateIssuePayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The issue.""")
      issue: Option[Issue]
  )
  @GQLDescription("""Autogenerated return type of UpdateProjectCard""")
  case class UpdateProjectCardPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated ProjectCard.""")
      projectCard: Option[ProjectCard]
  )
  @GQLDescription("""Autogenerated return type of UpdateProjectColumn""")
  case class UpdateProjectColumnPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated project column.""")
      projectColumn: Option[ProjectColumn]
  )
  @GQLDescription("""Autogenerated return type of UpdateProject""")
  case class UpdateProjectPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated project.""")
      project: Option[Project]
  )
  @GQLDescription("""Autogenerated return type of UpdatePullRequest""")
  case class UpdatePullRequestPayload(
      @GQLDescription("""Identifies the actor who performed the event.""")
      actor: Option[Actor],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated pull request.""")
      pullRequest: Option[PullRequest]
  )
  @GQLDescription(
    """Autogenerated return type of UpdatePullRequestReviewComment"""
  )
  case class UpdatePullRequestReviewCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated comment.""")
      pullRequestReviewComment: Option[PullRequestReviewComment]
  )
  @GQLDescription("""Autogenerated return type of UpdatePullRequestReview""")
  case class UpdatePullRequestReviewPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated pull request review.""")
      pullRequestReview: Option[PullRequestReview]
  )
  @GQLDescription("""Autogenerated return type of UpdateRef""")
  case class UpdateRefPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated Ref.""")
      ref: Option[Ref]
  )
  @GQLDescription("""Autogenerated return type of UpdateRepository""")
  case class UpdateRepositoryPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated repository.""")
      repository: Option[Repository]
  )
  @GQLDescription("""Autogenerated return type of UpdateSubscription""")
  case class UpdateSubscriptionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The input subscribable entity.""")
      subscribable: Option[Subscribable]
  )
  @GQLDescription(
    """Autogenerated return type of UpdateTeamDiscussionComment"""
  )
  case class UpdateTeamDiscussionCommentPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated comment.""")
      teamDiscussionComment: Option[TeamDiscussionComment]
  )
  @GQLDescription("""Autogenerated return type of UpdateTeamDiscussion""")
  case class UpdateTeamDiscussionPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The updated discussion.""")
      teamDiscussion: Option[TeamDiscussion]
  )
  @GQLDescription("""Autogenerated return type of UpdateTopics""")
  case class UpdateTopicsPayload(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""Names of the provided topics that are not valid.""")
      invalidTopicNames: Option[List[String]],
      @GQLDescription("""The updated repository.""")
      repository: Option[Repository]
  )
  @GQLDescription("""The connection type for User.""")
  case class UserConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[UserEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[User]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edit on user content""")
  case class UserContentEdit(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription(
        """Identifies the date and time when the object was deleted."""
      )
      deletedAt: Option[DateTime],
      @GQLDescription("""The actor who deleted this content""")
      deletedBy: Option[Actor],
      @GQLDescription("""A summary of the changes for this edit""")
      diff: Option[String],
      @GQLDescription("""When this content was edited""")
      editedAt: DateTime,
      @GQLDescription("""The actor who edited this content""")
      editor: Option[Actor],
      id: ID,
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime
  )
  @GQLDescription("""A list of edits to content.""")
  case class UserContentEditConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[UserContentEditEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[UserContentEdit]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class UserContentEditEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[UserContentEdit]
  )
  @GQLDescription("""Represents a user.""")
  case class UserEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[User]
  )
  @GQLDescription("""The user's description of what they're currently doing.""")
  case class UserStatus(
      @GQLDescription(
        """Identifies the date and time when the object was created."""
      )
      createdAt: DateTime,
      @GQLDescription("""An emoji summarizing the user's status.""")
      emoji: Option[String],
      @GQLDescription("""The status emoji as HTML.""")
      emojiHTML: Option[HTML],
      @GQLDescription(
        """If set, the status will not be shown after this date."""
      )
      expiresAt: Option[DateTime],
      @GQLDescription("""ID of the object.""")
      id: ID,
      @GQLDescription(
        """Whether this status indicates the user is not fully available on GitHub."""
      )
      indicatesLimitedAvailability: Boolean,
      @GQLDescription("""A brief message describing what the user is doing.""")
      message: Option[String],
      @GQLDescription(
        """The organization whose members can see this status. If null, this status is publicly visible."""
      )
      organization: Option[Organization],
      @GQLDescription(
        """Identifies the date and time when the object was last updated."""
      )
      updatedAt: DateTime,
      @GQLDescription("""The user who has this status.""")
      user: User
  )
  @GQLDescription("""The connection type for UserStatus.""")
  case class UserStatusConnection(
      @GQLDescription("""A list of edges.""")
      edges: Option[List[Option[UserStatusEdge]]],
      @GQLDescription("""A list of nodes.""")
      nodes: Option[List[Option[UserStatus]]],
      @GQLDescription("""Information to aid in pagination.""")
      pageInfo: PageInfo,
      @GQLDescription(
        """Identifies the total count of items in the connection."""
      )
      totalCount: Int
  )
  @GQLDescription("""An edge in a connection.""")
  case class UserStatusEdge(
      @GQLDescription("""A cursor for use in pagination.""")
      cursor: String,
      @GQLDescription("""The item at the end of the edge.""")
      node: Option[UserStatus]
  )
  @GQLDescription(
    """A hovercard context with a message describing how the viewer is related."""
  )
  case class ViewerHovercardContext(
      @GQLDescription("""A string describing this context""")
      message: String,
      @GQLDescription("""An octicon to accompany this context""")
      octicon: String,
      @GQLDescription("""Identifies the user who is related to this context.""")
      viewer: User
  )
  @GQLDescription(
    """Autogenerated input type of AcceptEnterpriseAdministratorInvitation"""
  )
  case class AcceptEnterpriseAdministratorInvitationInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The id of the invitation being accepted""")
      invitationId: ID
  )
  @GQLDescription("""Autogenerated input type of AcceptTopicSuggestion""")
  case class AcceptTopicSuggestionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of the suggested topic.""")
      name: String,
      @GQLDescription("""The Node ID of the repository.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of AddAssigneesToAssignable""")
  case class AddAssigneesToAssignableInput(
      @GQLDescription(
        """The id of the assignable object to add assignees to."""
      )
      assignableId: ID,
      @GQLDescription("""The id of users to add as assignees.""")
      assigneeIds: List[ID],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated input type of AddComment""")
  case class AddCommentInput(
      @GQLDescription("""The contents of the comment.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the subject to modify.""")
      subjectId: ID
  )
  @GQLDescription("""Autogenerated input type of AddLabelsToLabelable""")
  case class AddLabelsToLabelableInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ids of the labels to add.""")
      labelIds: List[ID],
      @GQLDescription("""The id of the labelable object to add labels to.""")
      labelableId: ID
  )
  @GQLDescription("""Autogenerated input type of AddProjectCard""")
  case class AddProjectCardInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The content of the card. Must be a member of the ProjectCardItem union"""
      )
      contentId: Option[ID],
      @GQLDescription("""The note on the card.""")
      note: Option[String],
      @GQLDescription("""The Node ID of the ProjectColumn.""")
      projectColumnId: ID
  )
  @GQLDescription("""Autogenerated input type of AddProjectColumn""")
  case class AddProjectColumnInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of the column.""")
      name: String,
      @GQLDescription("""The Node ID of the project.""")
      projectId: ID
  )
  @GQLDescription("""Autogenerated input type of AddPullRequestReviewComment""")
  case class AddPullRequestReviewCommentInput(
      @GQLDescription("""The text of the comment.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The SHA of the commit to comment on.""")
      commitOID: Option[GitObjectID],
      @GQLDescription("""The comment id to reply to.""")
      inReplyTo: Option[ID],
      @GQLDescription("""The relative path of the file to comment on.""")
      path: Option[String],
      @GQLDescription("""The line index in the diff to comment on.""")
      position: Option[Int],
      @GQLDescription("""The node ID of the pull request reviewing""")
      pullRequestId: Option[ID],
      @GQLDescription("""The Node ID of the review to modify.""")
      pullRequestReviewId: Option[ID]
  )
  @GQLDescription("""Autogenerated input type of AddPullRequestReview""")
  case class AddPullRequestReviewInput(
      @GQLDescription("""The contents of the review body comment.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The review line comments.""")
      comments: Option[List[Option[DraftPullRequestReviewComment]]],
      @GQLDescription("""The commit OID the review pertains to.""")
      commitOID: Option[GitObjectID],
      @GQLDescription("""The event to perform on the pull request review.""")
      event: Option[PullRequestReviewEvent],
      @GQLDescription("""The Node ID of the pull request to modify.""")
      pullRequestId: ID
  )
  @GQLDescription("""Autogenerated input type of AddReaction""")
  case class AddReactionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of the emoji to react with.""")
      content: ReactionContent,
      @GQLDescription("""The Node ID of the subject to modify.""")
      subjectId: ID
  )
  @GQLDescription("""Autogenerated input type of AddStar""")
  case class AddStarInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Starrable ID to star.""")
      starrableId: ID
  )
  @GQLDescription("""Autogenerated input type of ArchiveRepository""")
  case class ArchiveRepositoryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the repository to mark as archived.""")
      repositoryId: ID
  )
  @GQLDescription("""Ordering options for Audit Log connections.""")
  case class AuditLogOrder(
      @GQLDescription("""The ordering direction.""")
      direction: Option[OrderDirection],
      @GQLDescription("""The field to order Audit Logs by.""")
      field: Option[AuditLogOrderField]
  )
  @GQLDescription(
    """Autogenerated input type of CancelEnterpriseAdminInvitation"""
  )
  case class CancelEnterpriseAdminInvitationInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The Node ID of the pending enterprise administrator invitation."""
      )
      invitationId: ID
  )
  @GQLDescription("""Autogenerated input type of ChangeUserStatus""")
  case class ChangeUserStatusInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:."""
      )
      emoji: Option[String],
      @GQLDescription(
        """If set, the user status will not be shown after this date."""
      )
      expiresAt: Option[DateTime],
      @GQLDescription(
        """Whether this status should indicate you are not fully available on GitHub, e.g., you are away."""
      )
      limitedAvailability: Option[Boolean],
      @GQLDescription("""A short description of your current status.""")
      message: Option[String],
      @GQLDescription(
        """The ID of the organization whose members will be allowed to see the status. If
omitted, the status will be publicly visible."""
      )
      organizationId: Option[ID]
  )
  @GQLDescription("""Autogenerated input type of ClearLabelsFromLabelable""")
  case class ClearLabelsFromLabelableInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The id of the labelable object to clear the labels from."""
      )
      labelableId: ID
  )
  @GQLDescription("""Autogenerated input type of CloneProject""")
  case class CloneProjectInput(
      @GQLDescription("""The description of the project.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Whether or not to clone the source project's workflows."""
      )
      includeWorkflows: Boolean,
      @GQLDescription("""The name of the project.""")
      name: String,
      @GQLDescription(
        """The visibility of the project, defaults to false (private)."""
      )
      public: Option[Boolean],
      @GQLDescription("""The source project to clone.""")
      sourceId: ID,
      @GQLDescription("""The owner ID to create the project under.""")
      targetOwnerId: ID
  )
  @GQLDescription("""Autogenerated input type of CloneTemplateRepository""")
  case class CloneTemplateRepositoryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""A short description of the new repository.""")
      description: Option[String],
      @GQLDescription("""The name of the new repository.""")
      name: String,
      @GQLDescription("""The ID of the owner for the new repository.""")
      ownerId: ID,
      @GQLDescription("""The Node ID of the template repository.""")
      repositoryId: ID,
      @GQLDescription("""Indicates the repository's visibility level.""")
      visibility: RepositoryVisibility
  )
  @GQLDescription("""Autogenerated input type of CloseIssue""")
  case class CloseIssueInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the issue to be closed.""")
      issueId: ID
  )
  @GQLDescription("""Autogenerated input type of ClosePullRequest""")
  case class ClosePullRequestInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the pull request to be closed.""")
      pullRequestId: ID
  )
  @GQLDescription("""Specifies an author for filtering Git commits.""")
  case class CommitAuthor(
      @GQLDescription(
        """Email addresses to filter by. Commits authored by any of the specified email addresses will be returned."""
      )
      emails: Option[List[String]],
      @GQLDescription(
        """ID of a User to filter by. If non-null, only commits authored by this user
will be returned. This field takes precedence over emails."""
      )
      id: Option[ID]
  )
  @GQLDescription("""Ordering options for commit contribution connections.""")
  case class CommitContributionOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field by which to order commit contributions.""")
      field: CommitContributionOrderField
  )
  @GQLDescription("""Ordering options for contribution connections.""")
  case class ContributionOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription(
        """The field by which to order contributions.

**Upcoming Change on 2019-10-01 UTC**
**Description:** `field` will be removed. Only one order field is supported.
**Reason:** `field` will be removed."""
      )
      field: Option[ContributionOrderField]
  )
  @GQLDescription(
    """Autogenerated input type of ConvertProjectCardNoteToIssue"""
  )
  case class ConvertProjectCardNoteToIssueInput(
      @GQLDescription("""The body of the newly created issue.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ProjectCard ID to convert.""")
      projectCardId: ID,
      @GQLDescription("""The ID of the repository to create the issue in.""")
      repositoryId: ID,
      @GQLDescription(
        """The title of the newly created issue. Defaults to the card's note text."""
      )
      title: Option[String]
  )
  @GQLDescription("""Autogenerated input type of CreateBranchProtectionRule""")
  case class CreateBranchProtectionRuleInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Will new commits pushed to matching branches dismiss pull request review approvals."""
      )
      dismissesStaleReviews: Option[Boolean],
      @GQLDescription("""Can admins overwrite branch protection.""")
      isAdminEnforced: Option[Boolean],
      @GQLDescription(
        """The glob-like pattern used to determine matching branches."""
      )
      pattern: String,
      @GQLDescription(
        """A list of User, Team or App IDs allowed to push to matching branches."""
      )
      pushActorIds: Option[List[ID]],
      @GQLDescription(
        """The global relay id of the repository in which a new branch protection rule should be created in."""
      )
      repositoryId: ID,
      @GQLDescription(
        """Number of approving reviews required to update matching branches."""
      )
      requiredApprovingReviewCount: Option[Int],
      @GQLDescription(
        """List of required status check contexts that must pass for commits to be accepted to matching branches."""
      )
      requiredStatusCheckContexts: Option[List[String]],
      @GQLDescription(
        """Are approving reviews required to update matching branches."""
      )
      requiresApprovingReviews: Option[Boolean],
      @GQLDescription(
        """Are reviews from code owners required to update matching branches."""
      )
      requiresCodeOwnerReviews: Option[Boolean],
      @GQLDescription("""Are commits required to be signed.""")
      requiresCommitSignatures: Option[Boolean],
      @GQLDescription(
        """Are status checks required to update matching branches."""
      )
      requiresStatusChecks: Option[Boolean],
      @GQLDescription(
        """Are branches required to be up to date before merging."""
      )
      requiresStrictStatusChecks: Option[Boolean],
      @GQLDescription("""Is pushing to matching branches restricted.""")
      restrictsPushes: Option[Boolean],
      @GQLDescription("""Is dismissal of pull request reviews restricted.""")
      restrictsReviewDismissals: Option[Boolean],
      @GQLDescription(
        """A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."""
      )
      reviewDismissalActorIds: Option[List[ID]]
  )
  @GQLDescription(
    """Autogenerated input type of CreateEnterpriseOrganization"""
  )
  case class CreateEnterpriseOrganizationInput(
      @GQLDescription(
        """The logins for the administrators of the new organization."""
      )
      adminLogins: List[String],
      @GQLDescription("""The email used for sending billing receipts.""")
      billingEmail: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise owning the new organization."""
      )
      enterpriseId: ID,
      @GQLDescription("""The login of the new organization.""")
      login: String,
      @GQLDescription("""The profile name of the new organization.""")
      profileName: String
  )
  @GQLDescription("""Autogenerated input type of CreateIpAllowListEntry""")
  case class CreateIpAllowListEntryInput(
      @GQLDescription(
        """An IP address or range of addresses in CIDR notation."""
      )
      allowListValue: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Whether the IP allow list entry is active when an IP allow list is enabled."""
      )
      isActive: Boolean,
      @GQLDescription("""An optional name for the IP allow list entry.""")
      name: Option[String],
      @GQLDescription(
        """The ID of the owner for which to create the new IP allow list entry."""
      )
      ownerId: ID
  )
  @GQLDescription("""Autogenerated input type of CreateIssue""")
  case class CreateIssueInput(
      @GQLDescription("""The Node ID for the user assignee for this issue.""")
      assigneeIds: Option[List[ID]],
      @GQLDescription("""The body for the issue description.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""An array of Node IDs of labels for this issue.""")
      labelIds: Option[List[ID]],
      @GQLDescription("""The Node ID of the milestone for this issue.""")
      milestoneId: Option[ID],
      @GQLDescription(
        """An array of Node IDs for projects associated with this issue."""
      )
      projectIds: Option[List[ID]],
      @GQLDescription("""The Node ID of the repository.""")
      repositoryId: ID,
      @GQLDescription("""The title for the issue.""")
      title: String
  )
  @GQLDescription("""Autogenerated input type of CreateProject""")
  case class CreateProjectInput(
      @GQLDescription("""The description of project.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of project.""")
      name: String,
      @GQLDescription("""The owner ID to create the project under.""")
      ownerId: ID,
      @GQLDescription(
        """A list of repository IDs to create as linked repositories for the project"""
      )
      repositoryIds: Option[List[ID]],
      @GQLDescription("""The name of the GitHub-provided template.""")
      template: Option[ProjectTemplate]
  )
  @GQLDescription("""Autogenerated input type of CreatePullRequest""")
  case class CreatePullRequestInput(
      @GQLDescription(
        """The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository. You cannot update the base branch on a pull request to point
to another repository."""
      )
      baseRefName: String,
      @GQLDescription("""The contents of the pull request.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Indicates whether this pull request should be a draft."""
      )
      draft: Option[Boolean],
      @GQLDescription(
        """The name of the branch where your changes are implemented. For cross-repository pull requests
in the same network, namespace `head_ref_name` with a user like this: `username:branch`."""
      )
      headRefName: String,
      @GQLDescription(
        """Indicates whether maintainers can modify the pull request."""
      )
      maintainerCanModify: Option[Boolean],
      @GQLDescription("""The Node ID of the repository.""")
      repositoryId: ID,
      @GQLDescription("""The title of the pull request.""")
      title: String
  )
  @GQLDescription("""Autogenerated input type of CreateRef""")
  case class CreateRefInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`)."""
      )
      name: String,
      @GQLDescription(
        """The GitObjectID that the new Ref shall target. Must point to a commit."""
      )
      oid: GitObjectID,
      @GQLDescription("""The Node ID of the Repository to create the Ref in.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of CreateRepository""")
  case class CreateRepositoryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""A short description of the new repository.""")
      description: Option[String],
      @GQLDescription(
        """Indicates if the repository should have the issues feature enabled."""
      )
      hasIssuesEnabled: Option[Boolean],
      @GQLDescription(
        """Indicates if the repository should have the wiki feature enabled."""
      )
      hasWikiEnabled: Option[Boolean],
      @GQLDescription("""The URL for a web page about this repository.""")
      homepageUrl: Option[URI],
      @GQLDescription("""The name of the new repository.""")
      name: String,
      @GQLDescription("""The ID of the owner for the new repository.""")
      ownerId: Option[ID],
      @GQLDescription(
        """When an organization is specified as the owner, this ID identifies the team
that should be granted access to the new repository."""
      )
      teamId: Option[ID],
      @GQLDescription(
        """Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure."""
      )
      template: Option[Boolean],
      @GQLDescription("""Indicates the repository's visibility level.""")
      visibility: RepositoryVisibility
  )
  @GQLDescription("""Autogenerated input type of CreateTeamDiscussionComment""")
  case class CreateTeamDiscussionCommentInput(
      @GQLDescription("""The content of the comment.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the discussion to which the comment belongs."""
      )
      discussionId: ID
  )
  @GQLDescription("""Autogenerated input type of CreateTeamDiscussion""")
  case class CreateTeamDiscussionInput(
      @GQLDescription("""The content of the discussion.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """If true, restricts the visiblity of this discussion to team members and
organization admins. If false or not specified, allows any organization member
to view this discussion."""
      )
      `private`: Option[Boolean],
      @GQLDescription("""The ID of the team to which the discussion belongs.""")
      teamId: ID,
      @GQLDescription("""The title of the discussion.""")
      title: String
  )
  @GQLDescription("""Autogenerated input type of DeclineTopicSuggestion""")
  case class DeclineTopicSuggestionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of the suggested topic.""")
      name: String,
      @GQLDescription("""The reason why the suggested topic is declined.""")
      reason: TopicSuggestionDeclineReason,
      @GQLDescription("""The Node ID of the repository.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteBranchProtectionRule""")
  case class DeleteBranchProtectionRuleInput(
      @GQLDescription(
        """The global relay id of the branch protection rule to be deleted."""
      )
      branchProtectionRuleId: ID,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated input type of DeleteDeployment""")
  case class DeleteDeploymentInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the deployment to be deleted.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteIpAllowListEntry""")
  case class DeleteIpAllowListEntryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the IP allow list entry to delete.""")
      ipAllowListEntryId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteIssueComment""")
  case class DeleteIssueCommentInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the comment to delete.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteIssue""")
  case class DeleteIssueInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the issue to delete.""")
      issueId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteProjectCard""")
  case class DeleteProjectCardInput(
      @GQLDescription("""The id of the card to delete.""")
      cardId: ID,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated input type of DeleteProjectColumn""")
  case class DeleteProjectColumnInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The id of the column to delete.""")
      columnId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteProject""")
  case class DeleteProjectInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Project ID to update.""")
      projectId: ID
  )
  @GQLDescription(
    """Autogenerated input type of DeletePullRequestReviewComment"""
  )
  case class DeletePullRequestReviewCommentInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the comment to delete.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of DeletePullRequestReview""")
  case class DeletePullRequestReviewInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the pull request review to delete.""")
      pullRequestReviewId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteRef""")
  case class DeleteRefInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the Ref to be deleted.""")
      refId: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteTeamDiscussionComment""")
  case class DeleteTeamDiscussionCommentInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the comment to delete.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of DeleteTeamDiscussion""")
  case class DeleteTeamDiscussionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The discussion ID to delete.""")
      id: ID
  )
  @GQLDescription("""Ordering options for deployment connections""")
  case class DeploymentOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order deployments by.""")
      field: DeploymentOrderField
  )
  @GQLDescription("""Autogenerated input type of DismissPullRequestReview""")
  case class DismissPullRequestReviewInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The contents of the pull request review dismissal message."""
      )
      message: String,
      @GQLDescription("""The Node ID of the pull request review to modify.""")
      pullRequestReviewId: ID
  )
  @GQLDescription(
    """Specifies a review comment to be left with a Pull Request Review."""
  )
  case class DraftPullRequestReviewComment(
      @GQLDescription("""Body of the comment to leave.""")
      body: String,
      @GQLDescription("""Path to the file being commented on.""")
      path: String,
      @GQLDescription("""Position in the file to leave a comment on.""")
      position: Int
  )
  @GQLDescription(
    """Ordering options for enterprise administrator invitation connections"""
  )
  case class EnterpriseAdministratorInvitationOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription(
        """The field to order enterprise administrator invitations by."""
      )
      field: EnterpriseAdministratorInvitationOrderField
  )
  @GQLDescription("""Ordering options for enterprise member connections.""")
  case class EnterpriseMemberOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order enterprise members by.""")
      field: EnterpriseMemberOrderField
  )
  @GQLDescription(
    """Ordering options for Enterprise Server installation connections."""
  )
  case class EnterpriseServerInstallationOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription(
        """The field to order Enterprise Server installations by."""
      )
      field: EnterpriseServerInstallationOrderField
  )
  @GQLDescription(
    """Ordering options for Enterprise Server user account email connections."""
  )
  case class EnterpriseServerUserAccountEmailOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order emails by.""")
      field: EnterpriseServerUserAccountEmailOrderField
  )
  @GQLDescription(
    """Ordering options for Enterprise Server user account connections."""
  )
  case class EnterpriseServerUserAccountOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order user accounts by.""")
      field: EnterpriseServerUserAccountOrderField
  )
  @GQLDescription(
    """Ordering options for Enterprise Server user accounts upload connections."""
  )
  case class EnterpriseServerUserAccountsUploadOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order user accounts uploads by.""")
      field: EnterpriseServerUserAccountsUploadOrderField
  )
  @GQLDescription("""Autogenerated input type of FollowUser""")
  case class FollowUserInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the user to follow.""")
      userId: ID
  )
  @GQLDescription("""Ordering options for gist connections""")
  case class GistOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order repositories by.""")
      field: GistOrderField
  )
  @GQLDescription("""Autogenerated input type of InviteEnterpriseAdmin""")
  case class InviteEnterpriseAdminInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The email of the person to invite as an administrator."""
      )
      email: Option[String],
      @GQLDescription(
        """The ID of the enterprise to which you want to invite an administrator."""
      )
      enterpriseId: ID,
      @GQLDescription("""The login of a user to invite as an administrator.""")
      invitee: Option[String],
      @GQLDescription("""The role of the administrator.""")
      role: Option[EnterpriseAdministratorRole]
  )
  @GQLDescription("""Ordering options for IP allow list entry connections.""")
  case class IpAllowListEntryOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order IP allow list entries by.""")
      field: IpAllowListEntryOrderField
  )
  @GQLDescription("""Ways in which to filter lists of issues.""")
  case class IssueFilters(
      @GQLDescription(
        """List issues assigned to given name. Pass in `null` for issues with no assigned
user, and `*` for issues assigned to any user."""
      )
      assignee: Option[String],
      @GQLDescription("""List issues created by given name.""")
      createdBy: Option[String],
      @GQLDescription(
        """List issues where the list of label names exist on the issue."""
      )
      labels: Option[List[String]],
      @GQLDescription(
        """List issues where the given name is mentioned in the issue."""
      )
      mentioned: Option[String],
      @GQLDescription(
        """List issues by given milestone argument. If an string representation of an
integer is passed, it should refer to a milestone by its number field. Pass in
`null` for issues with no milestone, and `*` for issues that are assigned to any milestone."""
      )
      milestone: Option[String],
      @GQLDescription(
        """List issues that have been updated at or after the given date."""
      )
      since: Option[DateTime],
      @GQLDescription("""List issues filtered by the list of states given.""")
      states: Option[List[IssueState]],
      @GQLDescription("""List issues subscribed to by viewer.""")
      viewerSubscribed: Option[Boolean]
  )
  @GQLDescription(
    """Ways in which lists of issues can be ordered upon return."""
  )
  case class IssueOrder(
      @GQLDescription(
        """The direction in which to order issues by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order issues by.""")
      field: IssueOrderField
  )
  @GQLDescription(
    """Ways in which lists of labels can be ordered upon return."""
  )
  case class LabelOrder(
      @GQLDescription(
        """The direction in which to order labels by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order labels by.""")
      field: LabelOrderField
  )
  @GQLDescription("""Ordering options for language connections.""")
  case class LanguageOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order languages by.""")
      field: LanguageOrderField
  )
  @GQLDescription("""Autogenerated input type of LinkRepositoryToProject""")
  case class LinkRepositoryToProjectInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the Project to link to a Repository""")
      projectId: ID,
      @GQLDescription("""The ID of the Repository to link to a Project.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of LockLockable""")
  case class LockLockableInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """A reason for why the issue or pull request will be locked."""
      )
      lockReason: Option[LockReason],
      @GQLDescription("""ID of the issue or pull request to be locked.""")
      lockableId: ID
  )
  @GQLDescription(
    """Autogenerated input type of MarkPullRequestReadyForReview"""
  )
  case class MarkPullRequestReadyForReviewInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """ID of the pull request to be marked as ready for review."""
      )
      pullRequestId: ID
  )
  @GQLDescription("""Autogenerated input type of MergeBranch""")
  case class MergeBranchInput(
      @GQLDescription(
        """The name of the base branch that the provided head will be merged into."""
      )
      base: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Message to use for the merge commit. If omitted, a default will be used."""
      )
      commitMessage: Option[String],
      @GQLDescription(
        """The head to merge into the base branch. This can be a branch name or a commit GitObjectID."""
      )
      head: String,
      @GQLDescription(
        """The Node ID of the Repository containing the base branch that will be modified."""
      )
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of MergePullRequest""")
  case class MergePullRequestInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Commit body to use for the merge commit; if omitted, a default message will be used"""
      )
      commitBody: Option[String],
      @GQLDescription(
        """Commit headline to use for the merge commit; if omitted, a default message will be used."""
      )
      commitHeadline: Option[String],
      @GQLDescription(
        """OID that the pull request head ref must match to allow merge; if omitted, no check is performed."""
      )
      expectedHeadOid: Option[GitObjectID],
      @GQLDescription(
        """The merge method to use. If omitted, defaults to 'MERGE'"""
      )
      mergeMethod: Option[PullRequestMergeMethod],
      @GQLDescription("""ID of the pull request to be merged.""")
      pullRequestId: ID
  )
  @GQLDescription("""Ordering options for milestone connections.""")
  case class MilestoneOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order milestones by.""")
      field: MilestoneOrderField
  )
  @GQLDescription("""Autogenerated input type of MoveProjectCard""")
  case class MoveProjectCardInput(
      @GQLDescription(
        """Place the new card after the card with this id. Pass null to place it at the top."""
      )
      afterCardId: Option[ID],
      @GQLDescription("""The id of the card to move.""")
      cardId: ID,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The id of the column to move it into.""")
      columnId: ID
  )
  @GQLDescription("""Autogenerated input type of MoveProjectColumn""")
  case class MoveProjectColumnInput(
      @GQLDescription(
        """Place the new column after the column with this id. Pass null to place it at the front."""
      )
      afterColumnId: Option[ID],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The id of the column to move.""")
      columnId: ID
  )
  @GQLDescription("""Ordering options for organization connections.""")
  case class OrganizationOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order organizations by.""")
      field: OrganizationOrderField
  )
  @GQLDescription(
    """Ways in which lists of projects can be ordered upon return."""
  )
  case class ProjectOrder(
      @GQLDescription(
        """The direction in which to order projects by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order projects by.""")
      field: ProjectOrderField
  )
  @GQLDescription(
    """Ways in which lists of issues can be ordered upon return."""
  )
  case class PullRequestOrder(
      @GQLDescription(
        """The direction in which to order pull requests by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order pull requests by.""")
      field: PullRequestOrderField
  )
  @GQLDescription(
    """Ways in which lists of reactions can be ordered upon return."""
  )
  case class ReactionOrder(
      @GQLDescription(
        """The direction in which to order reactions by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order reactions by.""")
      field: ReactionOrderField
  )
  @GQLDescription(
    """Ways in which lists of git refs can be ordered upon return."""
  )
  case class RefOrder(
      @GQLDescription(
        """The direction in which to order refs by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order refs by.""")
      field: RefOrderField
  )
  @GQLDescription(
    """Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes"""
  )
  case class RegenerateEnterpriseIdentityProviderRecoveryCodesInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set an identity provider."""
      )
      enterpriseId: ID
  )
  @GQLDescription("""Represents a single registry metadatum""")
  case class RegistryPackageMetadatum(
      @GQLDescription("""Name of the metadatum.""")
      name: String,
      @GQLDescription(
        """True, if the metadatum can be updated if it already exists"""
      )
      update: Option[Boolean],
      @GQLDescription("""Value of the metadatum.""")
      value: String
  )
  @GQLDescription(
    """Ways in which lists of releases can be ordered upon return."""
  )
  case class ReleaseOrder(
      @GQLDescription(
        """The direction in which to order releases by the specified field."""
      )
      direction: OrderDirection,
      @GQLDescription("""The field in which to order releases by.""")
      field: ReleaseOrderField
  )
  @GQLDescription(
    """Autogenerated input type of RemoveAssigneesFromAssignable"""
  )
  case class RemoveAssigneesFromAssignableInput(
      @GQLDescription(
        """The id of the assignable object to remove assignees from."""
      )
      assignableId: ID,
      @GQLDescription("""The id of users to remove as assignees.""")
      assigneeIds: List[ID],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String]
  )
  @GQLDescription("""Autogenerated input type of RemoveEnterpriseAdmin""")
  case class RemoveEnterpriseAdminInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The Enterprise ID from which to remove the administrator."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The login of the user to remove as an administrator."""
      )
      login: String
  )
  @GQLDescription(
    """Autogenerated input type of RemoveEnterpriseIdentityProvider"""
  )
  case class RemoveEnterpriseIdentityProviderInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise from which to remove the identity provider."""
      )
      enterpriseId: ID
  )
  @GQLDescription(
    """Autogenerated input type of RemoveEnterpriseOrganization"""
  )
  case class RemoveEnterpriseOrganizationInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise from which the organization should be removed."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The ID of the organization to remove from the enterprise."""
      )
      organizationId: ID
  )
  @GQLDescription("""Autogenerated input type of RemoveLabelsFromLabelable""")
  case class RemoveLabelsFromLabelableInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ids of labels to remove.""")
      labelIds: List[ID],
      @GQLDescription("""The id of the Labelable to remove labels from.""")
      labelableId: ID
  )
  @GQLDescription("""Autogenerated input type of RemoveOutsideCollaborator""")
  case class RemoveOutsideCollaboratorInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the organization to remove the outside collaborator from."""
      )
      organizationId: ID,
      @GQLDescription("""The ID of the outside collaborator to remove.""")
      userId: ID
  )
  @GQLDescription("""Autogenerated input type of RemoveReaction""")
  case class RemoveReactionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of the emoji reaction to remove.""")
      content: ReactionContent,
      @GQLDescription("""The Node ID of the subject to modify.""")
      subjectId: ID
  )
  @GQLDescription("""Autogenerated input type of RemoveStar""")
  case class RemoveStarInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Starrable ID to unstar.""")
      starrableId: ID
  )
  @GQLDescription("""Autogenerated input type of ReopenIssue""")
  case class ReopenIssueInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the issue to be opened.""")
      issueId: ID
  )
  @GQLDescription("""Autogenerated input type of ReopenPullRequest""")
  case class ReopenPullRequestInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the pull request to be reopened.""")
      pullRequestId: ID
  )
  @GQLDescription("""Ordering options for repository invitation connections.""")
  case class RepositoryInvitationOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order repository invitations by.""")
      field: RepositoryInvitationOrderField
  )
  @GQLDescription("""Ordering options for repository connections""")
  case class RepositoryOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order repositories by.""")
      field: RepositoryOrderField
  )
  @GQLDescription("""Autogenerated input type of RequestReviews""")
  case class RequestReviewsInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the pull request to modify.""")
      pullRequestId: ID,
      @GQLDescription("""The Node IDs of the team to request.""")
      teamIds: Option[List[ID]],
      @GQLDescription("""Add users to the set rather than replace.""")
      union: Option[Boolean],
      @GQLDescription("""The Node IDs of the user to request.""")
      userIds: Option[List[ID]]
  )
  @GQLDescription("""Autogenerated input type of ResolveReviewThread""")
  case class ResolveReviewThreadInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the thread to resolve""")
      threadId: ID
  )
  @GQLDescription("""Ordering options for saved reply connections.""")
  case class SavedReplyOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order saved replies by.""")
      field: SavedReplyOrderField
  )
  @GQLDescription("""An advisory identifier to filter results on.""")
  case class SecurityAdvisoryIdentifierFilter(
      @GQLDescription("""The identifier type.""")
      `type`: SecurityAdvisoryIdentifierType,
      @GQLDescription(
        """The identifier string. Supports exact or partial matching."""
      )
      value: String
  )
  @GQLDescription("""Ordering options for security advisory connections""")
  case class SecurityAdvisoryOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order security advisories by.""")
      field: SecurityAdvisoryOrderField
  )
  @GQLDescription("""Ordering options for security vulnerability connections""")
  case class SecurityVulnerabilityOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order security vulnerabilities by.""")
      field: SecurityVulnerabilityOrderField
  )
  @GQLDescription(
    """Autogenerated input type of SetEnterpriseIdentityProvider"""
  )
  case class SetEnterpriseIdentityProviderInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The digest algorithm used to sign SAML requests for the identity provider."""
      )
      digestMethod: SamlDigestAlgorithm,
      @GQLDescription(
        """The ID of the enterprise on which to set an identity provider."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The x509 certificate used by the identity provider to sign assertions and responses."""
      )
      idpCertificate: String,
      @GQLDescription("""The Issuer Entity ID for the SAML identity provider""")
      issuer: Option[String],
      @GQLDescription(
        """The signature algorithm used to sign SAML requests for the identity provider."""
      )
      signatureMethod: SamlSignatureAlgorithm,
      @GQLDescription(
        """The URL endpoint for the identity provider's SAML SSO."""
      )
      ssoUrl: URI
  )
  @GQLDescription("""Ordering options for Sponsors tiers connections.""")
  case class SponsorsTierOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order tiers by.""")
      field: SponsorsTierOrderField
  )
  @GQLDescription("""Ordering options for sponsorship connections.""")
  case class SponsorshipOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order sponsorship by.""")
      field: SponsorshipOrderField
  )
  @GQLDescription("""Ways in which star connections can be ordered.""")
  case class StarOrder(
      @GQLDescription("""The direction in which to order nodes.""")
      direction: OrderDirection,
      @GQLDescription("""The field in which to order nodes by.""")
      field: StarOrderField
  )
  @GQLDescription("""Autogenerated input type of SubmitPullRequestReview""")
  case class SubmitPullRequestReviewInput(
      @GQLDescription("""The text field to set on the Pull Request Review.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The event to send to the Pull Request Review.""")
      event: PullRequestReviewEvent,
      @GQLDescription("""The Pull Request ID to submit any pending reviews.""")
      pullRequestId: Option[ID],
      @GQLDescription("""The Pull Request Review ID to submit.""")
      pullRequestReviewId: Option[ID]
  )
  @GQLDescription(
    """Ways in which team discussion comment connections can be ordered."""
  )
  case class TeamDiscussionCommentOrder(
      @GQLDescription("""The direction in which to order nodes.""")
      direction: OrderDirection,
      @GQLDescription("""The field by which to order nodes.""")
      field: TeamDiscussionCommentOrderField
  )
  @GQLDescription(
    """Ways in which team discussion connections can be ordered."""
  )
  case class TeamDiscussionOrder(
      @GQLDescription("""The direction in which to order nodes.""")
      direction: OrderDirection,
      @GQLDescription("""The field by which to order nodes.""")
      field: TeamDiscussionOrderField
  )
  @GQLDescription("""Ordering options for team member connections""")
  case class TeamMemberOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order team members by.""")
      field: TeamMemberOrderField
  )
  @GQLDescription("""Ways in which team connections can be ordered.""")
  case class TeamOrder(
      @GQLDescription("""The direction in which to order nodes.""")
      direction: OrderDirection,
      @GQLDescription("""The field in which to order nodes by.""")
      field: TeamOrderField
  )
  @GQLDescription("""Ordering options for team repository connections""")
  case class TeamRepositoryOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order repositories by.""")
      field: TeamRepositoryOrderField
  )
  @GQLDescription("""Autogenerated input type of TransferIssue""")
  case class TransferIssueInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the issue to be transferred""")
      issueId: ID,
      @GQLDescription(
        """The Node ID of the repository the issue should be transferred to"""
      )
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of UnarchiveRepository""")
  case class UnarchiveRepositoryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the repository to unarchive.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of UnfollowUser""")
  case class UnfollowUserInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the user to unfollow.""")
      userId: ID
  )
  @GQLDescription("""Autogenerated input type of UnlinkRepositoryFromProject""")
  case class UnlinkRepositoryFromProjectInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the Project linked to the Repository.""")
      projectId: ID,
      @GQLDescription("""The ID of the Repository linked to the Project.""")
      repositoryId: ID
  )
  @GQLDescription("""Autogenerated input type of UnlockLockable""")
  case class UnlockLockableInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""ID of the issue or pull request to be unlocked.""")
      lockableId: ID
  )
  @GQLDescription("""Autogenerated input type of UnmarkIssueAsDuplicate""")
  case class UnmarkIssueAsDuplicateInput(
      @GQLDescription(
        """ID of the issue or pull request currently considered canonical/authoritative/original."""
      )
      canonicalId: ID,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """ID of the issue or pull request currently marked as a duplicate."""
      )
      duplicateId: ID
  )
  @GQLDescription("""Autogenerated input type of UnresolveReviewThread""")
  case class UnresolveReviewThreadInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the thread to unresolve""")
      threadId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateBranchProtectionRule""")
  case class UpdateBranchProtectionRuleInput(
      @GQLDescription(
        """The global relay id of the branch protection rule to be updated."""
      )
      branchProtectionRuleId: ID,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Will new commits pushed to matching branches dismiss pull request review approvals."""
      )
      dismissesStaleReviews: Option[Boolean],
      @GQLDescription("""Can admins overwrite branch protection.""")
      isAdminEnforced: Option[Boolean],
      @GQLDescription(
        """The glob-like pattern used to determine matching branches."""
      )
      pattern: Option[String],
      @GQLDescription(
        """A list of User, Team or App IDs allowed to push to matching branches."""
      )
      pushActorIds: Option[List[ID]],
      @GQLDescription(
        """Number of approving reviews required to update matching branches."""
      )
      requiredApprovingReviewCount: Option[Int],
      @GQLDescription(
        """List of required status check contexts that must pass for commits to be accepted to matching branches."""
      )
      requiredStatusCheckContexts: Option[List[String]],
      @GQLDescription(
        """Are approving reviews required to update matching branches."""
      )
      requiresApprovingReviews: Option[Boolean],
      @GQLDescription(
        """Are reviews from code owners required to update matching branches."""
      )
      requiresCodeOwnerReviews: Option[Boolean],
      @GQLDescription("""Are commits required to be signed.""")
      requiresCommitSignatures: Option[Boolean],
      @GQLDescription(
        """Are status checks required to update matching branches."""
      )
      requiresStatusChecks: Option[Boolean],
      @GQLDescription(
        """Are branches required to be up to date before merging."""
      )
      requiresStrictStatusChecks: Option[Boolean],
      @GQLDescription("""Is pushing to matching branches restricted.""")
      restrictsPushes: Option[Boolean],
      @GQLDescription("""Is dismissal of pull request reviews restricted.""")
      restrictsReviewDismissals: Option[Boolean],
      @GQLDescription(
        """A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches."""
      )
      reviewDismissalActorIds: Option[List[ID]]
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseActionExecutionCapabilitySetting"""
  )
  case class UpdateEnterpriseActionExecutionCapabilitySettingInput(
      @GQLDescription(
        """The value for the action execution capability setting on the enterprise."""
      )
      capability: ActionExecutionCapabilitySetting,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can create repositories setting."""
      )
      enterpriseId: ID
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseAdministratorRole"""
  )
  case class UpdateEnterpriseAdministratorRoleInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the Enterprise which the admin belongs to."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The login of a administrator whose role is being changed."""
      )
      login: String,
      @GQLDescription("""The new role for the Enterprise administrator.""")
      role: EnterpriseAdministratorRole
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting"""
  )
  case class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the allow private repository forking setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the allow private repository forking setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting"""
  )
  case class UpdateEnterpriseDefaultRepositoryPermissionSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the default repository permission setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the default repository permission setting on the enterprise."""
      )
      settingValue: EnterpriseDefaultRepositoryPermissionSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting"""
  )
  case class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can change repository visibility setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can change repository visibility setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting"""
  )
  case class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can create repositories setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """Allow members to create internal repositories. Defaults to current value."""
      )
      membersCanCreateInternalRepositories: Option[Boolean],
      @GQLDescription(
        """Allow members to create private repositories. Defaults to current value."""
      )
      membersCanCreatePrivateRepositories: Option[Boolean],
      @GQLDescription(
        """Allow members to create public repositories. Defaults to current value."""
      )
      membersCanCreatePublicRepositories: Option[Boolean],
      @GQLDescription(
        """When false, allow member organizations to set their own repository creation member privileges."""
      )
      membersCanCreateRepositoriesPolicyEnabled: Option[Boolean],
      @GQLDescription(
        """Value for the members can create repositories setting on the enterprise. This
or the granular public/private/internal allowed fields (but not both) must be provided."""
      )
      settingValue: Option[EnterpriseMembersCanCreateRepositoriesSettingValue]
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting"""
  )
  case class UpdateEnterpriseMembersCanDeleteIssuesSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can delete issues setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can delete issues setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting"""
  )
  case class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can delete repositories setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can delete repositories setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting"""
  )
  case class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can invite collaborators setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can invite collaborators setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting"""
  )
  case class UpdateEnterpriseMembersCanMakePurchasesSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can make purchases setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can make purchases setting on the enterprise."""
      )
      settingValue: EnterpriseMembersCanMakePurchasesSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting"""
  )
  case class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can update protected branches setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can update protected branches setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting"""
  )
  case class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the members can view dependency insights setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the members can view dependency insights setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting"""
  )
  case class UpdateEnterpriseOrganizationProjectsSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the organization projects setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the organization projects setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription("""Autogenerated input type of UpdateEnterpriseProfile""")
  case class UpdateEnterpriseProfileInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The description of the enterprise.""")
      description: Option[String],
      @GQLDescription("""The Enterprise ID to update.""")
      enterpriseId: ID,
      @GQLDescription("""The location of the enterprise.""")
      location: Option[String],
      @GQLDescription("""The name of the enterprise.""")
      name: Option[String],
      @GQLDescription("""The URL of the enterprise's website.""")
      websiteUrl: Option[String]
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting"""
  )
  case class UpdateEnterpriseRepositoryProjectsSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the repository projects setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the repository projects setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting"""
  )
  case class UpdateEnterpriseTeamDiscussionsSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the team discussions setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the team discussions setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledDisabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"""
  )
  case class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the enterprise on which to set the two factor authentication required setting."""
      )
      enterpriseId: ID,
      @GQLDescription(
        """The value for the two factor authentication required setting on the enterprise."""
      )
      settingValue: EnterpriseEnabledSettingValue
  )
  @GQLDescription(
    """Autogenerated input type of UpdateIpAllowListEnabledSetting"""
  )
  case class UpdateIpAllowListEnabledSettingInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """The ID of the owner on which to set the IP allow list enabled setting."""
      )
      ownerId: ID,
      @GQLDescription("""The value for the IP allow list enabled setting.""")
      settingValue: IpAllowListEnabledSettingValue
  )
  @GQLDescription("""Autogenerated input type of UpdateIpAllowListEntry""")
  case class UpdateIpAllowListEntryInput(
      @GQLDescription(
        """An IP address or range of addresses in CIDR notation."""
      )
      allowListValue: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the IP allow list entry to update.""")
      ipAllowListEntryId: ID,
      @GQLDescription(
        """Whether the IP allow list entry is active when an IP allow list is enabled."""
      )
      isActive: Boolean,
      @GQLDescription("""An optional name for the IP allow list entry.""")
      name: Option[String]
  )
  @GQLDescription("""Autogenerated input type of UpdateIssueComment""")
  case class UpdateIssueCommentInput(
      @GQLDescription("""The updated text of the comment.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the IssueComment to modify.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateIssue""")
  case class UpdateIssueInput(
      @GQLDescription("""An array of Node IDs of users for this issue.""")
      assigneeIds: Option[List[ID]],
      @GQLDescription("""The body for the issue description.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the Issue to modify.""")
      id: ID,
      @GQLDescription("""An array of Node IDs of labels for this issue.""")
      labelIds: Option[List[ID]],
      @GQLDescription("""The Node ID of the milestone for this issue.""")
      milestoneId: Option[ID],
      @GQLDescription(
        """An array of Node IDs for projects associated with this issue."""
      )
      projectIds: Option[List[ID]],
      @GQLDescription("""The desired issue state.""")
      state: Option[IssueState],
      @GQLDescription("""The title for the issue.""")
      title: Option[String]
  )
  @GQLDescription("""Autogenerated input type of UpdateProjectCard""")
  case class UpdateProjectCardInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""Whether or not the ProjectCard should be archived""")
      isArchived: Option[Boolean],
      @GQLDescription("""The note of ProjectCard.""")
      note: Option[String],
      @GQLDescription("""The ProjectCard ID to update.""")
      projectCardId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateProjectColumn""")
  case class UpdateProjectColumnInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of project column.""")
      name: String,
      @GQLDescription("""The ProjectColumn ID to update.""")
      projectColumnId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateProject""")
  case class UpdateProjectInput(
      @GQLDescription("""The description of project.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The name of project.""")
      name: Option[String],
      @GQLDescription("""The Project ID to update.""")
      projectId: ID,
      @GQLDescription("""Whether the project is public or not.""")
      public: Option[Boolean],
      @GQLDescription("""Whether the project is open or closed.""")
      state: Option[ProjectState]
  )
  @GQLDescription("""Autogenerated input type of UpdatePullRequest""")
  case class UpdatePullRequestInput(
      @GQLDescription(
        """An array of Node IDs of users for this pull request."""
      )
      assigneeIds: Option[List[ID]],
      @GQLDescription(
        """The name of the branch you want your changes pulled into. This should be an existing branch
on the current repository."""
      )
      baseRefName: Option[String],
      @GQLDescription("""The contents of the pull request.""")
      body: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """An array of Node IDs of labels for this pull request."""
      )
      labelIds: Option[List[ID]],
      @GQLDescription(
        """Indicates whether maintainers can modify the pull request."""
      )
      maintainerCanModify: Option[Boolean],
      @GQLDescription("""The Node ID of the milestone for this pull request.""")
      milestoneId: Option[ID],
      @GQLDescription(
        """An array of Node IDs for projects associated with this pull request."""
      )
      projectIds: Option[List[ID]],
      @GQLDescription("""The Node ID of the pull request.""")
      pullRequestId: ID,
      @GQLDescription("""The target state of the pull request.""")
      state: Option[PullRequestUpdateState],
      @GQLDescription("""The title of the pull request.""")
      title: Option[String]
  )
  @GQLDescription(
    """Autogenerated input type of UpdatePullRequestReviewComment"""
  )
  case class UpdatePullRequestReviewCommentInput(
      @GQLDescription("""The text of the comment.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the comment to modify.""")
      pullRequestReviewCommentId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdatePullRequestReview""")
  case class UpdatePullRequestReviewInput(
      @GQLDescription("""The contents of the pull request review body.""")
      body: String,
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the pull request review to modify.""")
      pullRequestReviewId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateRef""")
  case class UpdateRefInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """Permit updates of branch Refs that are not fast-forwards?"""
      )
      force: Option[Boolean],
      @GQLDescription(
        """The GitObjectID that the Ref shall be updated to target."""
      )
      oid: GitObjectID,
      @GQLDescription("""The Node ID of the Ref to be updated.""")
      refId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateRepository""")
  case class UpdateRepositoryInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription(
        """A new description for the repository. Pass an empty string to erase the existing description."""
      )
      description: Option[String],
      @GQLDescription(
        """Indicates if the repository should have the issues feature enabled."""
      )
      hasIssuesEnabled: Option[Boolean],
      @GQLDescription(
        """Indicates if the repository should have the project boards feature enabled."""
      )
      hasProjectsEnabled: Option[Boolean],
      @GQLDescription(
        """Indicates if the repository should have the wiki feature enabled."""
      )
      hasWikiEnabled: Option[Boolean],
      @GQLDescription(
        """The URL for a web page about this repository. Pass an empty string to erase the existing URL."""
      )
      homepageUrl: Option[URI],
      @GQLDescription("""The new name of the repository.""")
      name: Option[String],
      @GQLDescription("""The ID of the repository to update.""")
      repositoryId: ID,
      @GQLDescription(
        """Whether this repository should be marked as a template such that anyone who
can access it can create new repositories with the same files and directory structure."""
      )
      template: Option[Boolean]
  )
  @GQLDescription("""Autogenerated input type of UpdateSubscription""")
  case class UpdateSubscriptionInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The new state of the subscription.""")
      state: SubscriptionState,
      @GQLDescription("""The Node ID of the subscribable object to modify.""")
      subscribableId: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateTeamDiscussionComment""")
  case class UpdateTeamDiscussionCommentInput(
      @GQLDescription("""The updated text of the comment.""")
      body: String,
      @GQLDescription("""The current version of the body content.""")
      bodyVersion: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The ID of the comment to modify.""")
      id: ID
  )
  @GQLDescription("""Autogenerated input type of UpdateTeamDiscussion""")
  case class UpdateTeamDiscussionInput(
      @GQLDescription("""The updated text of the discussion.""")
      body: Option[String],
      @GQLDescription(
        """The current version of the body content. If provided, this update operation
will be rejected if the given version does not match the latest version on the server."""
      )
      bodyVersion: Option[String],
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the discussion to modify.""")
      id: ID,
      @GQLDescription(
        """If provided, sets the pinned state of the updated discussion."""
      )
      pinned: Option[Boolean],
      @GQLDescription("""The updated title of the discussion.""")
      title: Option[String]
  )
  @GQLDescription("""Autogenerated input type of UpdateTopics""")
  case class UpdateTopicsInput(
      @GQLDescription(
        """A unique identifier for the client performing the mutation."""
      )
      clientMutationId: Option[String],
      @GQLDescription("""The Node ID of the repository.""")
      repositoryId: ID,
      @GQLDescription("""An array of topic names.""")
      topicNames: List[String]
  )
  @GQLDescription("""Ordering options for user status connections.""")
  case class UserStatusOrder(
      @GQLDescription("""The ordering direction.""")
      direction: OrderDirection,
      @GQLDescription("""The field to order user statuses by.""")
      field: UserStatusOrderField
  )
  @GQLDescription("""An audit entry in an organization audit log.""")
  sealed trait OrganizationAuditEntry
      extends scala.Product
      with scala.Serializable

  object OrganizationAuditEntry {
    @GQLDescription(
      """Audit log entry for a members_can_delete_repos.clear event."""
    )
    case class MembersCanDeleteReposClearAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a members_can_delete_repos.disable event."""
    )
    case class MembersCanDeleteReposDisableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a members_can_delete_repos.enable event."""
    )
    case class MembersCanDeleteReposEnableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a oauth_application.create event.""")
    case class OauthApplicationCreateAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The application URL of the OAuth Application.""")
        applicationUrl: Option[URI],
        @GQLDescription("""The callback URL of the OAuth Application.""")
        callbackUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The name of the OAuth Application.""")
        oauthApplicationName: Option[String],
        @GQLDescription("""The HTTP path for the OAuth Application""")
        oauthApplicationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the OAuth Application""")
        oauthApplicationUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The rate limit of the OAuth Application.""")
        rateLimit: Option[Int],
        @GQLDescription("""The state of the OAuth Application.""")
        state: Option[OauthApplicationCreateAuditEntryState],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.add_billing_manager""")
    case class OrgAddBillingManagerAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription(
          """The email address used to invite a billing manager for the organization."""
        )
        invitationEmail: Option[String],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.add_member""")
    case class OrgAddMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription(
          """The permission level of the member added to the organization."""
        )
        permission: Option[OrgAddMemberAuditEntryPermission],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.block_user""")
    case class OrgBlockUserAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The blocked user.""")
        blockedUser: Option[User],
        @GQLDescription("""The username of the blocked user.""")
        blockedUserName: Option[String],
        @GQLDescription("""The HTTP path for the blocked user.""")
        blockedUserResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the blocked user.""")
        blockedUserUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.config.disable_collaborators_only event."""
    )
    case class OrgConfigDisableCollaboratorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.config.enable_collaborators_only event."""
    )
    case class OrgConfigEnableCollaboratorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.create event.""")
    case class OrgCreateAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The billing plan for the Organization.""")
        billingPlan: Option[OrgCreateAuditEntryBillingPlan],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.disable_oauth_app_restrictions event."""
    )
    case class OrgDisableOauthAppRestrictionsAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.disable_saml event.""")
    case class OrgDisableSamlAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The SAML provider's digest algorithm URL.""")
        digestMethodUrl: Option[URI],
        id: ID,
        @GQLDescription("""The SAML provider's issuer URL.""")
        issuerUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The SAML provider's signature algorithm URL.""")
        signatureMethodUrl: Option[URI],
        @GQLDescription("""The SAML provider's single sign-on URL.""")
        singleSignOnUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.disable_two_factor_requirement event."""
    )
    case class OrgDisableTwoFactorRequirementAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.enable_oauth_app_restrictions event."""
    )
    case class OrgEnableOauthAppRestrictionsAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.enable_saml event.""")
    case class OrgEnableSamlAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The SAML provider's digest algorithm URL.""")
        digestMethodUrl: Option[URI],
        id: ID,
        @GQLDescription("""The SAML provider's issuer URL.""")
        issuerUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The SAML provider's signature algorithm URL.""")
        signatureMethodUrl: Option[URI],
        @GQLDescription("""The SAML provider's single sign-on URL.""")
        singleSignOnUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.enable_two_factor_requirement event."""
    )
    case class OrgEnableTwoFactorRequirementAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.invite_member event.""")
    case class OrgInviteMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The email address of the organization invitation.""")
        email: Option[String],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The organization invitation.""")
        organizationInvitation: Option[OrganizationInvitation],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.invite_to_business event.""")
    case class OrgInviteToBusinessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.oauth_app_access_approved event."""
    )
    case class OrgOauthAppAccessApprovedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The name of the OAuth Application.""")
        oauthApplicationName: Option[String],
        @GQLDescription("""The HTTP path for the OAuth Application""")
        oauthApplicationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the OAuth Application""")
        oauthApplicationUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.oauth_app_access_denied event."""
    )
    case class OrgOauthAppAccessDeniedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The name of the OAuth Application.""")
        oauthApplicationName: Option[String],
        @GQLDescription("""The HTTP path for the OAuth Application""")
        oauthApplicationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the OAuth Application""")
        oauthApplicationUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.oauth_app_access_requested event."""
    )
    case class OrgOauthAppAccessRequestedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The name of the OAuth Application.""")
        oauthApplicationName: Option[String],
        @GQLDescription("""The HTTP path for the OAuth Application""")
        oauthApplicationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the OAuth Application""")
        oauthApplicationUrl: Option[URI],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.remove_billing_manager event."""
    )
    case class OrgRemoveBillingManagerAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The reason for the billing manager being removed.""")
        reason: Option[OrgRemoveBillingManagerAuditEntryReason],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.remove_member event.""")
    case class OrgRemoveMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription(
          """The types of membership the member has with the organization."""
        )
        membershipTypes: Option[List[OrgRemoveMemberAuditEntryMembershipType]],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The reason for the member being removed.""")
        reason: Option[OrgRemoveMemberAuditEntryReason],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.remove_outside_collaborator event."""
    )
    case class OrgRemoveOutsideCollaboratorAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription(
          """The types of membership the outside collaborator has with the organization."""
        )
        membershipTypes: Option[
          List[OrgRemoveOutsideCollaboratorAuditEntryMembershipType]
        ],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription(
          """The reason for the outside collaborator being removed from the Organization."""
        )
        reason: Option[OrgRemoveOutsideCollaboratorAuditEntryReason],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.restore_member event.""")
    case class OrgRestoreMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription(
          """The number of custom email routings for the restored member."""
        )
        restoredCustomEmailRoutingsCount: Option[Int],
        @GQLDescription(
          """The number of issue assignemnts for the restored member."""
        )
        restoredIssueAssignmentsCount: Option[Int],
        @GQLDescription("""Restored organization membership objects.""")
        restoredMemberships: Option[List[OrgRestoreMemberAuditEntryMembership]],
        @GQLDescription("""The number of restored memberships.""")
        restoredMembershipsCount: Option[Int],
        @GQLDescription(
          """The number of repositories of the restored member."""
        )
        restoredRepositoriesCount: Option[Int],
        @GQLDescription(
          """The number of starred repositories for the restored member."""
        )
        restoredRepositoryStarsCount: Option[Int],
        @GQLDescription(
          """The number of watched repositories for the restored member."""
        )
        restoredRepositoryWatchesCount: Option[Int],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.unblock_user""")
    case class OrgUnblockUserAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The user being unblocked by the organization.""")
        blockedUser: Option[User],
        @GQLDescription("""The username of the blocked user.""")
        blockedUserName: Option[String],
        @GQLDescription("""The HTTP path for the blocked user.""")
        blockedUserResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the blocked user.""")
        blockedUserUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.update_default_repository_permission"""
    )
    case class OrgUpdateDefaultRepositoryPermissionAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription(
          """The new default repository permission level for the organization."""
        )
        permission: Option[
          OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
        ],
        @GQLDescription(
          """The former default repository permission level for the organization."""
        )
        permissionWas: Option[
          OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
        ],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a org.update_member event.""")
    case class OrgUpdateMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription(
          """The new member permission level for the organization."""
        )
        permission: Option[OrgUpdateMemberAuditEntryPermission],
        @GQLDescription(
          """The former member permission level for the organization."""
        )
        permissionWas: Option[OrgUpdateMemberAuditEntryPermission],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.update_member_repository_creation_permission event."""
    )
    case class OrgUpdateMemberRepositoryCreationPermissionAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription(
          """Can members create repositories in the organization."""
        )
        canCreateRepositories: Option[Boolean],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription(
          """The permission for visibility level of repositories for this organization."""
        )
        visibility: Option[
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
        ]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a org.update_member_repository_invitation_permission event."""
    )
    case class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription(
          """Can outside collaborators be invited to repositories in the organization."""
        )
        canInviteOutsideCollaboratorsToRepositories: Option[Boolean],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a private_repository_forking.disable event."""
    )
    case class PrivateRepositoryForkingDisableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a private_repository_forking.enable event."""
    )
    case class PrivateRepositoryForkingEnableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.access event.""")
    case class RepoAccessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoAccessAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.add_member event.""")
    case class RepoAddMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoAddMemberAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.add_topic event.""")
    case class RepoAddTopicAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The name of the topic added to the repository""")
        topic: Option[Topic],
        @GQLDescription("""The name of the topic added to the repository""")
        topicName: Option[String],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.archived event.""")
    case class RepoArchivedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoArchivedAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.change_merge_setting event."""
    )
    case class RepoChangeMergeSettingAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription(
          """Whether the change was to enable (true) or disable (false) the merge type"""
        )
        isEnabled: Option[Boolean],
        @GQLDescription("""The merge method affected by the change""")
        mergeType: Option[RepoChangeMergeSettingAuditEntryMergeType],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.disable_anonymous_git_access event."""
    )
    case class RepoConfigDisableAnonymousGitAccessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.disable_collaborators_only event."""
    )
    case class RepoConfigDisableCollaboratorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.disable_contributors_only event."""
    )
    case class RepoConfigDisableContributorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.disable_sockpuppet_disallowed event."""
    )
    case class RepoConfigDisableSockpuppetDisallowedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.enable_anonymous_git_access event."""
    )
    case class RepoConfigEnableAnonymousGitAccessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.enable_collaborators_only event."""
    )
    case class RepoConfigEnableCollaboratorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.enable_contributors_only event."""
    )
    case class RepoConfigEnableContributorsOnlyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.enable_sockpuppet_disallowed event."""
    )
    case class RepoConfigEnableSockpuppetDisallowedAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.lock_anonymous_git_access event."""
    )
    case class RepoConfigLockAnonymousGitAccessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repo.config.unlock_anonymous_git_access event."""
    )
    case class RepoConfigUnlockAnonymousGitAccessAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.create event.""")
    case class RepoCreateAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription(
          """The name of the parent repository for this forked repository."""
        )
        forkParentName: Option[String],
        @GQLDescription("""The name of the root repository for this netork.""")
        forkSourceName: Option[String],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoCreateAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.destroy event.""")
    case class RepoDestroyAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoDestroyAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.remove_member event.""")
    case class RepoRemoveMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI],
        @GQLDescription("""The visibility of the repository""")
        visibility: Option[RepoRemoveMemberAuditEntryVisibility]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a repo.remove_topic event.""")
    case class RepoRemoveTopicAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The name of the topic added to the repository""")
        topic: Option[Topic],
        @GQLDescription("""The name of the topic added to the repository""")
        topicName: Option[String],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repository_visibility_change.disable event."""
    )
    case class RepositoryVisibilityChangeDisableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription(
      """Audit log entry for a repository_visibility_change.enable event."""
    )
    case class RepositoryVisibilityChangeEnableAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        @GQLDescription("""The HTTP path for this enterprise.""")
        enterpriseResourcePath: Option[URI],
        @GQLDescription("""The slug of the enterprise.""")
        enterpriseSlug: Option[String],
        @GQLDescription("""The HTTP URL for this enterprise.""")
        enterpriseUrl: Option[URI],
        id: ID,
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a team.add_member event.""")
    case class TeamAddMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""Whether the team was mapped to an LDAP Group.""")
        isLdapMapped: Option[Boolean],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a team.add_repository event.""")
    case class TeamAddRepositoryAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""Whether the team was mapped to an LDAP Group.""")
        isLdapMapped: Option[Boolean],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a team.change_parent_team event.""")
    case class TeamChangeParentTeamAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""Whether the team was mapped to an LDAP Group.""")
        isLdapMapped: Option[Boolean],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The new parent team.""")
        parentTeam: Option[Team],
        @GQLDescription("""The name of the new parent team""")
        parentTeamName: Option[String],
        @GQLDescription("""The name of the former parent team""")
        parentTeamNameWas: Option[String],
        @GQLDescription("""The HTTP path for the parent team""")
        parentTeamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the parent team""")
        parentTeamUrl: Option[URI],
        @GQLDescription("""The former parent team.""")
        parentTeamWas: Option[Team],
        @GQLDescription("""The HTTP path for the previous parent team""")
        parentTeamWasResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the previous parent team""")
        parentTeamWasUrl: Option[URI],
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a team.remove_member event.""")
    case class TeamRemoveMemberAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""Whether the team was mapped to an LDAP Group.""")
        isLdapMapped: Option[Boolean],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
    @GQLDescription("""Audit log entry for a team.remove_repository event.""")
    case class TeamRemoveRepositoryAuditEntry(
        @GQLDescription("""The action name""")
        action: String,
        @GQLDescription("""The user who initiated the action""")
        actor: Option[AuditEntryActor],
        @GQLDescription("""The IP address of the actor""")
        actorIp: Option[String],
        @GQLDescription("""A readable representation of the actor's location""")
        actorLocation: Option[ActorLocation],
        @GQLDescription("""The username of the user who initiated the action""")
        actorLogin: Option[String],
        @GQLDescription("""The HTTP path for the actor.""")
        actorResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the actor.""")
        actorUrl: Option[URI],
        @GQLDescription("""The time the action was initiated""")
        createdAt: PreciseDateTime,
        id: ID,
        @GQLDescription("""Whether the team was mapped to an LDAP Group.""")
        isLdapMapped: Option[Boolean],
        @GQLDescription("""The corresponding operation type for the action""")
        operationType: Option[OperationType],
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI],
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI],
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI],
        @GQLDescription("""The user affected by the action""")
        user: Option[User],
        @GQLDescription(
          """For actions involving two users, the actor is the initiator and the user is the affected user."""
        )
        userLogin: Option[String],
        @GQLDescription("""The HTTP path for the user.""")
        userResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the user.""")
        userUrl: Option[URI]
    ) extends OrganizationAuditEntry
  }

  @GQLDescription(
    """Represents either a pull request the viewer can access or a restricted contribution."""
  )
  sealed trait CreatedPullRequestOrRestrictedContribution
      extends scala.Product
      with scala.Serializable

  object CreatedPullRequestOrRestrictedContribution {
    @GQLDescription(
      """Represents the contribution a user made on GitHub by opening a pull request."""
    )
    case class CreatedPullRequestContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The pull request that was opened.""")
        pullRequest: PullRequest,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedPullRequestOrRestrictedContribution
    @GQLDescription(
      """Represents a private contribution a user made on GitHub."""
    )
    case class RestrictedContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedPullRequestOrRestrictedContribution
  }

  @GQLDescription("""The results of a search.""")
  sealed trait SearchResultItem extends scala.Product with scala.Serializable

  object SearchResultItem {
    @GQLDescription("""A GitHub App.""")
    case class App(
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The description of the app.""")
        description: Option[String],
        id: ID,
        @GQLDescription(
          """The hex color code, without the leading '#', for the logo background."""
        )
        logoBackgroundColor: String,
        @GQLDescription("""A URL pointing to the app's logo.""")
        logoUrl: AppLogoUrlArgs => URI,
        @GQLDescription("""The name of the app.""")
        name: String,
        @GQLDescription(
          """A slug based on the name of the app for use in URLs."""
        )
        slug: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The URL to the app's homepage.""")
        url: URI
    ) extends SearchResultItem
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends SearchResultItem
    @GQLDescription("""A listing in the GitHub integration marketplace.""")
    case class MarketplaceListing(
        @GQLDescription("""The GitHub App this listing represents.""")
        app: Option[App],
        @GQLDescription("""URL to the listing owner's company site.""")
        companyUrl: Option[URI],
        @GQLDescription(
          """The HTTP path for configuring access to the listing's integration or OAuth app"""
        )
        configurationResourcePath: URI,
        @GQLDescription(
          """The HTTP URL for configuring access to the listing's integration or OAuth app"""
        )
        configurationUrl: URI,
        @GQLDescription("""URL to the listing's documentation.""")
        documentationUrl: Option[URI],
        @GQLDescription("""The listing's detailed description.""")
        extendedDescription: Option[String],
        @GQLDescription(
          """The listing's detailed description rendered to HTML."""
        )
        extendedDescriptionHTML: HTML,
        @GQLDescription("""The listing's introductory description.""")
        fullDescription: String,
        @GQLDescription(
          """The listing's introductory description rendered to HTML."""
        )
        fullDescriptionHTML: HTML,
        @GQLDescription(
          """Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace."""
        )
        hasApprovalBeenRequested: Boolean,
        @GQLDescription(
          """Does this listing have any plans with a free trial?"""
        )
        hasPublishedFreeTrialPlans: Boolean,
        @GQLDescription("""Does this listing have a terms of service link?""")
        hasTermsOfService: Boolean,
        @GQLDescription(
          """A technical description of how this app works with GitHub."""
        )
        howItWorks: Option[String],
        @GQLDescription(
          """The listing's technical description rendered to HTML."""
        )
        howItWorksHTML: HTML,
        id: ID,
        @GQLDescription(
          """URL to install the product to the viewer's account or organization."""
        )
        installationUrl: Option[URI],
        @GQLDescription(
          """Whether this listing's app has been installed for the current viewer"""
        )
        installedForViewer: Boolean,
        @GQLDescription(
          """Whether this listing has been approved for display in the Marketplace."""
        )
        isApproved: Boolean,
        @GQLDescription(
          """Whether this listing has been removed from the Marketplace."""
        )
        isArchived: Boolean,
        @GQLDescription(
          """Whether this listing has been removed from the Marketplace."""
        )
        isDelisted: Boolean,
        @GQLDescription(
          """Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace."""
        )
        isDraft: Boolean,
        @GQLDescription(
          """Whether the product this listing represents is available as part of a paid plan."""
        )
        isPaid: Boolean,
        @GQLDescription(
          """Whether this listing has been approved for display in the Marketplace."""
        )
        isPublic: Boolean,
        @GQLDescription(
          """Whether this listing has been rejected by GitHub for display in the Marketplace."""
        )
        isRejected: Boolean,
        @GQLDescription(
          """Whether this listing has been approved for unverified display in the Marketplace."""
        )
        isUnverified: Boolean,
        @GQLDescription(
          """Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace."""
        )
        isUnverifiedPending: Boolean,
        @GQLDescription(
          """Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace."""
        )
        isVerificationPendingFromDraft: Boolean,
        @GQLDescription(
          """Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace."""
        )
        isVerificationPendingFromUnverified: Boolean,
        @GQLDescription(
          """Whether this listing has been approved for verified display in the Marketplace."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """The hex color code, without the leading '#', for the logo background."""
        )
        logoBackgroundColor: String,
        @GQLDescription("""URL for the listing's logo image.""")
        logoUrl: MarketplaceListingLogoUrlArgs => Option[URI],
        @GQLDescription("""The listing's full name.""")
        name: String,
        @GQLDescription(
          """The listing's very short description without a trailing period or ampersands."""
        )
        normalizedShortDescription: String,
        @GQLDescription("""URL to the listing's detailed pricing.""")
        pricingUrl: Option[URI],
        @GQLDescription("""The category that best describes the listing.""")
        primaryCategory: MarketplaceCategory,
        @GQLDescription(
          """URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL."""
        )
        privacyPolicyUrl: URI,
        @GQLDescription("""The HTTP path for the Marketplace listing.""")
        resourcePath: URI,
        @GQLDescription("""The URLs for the listing's screenshots.""")
        screenshotUrls: List[Option[String]],
        @GQLDescription("""An alternate category that describes the listing.""")
        secondaryCategory: Option[MarketplaceCategory],
        @GQLDescription("""The listing's very short description.""")
        shortDescription: String,
        @GQLDescription("""The short name of the listing used in its URL.""")
        slug: String,
        @GQLDescription("""URL to the listing's status page.""")
        statusUrl: Option[URI],
        @GQLDescription(
          """An email address for support for this listing's app."""
        )
        supportEmail: Option[String],
        @GQLDescription(
          """Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL."""
        )
        supportUrl: URI,
        @GQLDescription("""URL to the listing's terms of service.""")
        termsOfServiceUrl: Option[URI],
        @GQLDescription("""The HTTP URL for the Marketplace listing.""")
        url: URI,
        @GQLDescription(
          """Can the current viewer add plans for this Marketplace listing."""
        )
        viewerCanAddPlans: Boolean,
        @GQLDescription(
          """Can the current viewer approve this Marketplace listing."""
        )
        viewerCanApprove: Boolean,
        @GQLDescription(
          """Can the current viewer delist this Marketplace listing."""
        )
        viewerCanDelist: Boolean,
        @GQLDescription(
          """Can the current viewer edit this Marketplace listing."""
        )
        viewerCanEdit: Boolean,
        @GQLDescription(
          """Can the current viewer edit the primary and secondary category of this
Marketplace listing."""
        )
        viewerCanEditCategories: Boolean,
        @GQLDescription(
          """Can the current viewer edit the plans for this Marketplace listing."""
        )
        viewerCanEditPlans: Boolean,
        @GQLDescription(
          """Can the current viewer return this Marketplace listing to draft state
so it becomes editable again."""
        )
        viewerCanRedraft: Boolean,
        @GQLDescription(
          """Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely."""
        )
        viewerCanReject: Boolean,
        @GQLDescription(
          """Can the current viewer request this listing be reviewed for display in
the Marketplace as verified."""
        )
        viewerCanRequestApproval: Boolean,
        @GQLDescription(
          """Indicates whether the current user has an active subscription to this Marketplace listing."""
        )
        viewerHasPurchased: Boolean,
        @GQLDescription(
          """Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns."""
        )
        viewerHasPurchasedForAllOrganizations: Boolean,
        @GQLDescription(
          """Does the current viewer role allow them to administer this Marketplace listing."""
        )
        viewerIsListingAdmin: Boolean
    ) extends SearchResultItem
    @GQLDescription(
      """An account on GitHub, with one or more owners, that has repositories, members and teams."""
    )
    case class Organization(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: OrganizationAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""Audit log entries of the organization""")
        auditLog: OrganizationAuditLogArgs => OrganizationAuditEntryConnection,
        @GQLDescription(
          """A URL pointing to the organization's public avatar."""
        )
        avatarUrl: OrganizationAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The organization's public profile description.""")
        description: Option[String],
        @GQLDescription(
          """The organization's public profile description rendered to HTML."""
        )
        descriptionHTML: Option[String],
        @GQLDescription("""The organization's public email.""")
        email: Option[String],
        id: ID,
        @GQLDescription(
          """Whether the organization has verified its profile email and website."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The organization's public profile location.""")
        location: Option[String],
        @GQLDescription("""The organization's login name.""")
        login: String,
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: OrganizationMemberStatusesArgs => UserStatusConnection,
        @GQLDescription(
          """A list of users who are members of this organization."""
        )
        membersWithRole: OrganizationMembersWithRoleArgs => OrganizationMemberConnection,
        @GQLDescription("""The organization's public profile name.""")
        name: Option[String],
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The billing email for the organization.""")
        organizationBillingEmail: Option[String],
        @GQLDescription(
          """A list of users who have been invited to join this organization."""
        )
        pendingMembers: OrganizationPendingMembersArgs => UserConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: OrganizationPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: OrganizationPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: OrganizationPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: OrganizationProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: OrganizationProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing organization's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: OrganizationRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: OrganizationRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: OrganizationRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: OrganizationRepositoryArgs => Option[Repository],
        @GQLDescription(
          """When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication."""
        )
        requiresTwoFactorAuthentication: Option[Boolean],
        @GQLDescription("""The HTTP path for this organization.""")
        resourcePath: URI,
        @GQLDescription("""The Organization's SAML identity providers""")
        samlIdentityProvider: Option[OrganizationIdentityProvider],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: OrganizationSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: OrganizationSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Find an organization's team by its slug.""")
        team: OrganizationTeamArgs => Option[Team],
        @GQLDescription("""A list of teams in this organization.""")
        teams: OrganizationTeamsArgs => TeamConnection,
        @GQLDescription("""The HTTP path listing organization's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this organization.""")
        url: URI,
        @GQLDescription("""Organization is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Viewer can create repositories on this organization"""
        )
        viewerCanCreateRepositories: Boolean,
        @GQLDescription("""Viewer can create teams on this organization.""")
        viewerCanCreateTeams: Boolean,
        @GQLDescription("""Viewer is an active member of this organization.""")
        viewerIsAMember: Boolean,
        @GQLDescription("""The organization's public profile URL.""")
        websiteUrl: Option[URI]
    ) extends SearchResultItem
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends SearchResultItem
    @GQLDescription("""A repository contains the content for a project.""")
    case class Repository(
        @GQLDescription(
          """A list of users that can be assigned to issues in this repository."""
        )
        assignableUsers: RepositoryAssignableUsersArgs => UserConnection,
        @GQLDescription(
          """A list of branch protection rules for this repository."""
        )
        branchProtectionRules: RepositoryBranchProtectionRulesArgs => BranchProtectionRuleConnection,
        @GQLDescription("""Returns the code of conduct for this repository""")
        codeOfConduct: Option[CodeOfConduct],
        @GQLDescription(
          """A list of collaborators associated with the repository."""
        )
        collaborators: RepositoryCollaboratorsArgs => Option[
          RepositoryCollaboratorConnection
        ],
        @GQLDescription(
          """A list of commit comments associated with the repository."""
        )
        commitComments: RepositoryCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """The Ref associated with the repository's default branch."""
        )
        defaultBranchRef: Option[Ref],
        @GQLDescription(
          """Whether or not branches are automatically deleted when merged in this repository."""
        )
        deleteBranchOnMerge: Boolean,
        @GQLDescription(
          """A list of deploy keys that are on this repository."""
        )
        deployKeys: RepositoryDeployKeysArgs => DeployKeyConnection,
        @GQLDescription("""Deployments associated with the repository""")
        deployments: RepositoryDeploymentsArgs => DeploymentConnection,
        @GQLDescription("""The description of the repository.""")
        description: Option[String],
        @GQLDescription(
          """The description of the repository rendered to HTML."""
        )
        descriptionHTML: HTML,
        @GQLDescription(
          """The number of kilobytes this repository occupies on disk."""
        )
        diskUsage: Option[Int],
        @GQLDescription(
          """Returns how many forks there are of this repository in the whole network."""
        )
        forkCount: Int,
        @GQLDescription("""A list of direct forked repositories.""")
        forks: RepositoryForksArgs => RepositoryConnection,
        @GQLDescription("""The funding links for this repository""")
        fundingLinks: List[FundingLink],
        @GQLDescription(
          """Indicates if the repository has issues feature enabled."""
        )
        hasIssuesEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has the Projects feature enabled."""
        )
        hasProjectsEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has wiki feature enabled."""
        )
        hasWikiEnabled: Boolean,
        @GQLDescription("""The repository's URL.""")
        homepageUrl: Option[URI],
        id: ID,
        @GQLDescription("""Indicates if the repository is unmaintained.""")
        isArchived: Boolean,
        @GQLDescription("""Returns whether or not this repository disabled.""")
        isDisabled: Boolean,
        @GQLDescription("""Identifies if the repository is a fork.""")
        isFork: Boolean,
        @GQLDescription(
          """Indicates if the repository has been locked or not."""
        )
        isLocked: Boolean,
        @GQLDescription("""Identifies if the repository is a mirror.""")
        isMirror: Boolean,
        @GQLDescription("""Identifies if the repository is private.""")
        isPrivate: Boolean,
        @GQLDescription(
          """Identifies if the repository is a template that can be used to generate new repositories."""
        )
        isTemplate: Boolean,
        @GQLDescription(
          """Returns a single issue from the current repository by number."""
        )
        issue: RepositoryIssueArgs => Option[Issue],
        @GQLDescription(
          """Returns a single issue-like object from the current repository by number."""
        )
        issueOrPullRequest: RepositoryIssueOrPullRequestArgs => Option[
          IssueOrPullRequest
        ],
        @GQLDescription(
          """A list of issues that have been opened in the repository."""
        )
        issues: RepositoryIssuesArgs => IssueConnection,
        @GQLDescription("""Returns a single label by name""")
        label: RepositoryLabelArgs => Option[Label],
        @GQLDescription("""A list of labels associated with the repository.""")
        labels: RepositoryLabelsArgs => Option[LabelConnection],
        @GQLDescription(
          """A list containing a breakdown of the language composition of the repository."""
        )
        languages: RepositoryLanguagesArgs => Option[LanguageConnection],
        @GQLDescription("""The license associated with the repository""")
        licenseInfo: Option[License],
        @GQLDescription("""The reason the repository has been locked.""")
        lockReason: Option[RepositoryLockReason],
        @GQLDescription(
          """A list of Users that can be mentioned in the context of the repository."""
        )
        mentionableUsers: RepositoryMentionableUsersArgs => UserConnection,
        @GQLDescription(
          """Whether or not PRs are merged with a merge commit on this repository."""
        )
        mergeCommitAllowed: Boolean,
        @GQLDescription(
          """Returns a single milestone from the current repository by number."""
        )
        milestone: RepositoryMilestoneArgs => Option[Milestone],
        @GQLDescription(
          """A list of milestones associated with the repository."""
        )
        milestones: RepositoryMilestonesArgs => Option[MilestoneConnection],
        @GQLDescription("""The repository's original mirror URL.""")
        mirrorUrl: Option[URI],
        @GQLDescription("""The name of the repository.""")
        name: String,
        @GQLDescription("""The repository's name with owner.""")
        nameWithOwner: String,
        @GQLDescription("""A Git object in the repository""")
        `object`: RepositoryObjectArgs => Option[GitObject],
        @GQLDescription(
          """The image used to represent this repository in Open Graph data."""
        )
        openGraphImageUrl: URI,
        @GQLDescription("""The User owner of the repository.""")
        owner: RepositoryOwner,
        @GQLDescription("""The repository parent, if this is a fork.""")
        parent: Option[Repository],
        @GQLDescription("""The primary language of the repository's code.""")
        primaryLanguage: Option[Language],
        @GQLDescription("""Find project by number.""")
        project: RepositoryProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: RepositoryProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing the repository's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing the repository's projects""")
        projectsUrl: URI,
        @GQLDescription(
          """Returns a single pull request from the current repository by number."""
        )
        pullRequest: RepositoryPullRequestArgs => Option[PullRequest],
        @GQLDescription(
          """A list of pull requests that have been opened in the repository."""
        )
        pullRequests: RepositoryPullRequestsArgs => PullRequestConnection,
        @GQLDescription(
          """Identifies when the repository was last pushed to."""
        )
        pushedAt: Option[DateTime],
        @GQLDescription(
          """Whether or not rebase-merging is enabled on this repository."""
        )
        rebaseMergeAllowed: Boolean,
        @GQLDescription("""Fetch a given ref from the repository""")
        ref: RepositoryRefArgs => Option[Ref],
        @GQLDescription("""Fetch a list of refs from the repository""")
        refs: RepositoryRefsArgs => Option[RefConnection],
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: RepositoryRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: RepositoryRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""Lookup a single release given various criteria.""")
        release: RepositoryReleaseArgs => Option[Release],
        @GQLDescription(
          """List of releases which are dependent on this repository."""
        )
        releases: RepositoryReleasesArgs => ReleaseConnection,
        @GQLDescription(
          """A list of applied repository-topic associations for this repository."""
        )
        repositoryTopics: RepositoryRepositoryTopicsArgs => RepositoryTopicConnection,
        @GQLDescription("""The HTTP path for this repository""")
        resourcePath: URI,
        @GQLDescription(
          """A description of the repository, rendered to HTML without any links in it."""
        )
        shortDescriptionHTML: RepositoryShortDescriptionHTMLArgs => HTML,
        @GQLDescription(
          """Whether or not squash-merging is enabled on this repository."""
        )
        squashMergeAllowed: Boolean,
        @GQLDescription("""The SSH URL to clone this repository""")
        sshUrl: GitSSHRemote,
        @GQLDescription("""A list of users who have starred this starrable.""")
        stargazers: RepositoryStargazersArgs => StargazerConnection,
        @GQLDescription(
          """Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit."""
        )
        submodules: RepositorySubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Temporary authentication token for cloning this repository."""
        )
        tempCloneToken: Option[String],
        @GQLDescription(
          """The repository from which this repository was generated, if any."""
        )
        templateRepository: Option[Repository],
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this repository""")
        url: URI,
        @GQLDescription(
          """Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar."""
        )
        usesCustomOpenGraphImage: Boolean,
        @GQLDescription(
          """Indicates whether the viewer has admin permissions on this repository."""
        )
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Indicates whether the viewer can update the topics of this repository."""
        )
        viewerCanUpdateTopics: Boolean,
        @GQLDescription(
          """Returns a boolean indicating whether the viewing user has starred this starrable."""
        )
        viewerHasStarred: Boolean,
        @GQLDescription(
          """The users permission level on the repository. Will return null if authenticated as an GitHub App."""
        )
        viewerPermission: Option[RepositoryPermission],
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """A list of vulnerability alerts that are on this repository."""
        )
        vulnerabilityAlerts: RepositoryVulnerabilityAlertsArgs => Option[
          RepositoryVulnerabilityAlertConnection
        ],
        @GQLDescription("""A list of users watching the repository.""")
        watchers: RepositoryWatchersArgs => UserConnection
    ) extends SearchResultItem
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends SearchResultItem
  }

  @GQLDescription(
    """Types of memberships that can be restored for an Organization member."""
  )
  sealed trait OrgRestoreMemberAuditEntryMembership
      extends scala.Product
      with scala.Serializable

  object OrgRestoreMemberAuditEntryMembership {
    @GQLDescription(
      """Metadata for an organization membership for org.restore_member actions"""
    )
    case class OrgRestoreMemberMembershipOrganizationAuditEntryData(
        @GQLDescription("""The Organization associated with the Audit Entry.""")
        organization: Option[Organization],
        @GQLDescription("""The name of the Organization.""")
        organizationName: Option[String],
        @GQLDescription("""The HTTP path for the organization""")
        organizationResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the organization""")
        organizationUrl: Option[URI]
    ) extends OrgRestoreMemberAuditEntryMembership
    @GQLDescription(
      """Metadata for a repository membership for org.restore_member actions"""
    )
    case class OrgRestoreMemberMembershipRepositoryAuditEntryData(
        @GQLDescription("""The repository associated with the action""")
        repository: Option[Repository],
        @GQLDescription("""The name of the repository""")
        repositoryName: Option[String],
        @GQLDescription("""The HTTP path for the repository""")
        repositoryResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for the repository""")
        repositoryUrl: Option[URI]
    ) extends OrgRestoreMemberAuditEntryMembership
    @GQLDescription(
      """Metadata for a team membership for org.restore_member actions"""
    )
    case class OrgRestoreMemberMembershipTeamAuditEntryData(
        @GQLDescription("""The team associated with the action""")
        team: Option[Team],
        @GQLDescription("""The name of the team""")
        teamName: Option[String],
        @GQLDescription("""The HTTP path for this team""")
        teamResourcePath: Option[URI],
        @GQLDescription("""The HTTP URL for this team""")
        teamUrl: Option[URI]
    ) extends OrgRestoreMemberAuditEntryMembership
  }

  @GQLDescription("""Types that can initiate an audit log event.""")
  sealed trait AuditEntryActor extends scala.Product with scala.Serializable

  object AuditEntryActor {
    @GQLDescription(
      """A special type of user which takes actions on behalf of GitHub Apps."""
    )
    case class Bot(
        @GQLDescription("""A URL pointing to the GitHub App's public avatar.""")
        avatarUrl: BotAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID,
        @GQLDescription("""The username of the actor.""")
        login: String,
        @GQLDescription("""The HTTP path for this bot""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this bot""")
        url: URI
    ) extends AuditEntryActor
    @GQLDescription(
      """An account on GitHub, with one or more owners, that has repositories, members and teams."""
    )
    case class Organization(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: OrganizationAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""Audit log entries of the organization""")
        auditLog: OrganizationAuditLogArgs => OrganizationAuditEntryConnection,
        @GQLDescription(
          """A URL pointing to the organization's public avatar."""
        )
        avatarUrl: OrganizationAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The organization's public profile description.""")
        description: Option[String],
        @GQLDescription(
          """The organization's public profile description rendered to HTML."""
        )
        descriptionHTML: Option[String],
        @GQLDescription("""The organization's public email.""")
        email: Option[String],
        id: ID,
        @GQLDescription(
          """Whether the organization has verified its profile email and website."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The organization's public profile location.""")
        location: Option[String],
        @GQLDescription("""The organization's login name.""")
        login: String,
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: OrganizationMemberStatusesArgs => UserStatusConnection,
        @GQLDescription(
          """A list of users who are members of this organization."""
        )
        membersWithRole: OrganizationMembersWithRoleArgs => OrganizationMemberConnection,
        @GQLDescription("""The organization's public profile name.""")
        name: Option[String],
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The billing email for the organization.""")
        organizationBillingEmail: Option[String],
        @GQLDescription(
          """A list of users who have been invited to join this organization."""
        )
        pendingMembers: OrganizationPendingMembersArgs => UserConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: OrganizationPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: OrganizationPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: OrganizationPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: OrganizationProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: OrganizationProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing organization's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: OrganizationRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: OrganizationRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: OrganizationRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: OrganizationRepositoryArgs => Option[Repository],
        @GQLDescription(
          """When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication."""
        )
        requiresTwoFactorAuthentication: Option[Boolean],
        @GQLDescription("""The HTTP path for this organization.""")
        resourcePath: URI,
        @GQLDescription("""The Organization's SAML identity providers""")
        samlIdentityProvider: Option[OrganizationIdentityProvider],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: OrganizationSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: OrganizationSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Find an organization's team by its slug.""")
        team: OrganizationTeamArgs => Option[Team],
        @GQLDescription("""A list of teams in this organization.""")
        teams: OrganizationTeamsArgs => TeamConnection,
        @GQLDescription("""The HTTP path listing organization's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this organization.""")
        url: URI,
        @GQLDescription("""Organization is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Viewer can create repositories on this organization"""
        )
        viewerCanCreateRepositories: Boolean,
        @GQLDescription("""Viewer can create teams on this organization.""")
        viewerCanCreateTeams: Boolean,
        @GQLDescription("""Viewer is an active member of this organization.""")
        viewerIsAMember: Boolean,
        @GQLDescription("""The organization's public profile URL.""")
        websiteUrl: Option[URI]
    ) extends AuditEntryActor
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends AuditEntryActor
  }

  @GQLDescription("""Types that can be inside a Milestone.""")
  sealed trait MilestoneItem extends scala.Product with scala.Serializable

  object MilestoneItem {
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends MilestoneItem
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends MilestoneItem
  }

  @GQLDescription("""Types that can be pinned to a profile page.""")
  sealed trait PinnableItem extends scala.Product with scala.Serializable

  object PinnableItem {
    @GQLDescription("""A Gist.""")
    case class Gist(
        @GQLDescription("""A list of comments associated with the gist""")
        comments: GistCommentsArgs => GistCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The gist description.""")
        description: Option[String],
        @GQLDescription("""The files in this gist.""")
        files: GistFilesArgs => Option[List[Option[GistFile]]],
        @GQLDescription("""A list of forks associated with the gist""")
        forks: GistForksArgs => GistConnection,
        id: ID,
        @GQLDescription("""Identifies if the gist is a fork.""")
        isFork: Boolean,
        @GQLDescription("""Whether the gist is public or not.""")
        isPublic: Boolean,
        @GQLDescription("""The gist name.""")
        name: String,
        @GQLDescription("""The gist owner.""")
        owner: Option[RepositoryOwner],
        @GQLDescription("""Identifies when the gist was last pushed to.""")
        pushedAt: Option[DateTime],
        @GQLDescription("""The HTML path to this resource.""")
        resourcePath: URI,
        @GQLDescription("""A list of users who have starred this starrable.""")
        stargazers: GistStargazersArgs => StargazerConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this Gist.""")
        url: URI,
        @GQLDescription(
          """Returns a boolean indicating whether the viewing user has starred this starrable."""
        )
        viewerHasStarred: Boolean
    ) extends PinnableItem
    @GQLDescription("""A repository contains the content for a project.""")
    case class Repository(
        @GQLDescription(
          """A list of users that can be assigned to issues in this repository."""
        )
        assignableUsers: RepositoryAssignableUsersArgs => UserConnection,
        @GQLDescription(
          """A list of branch protection rules for this repository."""
        )
        branchProtectionRules: RepositoryBranchProtectionRulesArgs => BranchProtectionRuleConnection,
        @GQLDescription("""Returns the code of conduct for this repository""")
        codeOfConduct: Option[CodeOfConduct],
        @GQLDescription(
          """A list of collaborators associated with the repository."""
        )
        collaborators: RepositoryCollaboratorsArgs => Option[
          RepositoryCollaboratorConnection
        ],
        @GQLDescription(
          """A list of commit comments associated with the repository."""
        )
        commitComments: RepositoryCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """The Ref associated with the repository's default branch."""
        )
        defaultBranchRef: Option[Ref],
        @GQLDescription(
          """Whether or not branches are automatically deleted when merged in this repository."""
        )
        deleteBranchOnMerge: Boolean,
        @GQLDescription(
          """A list of deploy keys that are on this repository."""
        )
        deployKeys: RepositoryDeployKeysArgs => DeployKeyConnection,
        @GQLDescription("""Deployments associated with the repository""")
        deployments: RepositoryDeploymentsArgs => DeploymentConnection,
        @GQLDescription("""The description of the repository.""")
        description: Option[String],
        @GQLDescription(
          """The description of the repository rendered to HTML."""
        )
        descriptionHTML: HTML,
        @GQLDescription(
          """The number of kilobytes this repository occupies on disk."""
        )
        diskUsage: Option[Int],
        @GQLDescription(
          """Returns how many forks there are of this repository in the whole network."""
        )
        forkCount: Int,
        @GQLDescription("""A list of direct forked repositories.""")
        forks: RepositoryForksArgs => RepositoryConnection,
        @GQLDescription("""The funding links for this repository""")
        fundingLinks: List[FundingLink],
        @GQLDescription(
          """Indicates if the repository has issues feature enabled."""
        )
        hasIssuesEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has the Projects feature enabled."""
        )
        hasProjectsEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has wiki feature enabled."""
        )
        hasWikiEnabled: Boolean,
        @GQLDescription("""The repository's URL.""")
        homepageUrl: Option[URI],
        id: ID,
        @GQLDescription("""Indicates if the repository is unmaintained.""")
        isArchived: Boolean,
        @GQLDescription("""Returns whether or not this repository disabled.""")
        isDisabled: Boolean,
        @GQLDescription("""Identifies if the repository is a fork.""")
        isFork: Boolean,
        @GQLDescription(
          """Indicates if the repository has been locked or not."""
        )
        isLocked: Boolean,
        @GQLDescription("""Identifies if the repository is a mirror.""")
        isMirror: Boolean,
        @GQLDescription("""Identifies if the repository is private.""")
        isPrivate: Boolean,
        @GQLDescription(
          """Identifies if the repository is a template that can be used to generate new repositories."""
        )
        isTemplate: Boolean,
        @GQLDescription(
          """Returns a single issue from the current repository by number."""
        )
        issue: RepositoryIssueArgs => Option[Issue],
        @GQLDescription(
          """Returns a single issue-like object from the current repository by number."""
        )
        issueOrPullRequest: RepositoryIssueOrPullRequestArgs => Option[
          IssueOrPullRequest
        ],
        @GQLDescription(
          """A list of issues that have been opened in the repository."""
        )
        issues: RepositoryIssuesArgs => IssueConnection,
        @GQLDescription("""Returns a single label by name""")
        label: RepositoryLabelArgs => Option[Label],
        @GQLDescription("""A list of labels associated with the repository.""")
        labels: RepositoryLabelsArgs => Option[LabelConnection],
        @GQLDescription(
          """A list containing a breakdown of the language composition of the repository."""
        )
        languages: RepositoryLanguagesArgs => Option[LanguageConnection],
        @GQLDescription("""The license associated with the repository""")
        licenseInfo: Option[License],
        @GQLDescription("""The reason the repository has been locked.""")
        lockReason: Option[RepositoryLockReason],
        @GQLDescription(
          """A list of Users that can be mentioned in the context of the repository."""
        )
        mentionableUsers: RepositoryMentionableUsersArgs => UserConnection,
        @GQLDescription(
          """Whether or not PRs are merged with a merge commit on this repository."""
        )
        mergeCommitAllowed: Boolean,
        @GQLDescription(
          """Returns a single milestone from the current repository by number."""
        )
        milestone: RepositoryMilestoneArgs => Option[Milestone],
        @GQLDescription(
          """A list of milestones associated with the repository."""
        )
        milestones: RepositoryMilestonesArgs => Option[MilestoneConnection],
        @GQLDescription("""The repository's original mirror URL.""")
        mirrorUrl: Option[URI],
        @GQLDescription("""The name of the repository.""")
        name: String,
        @GQLDescription("""The repository's name with owner.""")
        nameWithOwner: String,
        @GQLDescription("""A Git object in the repository""")
        `object`: RepositoryObjectArgs => Option[GitObject],
        @GQLDescription(
          """The image used to represent this repository in Open Graph data."""
        )
        openGraphImageUrl: URI,
        @GQLDescription("""The User owner of the repository.""")
        owner: RepositoryOwner,
        @GQLDescription("""The repository parent, if this is a fork.""")
        parent: Option[Repository],
        @GQLDescription("""The primary language of the repository's code.""")
        primaryLanguage: Option[Language],
        @GQLDescription("""Find project by number.""")
        project: RepositoryProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: RepositoryProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing the repository's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing the repository's projects""")
        projectsUrl: URI,
        @GQLDescription(
          """Returns a single pull request from the current repository by number."""
        )
        pullRequest: RepositoryPullRequestArgs => Option[PullRequest],
        @GQLDescription(
          """A list of pull requests that have been opened in the repository."""
        )
        pullRequests: RepositoryPullRequestsArgs => PullRequestConnection,
        @GQLDescription(
          """Identifies when the repository was last pushed to."""
        )
        pushedAt: Option[DateTime],
        @GQLDescription(
          """Whether or not rebase-merging is enabled on this repository."""
        )
        rebaseMergeAllowed: Boolean,
        @GQLDescription("""Fetch a given ref from the repository""")
        ref: RepositoryRefArgs => Option[Ref],
        @GQLDescription("""Fetch a list of refs from the repository""")
        refs: RepositoryRefsArgs => Option[RefConnection],
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: RepositoryRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: RepositoryRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""Lookup a single release given various criteria.""")
        release: RepositoryReleaseArgs => Option[Release],
        @GQLDescription(
          """List of releases which are dependent on this repository."""
        )
        releases: RepositoryReleasesArgs => ReleaseConnection,
        @GQLDescription(
          """A list of applied repository-topic associations for this repository."""
        )
        repositoryTopics: RepositoryRepositoryTopicsArgs => RepositoryTopicConnection,
        @GQLDescription("""The HTTP path for this repository""")
        resourcePath: URI,
        @GQLDescription(
          """A description of the repository, rendered to HTML without any links in it."""
        )
        shortDescriptionHTML: RepositoryShortDescriptionHTMLArgs => HTML,
        @GQLDescription(
          """Whether or not squash-merging is enabled on this repository."""
        )
        squashMergeAllowed: Boolean,
        @GQLDescription("""The SSH URL to clone this repository""")
        sshUrl: GitSSHRemote,
        @GQLDescription("""A list of users who have starred this starrable.""")
        stargazers: RepositoryStargazersArgs => StargazerConnection,
        @GQLDescription(
          """Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit."""
        )
        submodules: RepositorySubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Temporary authentication token for cloning this repository."""
        )
        tempCloneToken: Option[String],
        @GQLDescription(
          """The repository from which this repository was generated, if any."""
        )
        templateRepository: Option[Repository],
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this repository""")
        url: URI,
        @GQLDescription(
          """Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar."""
        )
        usesCustomOpenGraphImage: Boolean,
        @GQLDescription(
          """Indicates whether the viewer has admin permissions on this repository."""
        )
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Indicates whether the viewer can update the topics of this repository."""
        )
        viewerCanUpdateTopics: Boolean,
        @GQLDescription(
          """Returns a boolean indicating whether the viewing user has starred this starrable."""
        )
        viewerHasStarred: Boolean,
        @GQLDescription(
          """The users permission level on the repository. Will return null if authenticated as an GitHub App."""
        )
        viewerPermission: Option[RepositoryPermission],
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """A list of vulnerability alerts that are on this repository."""
        )
        vulnerabilityAlerts: RepositoryVulnerabilityAlertsArgs => Option[
          RepositoryVulnerabilityAlertConnection
        ],
        @GQLDescription("""A list of users watching the repository.""")
        watchers: RepositoryWatchersArgs => UserConnection
    ) extends PinnableItem
  }

  @GQLDescription("""Types that can be requested reviewers.""")
  sealed trait RequestedReviewer extends scala.Product with scala.Serializable

  object RequestedReviewer {
    @GQLDescription(
      """A placeholder user for attribution of imported data on GitHub."""
    )
    case class Mannequin(
        @GQLDescription("""A URL pointing to the GitHub App's public avatar.""")
        avatarUrl: MannequinAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The mannequin's email on the source instance.""")
        email: Option[String],
        id: ID,
        @GQLDescription("""The username of the actor.""")
        login: String,
        @GQLDescription("""The HTML path to this resource.""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The URL to this resource.""")
        url: URI
    ) extends RequestedReviewer
    @GQLDescription("""A team of users in an organization.""")
    case class Team(
        @GQLDescription("""A list of teams that are ancestors of this team.""")
        ancestors: TeamAncestorsArgs => TeamConnection,
        @GQLDescription("""A URL pointing to the team's avatar.""")
        avatarUrl: TeamAvatarUrlArgs => Option[URI],
        @GQLDescription("""List of child teams belonging to this team""")
        childTeams: TeamChildTeamsArgs => TeamConnection,
        @GQLDescription(
          """The slug corresponding to the organization and team."""
        )
        combinedSlug: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The description of the team.""")
        description: Option[String],
        @GQLDescription("""Find a team discussion by its number.""")
        discussion: TeamDiscussionArgs => Option[TeamDiscussion],
        @GQLDescription("""A list of team discussions.""")
        discussions: TeamDiscussionsArgs => TeamDiscussionConnection,
        @GQLDescription("""The HTTP path for team discussions""")
        discussionsResourcePath: URI,
        @GQLDescription("""The HTTP URL for team discussions""")
        discussionsUrl: URI,
        @GQLDescription("""The HTTP path for editing this team""")
        editTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL for editing this team""")
        editTeamUrl: URI,
        id: ID,
        @GQLDescription(
          """A list of pending invitations for users to this team"""
        )
        invitations: TeamInvitationsArgs => Option[
          OrganizationInvitationConnection
        ],
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: TeamMemberStatusesArgs => UserStatusConnection,
        @GQLDescription("""A list of users who are members of this team.""")
        members: TeamMembersArgs => TeamMemberConnection,
        @GQLDescription("""The HTTP path for the team' members""")
        membersResourcePath: URI,
        @GQLDescription("""The HTTP URL for the team' members""")
        membersUrl: URI,
        @GQLDescription("""The name of the team.""")
        name: String,
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The organization that owns this team.""")
        organization: Organization,
        @GQLDescription("""The parent team of the team.""")
        parentTeam: Option[Team],
        @GQLDescription("""The level of privacy the team has.""")
        privacy: TeamPrivacy,
        @GQLDescription("""A list of repositories this team has access to.""")
        repositories: TeamRepositoriesArgs => TeamRepositoryConnection,
        @GQLDescription("""The HTTP path for this team's repositories""")
        repositoriesResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's repositories""")
        repositoriesUrl: URI,
        @GQLDescription("""The HTTP path for this team""")
        resourcePath: URI,
        @GQLDescription("""The slug corresponding to the team.""")
        slug: String,
        @GQLDescription("""The HTTP path for this team's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this team""")
        url: URI,
        @GQLDescription("""Team is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends RequestedReviewer
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends RequestedReviewer
  }

  @GQLDescription("""The object which triggered a `ClosedEvent`.""")
  sealed trait Closer extends scala.Product with scala.Serializable

  object Closer {
    @GQLDescription("""Represents a Git commit.""")
    case class Commit(
        @GQLDescription("""An abbreviated version of the Git object ID""")
        abbreviatedOid: String,
        @GQLDescription("""The number of additions in this commit.""")
        additions: Int,
        @GQLDescription("""The pull requests associated with a commit""")
        associatedPullRequests: CommitAssociatedPullRequestsArgs => Option[
          PullRequestConnection
        ],
        @GQLDescription("""Authorship details of the commit.""")
        author: Option[GitActor],
        @GQLDescription("""Check if the committer and the author match.""")
        authoredByCommitter: Boolean,
        @GQLDescription("""The datetime when this commit was authored.""")
        authoredDate: DateTime,
        @GQLDescription("""Fetches `git blame` information.""")
        blame: CommitBlameArgs => Blame,
        @GQLDescription("""The number of changed files in this commit.""")
        changedFiles: Int,
        @GQLDescription("""Comments made on the commit.""")
        comments: CommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The HTTP path for this Git object""")
        commitResourcePath: URI,
        @GQLDescription("""The HTTP URL for this Git object""")
        commitUrl: URI,
        @GQLDescription("""The datetime when this commit was committed.""")
        committedDate: DateTime,
        @GQLDescription("""Check if commited via GitHub web UI.""")
        committedViaWeb: Boolean,
        @GQLDescription("""Committership details of the commit.""")
        committer: Option[GitActor],
        @GQLDescription("""The number of deletions in this commit.""")
        deletions: Int,
        @GQLDescription("""The deployments associated with a commit.""")
        deployments: CommitDeploymentsArgs => Option[DeploymentConnection],
        @GQLDescription(
          """The linear commit history starting from (and including) this commit, in the same order as `git log`."""
        )
        history: CommitHistoryArgs => CommitHistoryConnection,
        id: ID,
        @GQLDescription("""The Git commit message""")
        message: String,
        @GQLDescription("""The Git commit message body""")
        messageBody: String,
        @GQLDescription("""The commit message body rendered to HTML.""")
        messageBodyHTML: HTML,
        @GQLDescription("""The Git commit message headline""")
        messageHeadline: String,
        @GQLDescription("""The commit message headline rendered to HTML.""")
        messageHeadlineHTML: HTML,
        @GQLDescription("""The Git object ID""")
        oid: GitObjectID,
        @GQLDescription("""The parents of a commit.""")
        parents: CommitParentsArgs => CommitConnection,
        @GQLDescription("""The datetime when this commit was pushed.""")
        pushedDate: Option[DateTime],
        @GQLDescription("""The Repository this commit belongs to""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this commit""")
        resourcePath: URI,
        @GQLDescription("""Commit signing information, if present.""")
        signature: Option[GitSignature],
        @GQLDescription("""Status information for this commit""")
        status: Option[Status],
        @GQLDescription(
          """Check and Status rollup information for this commit."""
        )
        statusCheckRollup: Option[StatusCheckRollup],
        @GQLDescription(
          """Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file."""
        )
        submodules: CommitSubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        tarballUrl: URI,
        @GQLDescription("""Commit's root Tree""")
        tree: Tree,
        @GQLDescription("""The HTTP path for the tree of this commit""")
        treeResourcePath: URI,
        @GQLDescription("""The HTTP URL for the tree of this commit""")
        treeUrl: URI,
        @GQLDescription("""The HTTP URL for this commit""")
        url: URI,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        zipballUrl: URI
    ) extends Closer
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends Closer
  }

  @GQLDescription(
    """Represents either a repository the viewer can access or a restricted contribution."""
  )
  sealed trait CreatedRepositoryOrRestrictedContribution
      extends scala.Product
      with scala.Serializable

  object CreatedRepositoryOrRestrictedContribution {
    @GQLDescription(
      """Represents the contribution a user made on GitHub by creating a repository."""
    )
    case class CreatedRepositoryContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The repository that was created.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedRepositoryOrRestrictedContribution
    @GQLDescription(
      """Represents a private contribution a user made on GitHub."""
    )
    case class RestrictedContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedRepositoryOrRestrictedContribution
  }

  @GQLDescription("""Types that can be inside a StatusCheckRollup context.""")
  sealed trait StatusCheckRollupContext
      extends scala.Product
      with scala.Serializable

  object StatusCheckRollupContext {
    @GQLDescription("""Represents an individual commit status context""")
    case class StatusContext(
        @GQLDescription(
          """The avatar of the OAuth application or the user that created the status"""
        )
        avatarUrl: StatusContextAvatarUrlArgs => Option[URI],
        @GQLDescription("""This commit this status context is attached to.""")
        commit: Option[Commit],
        @GQLDescription("""The name of this status context.""")
        context: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The actor who created this status context.""")
        creator: Option[Actor],
        @GQLDescription("""The description for this status context.""")
        description: Option[String],
        id: ID,
        @GQLDescription("""The state of this status context.""")
        state: StatusState,
        @GQLDescription("""The URL for this status context.""")
        targetUrl: Option[URI]
    ) extends StatusCheckRollupContext
  }

  @GQLDescription("""An item in a pull request timeline""")
  sealed trait PullRequestTimelineItems
      extends scala.Product
      with scala.Serializable

  object PullRequestTimelineItems {
    @GQLDescription(
      """Represents a 'added_to_project' event on a given issue or pull request."""
    )
    case class AddedToProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case class AssignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was assigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the user who was assigned.""")
        user: Option[User]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'base_ref_changed' event on a given issue or pull request."""
    )
    case class BaseRefChangedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'base_ref_force_pushed' event on a given pull request."""
    )
    case class BaseRefForcePushedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the after commit SHA for the 'base_ref_force_pushed' event."""
        )
        afterCommit: Option[Commit],
        @GQLDescription(
          """Identifies the before commit SHA for the 'base_ref_force_pushed' event."""
        )
        beforeCommit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the fully qualified ref name for the 'base_ref_force_pushed' event."""
        )
        ref: Option[Ref]
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case class ClosedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was closed.""")
        closable: Closable,
        @GQLDescription(
          """Object which triggered the creation of this event."""
        )
        closer: Option[Closer],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The HTTP path for this closed event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this closed event.""")
        url: URI
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'comment_deleted' event on a given issue or pull request."""
    )
    case class CommentDeletedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'connected' event on a given issue or pull request."""
    )
    case class ConnectedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription("""Issue or pull request which was connected.""")
        subject: ReferencedSubject
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'converted_note_to_issue' event on a given issue or pull request."""
    )
    case class ConvertedNoteToIssueEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case class CrossReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies when the reference was made.""")
        referencedAt: DateTime,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription(
          """Issue or pull request to which the reference was made."""
        )
        target: ReferencedSubject,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription(
          """Checks if the target will be closed when the source is merged."""
        )
        willCloseTarget: Boolean
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case class DemilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'demilestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'deployed' event on a given pull request."""
    )
    case class DeployedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """The deployment associated with the 'deployed' event."""
        )
        deployment: Deployment,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription("""The ref associated with the 'deployed' event.""")
        ref: Option[Ref]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'deployment_environment_changed' event on a given pull request."""
    )
    case class DeploymentEnvironmentChangedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """The deployment status that updated the deployment environment."""
        )
        deploymentStatus: DeploymentStatus,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'disconnected' event on a given issue or pull request."""
    )
    case class DisconnectedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Issue or pull request from which the issue was disconnected."""
        )
        source: ReferencedSubject,
        @GQLDescription("""Issue or pull request which was disconnected.""")
        subject: ReferencedSubject
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'head_ref_deleted' event on a given pull request."""
    )
    case class HeadRefDeletedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the Ref associated with the `head_ref_deleted` event."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the Ref associated with the `head_ref_deleted` event."""
        )
        headRefName: String,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'head_ref_force_pushed' event on a given pull request."""
    )
    case class HeadRefForcePushedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the after commit SHA for the 'head_ref_force_pushed' event."""
        )
        afterCommit: Option[Commit],
        @GQLDescription(
          """Identifies the before commit SHA for the 'head_ref_force_pushed' event."""
        )
        beforeCommit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the fully qualified ref name for the 'head_ref_force_pushed' event."""
        )
        ref: Option[Ref]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'head_ref_restored' event on a given pull request."""
    )
    case class HeadRefRestoredEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a comment on an Issue.""")
    case class IssueComment(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription(
          """Returns whether or not a comment has been minimized."""
        )
        isMinimized: Boolean,
        @GQLDescription("""Identifies the issue associated with the comment.""")
        issue: Issue,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""Returns why the comment was minimized.""")
        minimizedReason: Option[String],
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Returns the pull request associated with the comment, if this comment was made on a
pull request."""
        )
        pullRequest: Option[PullRequest],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueCommentReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue comment""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue comment""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueCommentUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription(
          """Check if the current viewer can minimize this object."""
        )
        viewerCanMinimize: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case class LabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'labeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case class LockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Reason that the conversation was locked (optional)."""
        )
        lockReason: Option[LockReason],
        @GQLDescription("""Object that was locked.""")
        lockable: Lockable
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'marked_as_duplicate' event on a given issue or pull request."""
    )
    case class MarkedAsDuplicateEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'mentioned' event on a given issue or pull request."""
    )
    case class MentionedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a 'merged' event on a given pull request.""")
    case class MergedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the `merge` event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the Ref associated with the `merge` event."""
        )
        mergeRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the Ref associated with the `merge` event."""
        )
        mergeRefName: String,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription("""The HTTP path for this merged event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this merged event.""")
        url: URI
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case class MilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'milestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'moved_columns_in_project' event on a given issue or pull request."""
    )
    case class MovedColumnsInProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'pinned' event on a given issue or pull request."""
    )
    case class PinnedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a Git commit part of a pull request.""")
    case class PullRequestCommit(
        @GQLDescription("""The Git commit object""")
        commit: Commit,
        id: ID,
        @GQLDescription("""The pull request this commit belongs to""")
        pullRequest: PullRequest,
        @GQLDescription("""The HTTP path for this pull request commit""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this pull request commit""")
        url: URI
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a commit comment thread part of a pull request."""
    )
    case class PullRequestCommitCommentThread(
        @GQLDescription("""The comments that exist in this thread.""")
        comments: PullRequestCommitCommentThreadCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The commit the comments were made on.""")
        commit: Commit,
        id: ID,
        @GQLDescription("""The file the comments were made on.""")
        path: Option[String],
        @GQLDescription(
          """The position in the diff for the commit that the comment was made on."""
        )
        position: Option[Int],
        @GQLDescription(
          """The pull request this commit comment thread belongs to"""
        )
        pullRequest: PullRequest,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository
    ) extends PullRequestTimelineItems
    @GQLDescription("""A review object for a given pull request.""")
    case class PullRequestReview(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the pull request review body.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body of this review rendered as plain text.""")
        bodyText: String,
        @GQLDescription(
          """A list of review comments for the current pull request review."""
        )
        comments: PullRequestReviewCommentsArgs => PullRequestReviewCommentConnection,
        @GQLDescription(
          """Identifies the commit associated with this pull request review."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription(
          """A list of teams that this review was made on behalf of."""
        )
        onBehalfOf: PullRequestReviewOnBehalfOfArgs => TeamConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Identifies the pull request associated with this pull request review."""
        )
        pullRequest: PullRequest,
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReviewReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription(
          """The HTTP path permalink for this PullRequestReview."""
        )
        resourcePath: URI,
        @GQLDescription(
          """Identifies the current state of the pull request review."""
        )
        state: PullRequestReviewState,
        @GQLDescription(
          """Identifies when the Pull Request Review was submitted"""
        )
        submittedAt: Option[DateTime],
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription(
          """The HTTP URL permalink for this PullRequestReview."""
        )
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestReviewUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends PullRequestTimelineItems
    @GQLDescription("""A threaded list of comments for a given pull request.""")
    case class PullRequestReviewThread(
        @GQLDescription(
          """A list of pull request comments associated with the thread."""
        )
        comments: PullRequestReviewThreadCommentsArgs => PullRequestReviewCommentConnection,
        id: ID,
        @GQLDescription("""Whether this thread has been resolved""")
        isResolved: Boolean,
        @GQLDescription(
          """Identifies the pull request associated with this thread."""
        )
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the repository associated with this thread."""
        )
        repository: Repository,
        @GQLDescription("""The user who resolved this thread""")
        resolvedBy: Option[User],
        @GQLDescription("""Whether or not the viewer can resolve this thread""")
        viewerCanResolve: Boolean,
        @GQLDescription(
          """Whether or not the viewer can unresolve this thread"""
        )
        viewerCanUnresolve: Boolean
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits."""
    )
    case class PullRequestRevisionMarker(
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The last commit the viewer has seen.""")
        lastSeenCommit: Commit,
        @GQLDescription("""The pull request to which the marker belongs.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'ready_for_review' event on a given pull request."""
    )
    case class ReadyForReviewEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription("""The HTTP path for this ready for review event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this ready for review event.""")
        url: URI
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case class ReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the 'referenced' event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the repository associated with the 'referenced' event."""
        )
        commitRepository: Repository,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."""
        )
        isDirectReference: Boolean,
        @GQLDescription("""Object referenced by event.""")
        subject: ReferencedSubject
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'removed_from_project' event on a given issue or pull request."""
    )
    case class RemovedFromProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case class RenamedTitleEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the current title of the issue or pull request."""
        )
        currentTitle: String,
        id: ID,
        @GQLDescription(
          """Identifies the previous title of the issue or pull request."""
        )
        previousTitle: String,
        @GQLDescription("""Subject that was renamed.""")
        subject: RenamedTitleSubject
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case class ReopenedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was reopened.""")
        closable: Closable,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'review_dismissed' event on a given issue or pull request."""
    )
    case class ReviewDismissedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """Identifies the optional message associated with the 'review_dismissed' event."""
        )
        dismissalMessage: Option[String],
        @GQLDescription(
          """Identifies the optional message associated with the event, rendered to HTML."""
        )
        dismissalMessageHTML: Option[String],
        id: ID,
        @GQLDescription(
          """Identifies the previous state of the review with the 'review_dismissed' event."""
        )
        previousReviewState: PullRequestReviewState,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the commit which caused the review to become stale."""
        )
        pullRequestCommit: Option[PullRequestCommit],
        @GQLDescription("""The HTTP path for this review dismissed event.""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the review associated with the 'review_dismissed' event."""
        )
        review: Option[PullRequestReview],
        @GQLDescription("""The HTTP URL for this review dismissed event.""")
        url: URI
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'review_request_removed' event on a given pull request."""
    )
    case class ReviewRequestRemovedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the reviewer whose review request was removed."""
        )
        requestedReviewer: Option[RequestedReviewer]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'review_requested' event on a given pull request."""
    )
    case class ReviewRequestedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the reviewer whose review was requested."""
        )
        requestedReviewer: Option[RequestedReviewer]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case class SubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents a 'transferred' event on a given issue or pull request."""
    )
    case class TransferredEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The repository this came from""")
        fromRepository: Option[Repository],
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case class UnassignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was unassigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the subject (user) who was unassigned.""")
        user: Option[User]
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case class UnlabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'unlabeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case class UnlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object that was unlocked.""")
        lockable: Lockable
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unmarked_as_duplicate' event on a given issue or pull request."""
    )
    case class UnmarkedAsDuplicateEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unpinned' event on a given issue or pull request."""
    )
    case class UnpinnedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends PullRequestTimelineItems
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case class UnsubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends PullRequestTimelineItems
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case class UserBlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Number of days that the user was blocked for.""")
        blockDuration: UserBlockDuration,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The user who was blocked.""")
        subject: Option[User]
    ) extends PullRequestTimelineItems
  }

  @GQLDescription("""An item in an issue timeline""")
  sealed trait IssueTimelineItems extends scala.Product with scala.Serializable

  object IssueTimelineItems {
    @GQLDescription(
      """Represents a 'added_to_project' event on a given issue or pull request."""
    )
    case class AddedToProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case class AssignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was assigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the user who was assigned.""")
        user: Option[User]
    ) extends IssueTimelineItems
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case class ClosedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was closed.""")
        closable: Closable,
        @GQLDescription(
          """Object which triggered the creation of this event."""
        )
        closer: Option[Closer],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The HTTP path for this closed event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this closed event.""")
        url: URI
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'comment_deleted' event on a given issue or pull request."""
    )
    case class CommentDeletedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'connected' event on a given issue or pull request."""
    )
    case class ConnectedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription("""Issue or pull request which was connected.""")
        subject: ReferencedSubject
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'converted_note_to_issue' event on a given issue or pull request."""
    )
    case class ConvertedNoteToIssueEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case class CrossReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies when the reference was made.""")
        referencedAt: DateTime,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription(
          """Issue or pull request to which the reference was made."""
        )
        target: ReferencedSubject,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription(
          """Checks if the target will be closed when the source is merged."""
        )
        willCloseTarget: Boolean
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case class DemilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'demilestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'disconnected' event on a given issue or pull request."""
    )
    case class DisconnectedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Issue or pull request from which the issue was disconnected."""
        )
        source: ReferencedSubject,
        @GQLDescription("""Issue or pull request which was disconnected.""")
        subject: ReferencedSubject
    ) extends IssueTimelineItems
    @GQLDescription("""Represents a comment on an Issue.""")
    case class IssueComment(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription(
          """Returns whether or not a comment has been minimized."""
        )
        isMinimized: Boolean,
        @GQLDescription("""Identifies the issue associated with the comment.""")
        issue: Issue,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""Returns why the comment was minimized.""")
        minimizedReason: Option[String],
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Returns the pull request associated with the comment, if this comment was made on a
pull request."""
        )
        pullRequest: Option[PullRequest],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueCommentReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue comment""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue comment""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueCommentUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription(
          """Check if the current viewer can minimize this object."""
        )
        viewerCanMinimize: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case class LabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'labeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case class LockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Reason that the conversation was locked (optional)."""
        )
        lockReason: Option[LockReason],
        @GQLDescription("""Object that was locked.""")
        lockable: Lockable
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'marked_as_duplicate' event on a given issue or pull request."""
    )
    case class MarkedAsDuplicateEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'mentioned' event on a given issue or pull request."""
    )
    case class MentionedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case class MilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'milestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'moved_columns_in_project' event on a given issue or pull request."""
    )
    case class MovedColumnsInProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'pinned' event on a given issue or pull request."""
    )
    case class PinnedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case class ReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the 'referenced' event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the repository associated with the 'referenced' event."""
        )
        commitRepository: Repository,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."""
        )
        isDirectReference: Boolean,
        @GQLDescription("""Object referenced by event.""")
        subject: ReferencedSubject
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'removed_from_project' event on a given issue or pull request."""
    )
    case class RemovedFromProjectEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case class RenamedTitleEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the current title of the issue or pull request."""
        )
        currentTitle: String,
        id: ID,
        @GQLDescription(
          """Identifies the previous title of the issue or pull request."""
        )
        previousTitle: String,
        @GQLDescription("""Subject that was renamed.""")
        subject: RenamedTitleSubject
    ) extends IssueTimelineItems
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case class ReopenedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was reopened.""")
        closable: Closable,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case class SubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents a 'transferred' event on a given issue or pull request."""
    )
    case class TransferredEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The repository this came from""")
        fromRepository: Option[Repository],
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case class UnassignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was unassigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the subject (user) who was unassigned.""")
        user: Option[User]
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case class UnlabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'unlabeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case class UnlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object that was unlocked.""")
        lockable: Lockable
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unmarked_as_duplicate' event on a given issue or pull request."""
    )
    case class UnmarkedAsDuplicateEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unpinned' event on a given issue or pull request."""
    )
    case class UnpinnedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends IssueTimelineItems
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case class UnsubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends IssueTimelineItems
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case class UserBlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Number of days that the user was blocked for.""")
        blockDuration: UserBlockDuration,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The user who was blocked.""")
        subject: Option[User]
    ) extends IssueTimelineItems
  }

  @GQLDescription("""An item in an issue timeline""")
  sealed trait IssueTimelineItem extends scala.Product with scala.Serializable

  object IssueTimelineItem {
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case class AssignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was assigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the user who was assigned.""")
        user: Option[User]
    ) extends IssueTimelineItem
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case class ClosedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was closed.""")
        closable: Closable,
        @GQLDescription(
          """Object which triggered the creation of this event."""
        )
        closer: Option[Closer],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The HTTP path for this closed event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this closed event.""")
        url: URI
    ) extends IssueTimelineItem
    @GQLDescription("""Represents a Git commit.""")
    case class Commit(
        @GQLDescription("""An abbreviated version of the Git object ID""")
        abbreviatedOid: String,
        @GQLDescription("""The number of additions in this commit.""")
        additions: Int,
        @GQLDescription("""The pull requests associated with a commit""")
        associatedPullRequests: CommitAssociatedPullRequestsArgs => Option[
          PullRequestConnection
        ],
        @GQLDescription("""Authorship details of the commit.""")
        author: Option[GitActor],
        @GQLDescription("""Check if the committer and the author match.""")
        authoredByCommitter: Boolean,
        @GQLDescription("""The datetime when this commit was authored.""")
        authoredDate: DateTime,
        @GQLDescription("""Fetches `git blame` information.""")
        blame: CommitBlameArgs => Blame,
        @GQLDescription("""The number of changed files in this commit.""")
        changedFiles: Int,
        @GQLDescription("""Comments made on the commit.""")
        comments: CommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The HTTP path for this Git object""")
        commitResourcePath: URI,
        @GQLDescription("""The HTTP URL for this Git object""")
        commitUrl: URI,
        @GQLDescription("""The datetime when this commit was committed.""")
        committedDate: DateTime,
        @GQLDescription("""Check if commited via GitHub web UI.""")
        committedViaWeb: Boolean,
        @GQLDescription("""Committership details of the commit.""")
        committer: Option[GitActor],
        @GQLDescription("""The number of deletions in this commit.""")
        deletions: Int,
        @GQLDescription("""The deployments associated with a commit.""")
        deployments: CommitDeploymentsArgs => Option[DeploymentConnection],
        @GQLDescription(
          """The linear commit history starting from (and including) this commit, in the same order as `git log`."""
        )
        history: CommitHistoryArgs => CommitHistoryConnection,
        id: ID,
        @GQLDescription("""The Git commit message""")
        message: String,
        @GQLDescription("""The Git commit message body""")
        messageBody: String,
        @GQLDescription("""The commit message body rendered to HTML.""")
        messageBodyHTML: HTML,
        @GQLDescription("""The Git commit message headline""")
        messageHeadline: String,
        @GQLDescription("""The commit message headline rendered to HTML.""")
        messageHeadlineHTML: HTML,
        @GQLDescription("""The Git object ID""")
        oid: GitObjectID,
        @GQLDescription("""The parents of a commit.""")
        parents: CommitParentsArgs => CommitConnection,
        @GQLDescription("""The datetime when this commit was pushed.""")
        pushedDate: Option[DateTime],
        @GQLDescription("""The Repository this commit belongs to""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this commit""")
        resourcePath: URI,
        @GQLDescription("""Commit signing information, if present.""")
        signature: Option[GitSignature],
        @GQLDescription("""Status information for this commit""")
        status: Option[Status],
        @GQLDescription(
          """Check and Status rollup information for this commit."""
        )
        statusCheckRollup: Option[StatusCheckRollup],
        @GQLDescription(
          """Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file."""
        )
        submodules: CommitSubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        tarballUrl: URI,
        @GQLDescription("""Commit's root Tree""")
        tree: Tree,
        @GQLDescription("""The HTTP path for the tree of this commit""")
        treeResourcePath: URI,
        @GQLDescription("""The HTTP URL for the tree of this commit""")
        treeUrl: URI,
        @GQLDescription("""The HTTP URL for this commit""")
        url: URI,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        zipballUrl: URI
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case class CrossReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies when the reference was made.""")
        referencedAt: DateTime,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription(
          """Issue or pull request to which the reference was made."""
        )
        target: ReferencedSubject,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription(
          """Checks if the target will be closed when the source is merged."""
        )
        willCloseTarget: Boolean
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case class DemilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'demilestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends IssueTimelineItem
    @GQLDescription("""Represents a comment on an Issue.""")
    case class IssueComment(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription(
          """Returns whether or not a comment has been minimized."""
        )
        isMinimized: Boolean,
        @GQLDescription("""Identifies the issue associated with the comment.""")
        issue: Issue,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""Returns why the comment was minimized.""")
        minimizedReason: Option[String],
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Returns the pull request associated with the comment, if this comment was made on a
pull request."""
        )
        pullRequest: Option[PullRequest],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueCommentReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue comment""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue comment""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueCommentUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription(
          """Check if the current viewer can minimize this object."""
        )
        viewerCanMinimize: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case class LabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'labeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case class LockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Reason that the conversation was locked (optional)."""
        )
        lockReason: Option[LockReason],
        @GQLDescription("""Object that was locked.""")
        lockable: Lockable
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case class MilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'milestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case class ReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the 'referenced' event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the repository associated with the 'referenced' event."""
        )
        commitRepository: Repository,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."""
        )
        isDirectReference: Boolean,
        @GQLDescription("""Object referenced by event.""")
        subject: ReferencedSubject
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case class RenamedTitleEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the current title of the issue or pull request."""
        )
        currentTitle: String,
        id: ID,
        @GQLDescription(
          """Identifies the previous title of the issue or pull request."""
        )
        previousTitle: String,
        @GQLDescription("""Subject that was renamed.""")
        subject: RenamedTitleSubject
    ) extends IssueTimelineItem
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case class ReopenedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was reopened.""")
        closable: Closable,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case class SubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents a 'transferred' event on a given issue or pull request."""
    )
    case class TransferredEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The repository this came from""")
        fromRepository: Option[Repository],
        id: ID,
        @GQLDescription("""Identifies the issue associated with the event.""")
        issue: Issue
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case class UnassignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was unassigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the subject (user) who was unassigned.""")
        user: Option[User]
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case class UnlabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'unlabeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case class UnlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object that was unlocked.""")
        lockable: Lockable
    ) extends IssueTimelineItem
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case class UnsubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends IssueTimelineItem
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case class UserBlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Number of days that the user was blocked for.""")
        blockDuration: UserBlockDuration,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The user who was blocked.""")
        subject: Option[User]
    ) extends IssueTimelineItem
  }

  @GQLDescription("""Any referencable object""")
  sealed trait ReferencedSubject extends scala.Product with scala.Serializable

  object ReferencedSubject {
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends ReferencedSubject
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends ReferencedSubject
  }

  @GQLDescription("""An object that is a member of an enterprise.""")
  sealed trait EnterpriseMember extends scala.Product with scala.Serializable

  object EnterpriseMember {
    @GQLDescription(
      """An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations."""
    )
    case class EnterpriseUserAccount(
        @GQLDescription(
          """A URL pointing to the enterprise user account's public avatar."""
        )
        avatarUrl: EnterpriseUserAccountAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The enterprise in which this user account exists.""")
        enterprise: Enterprise,
        id: ID,
        @GQLDescription(
          """An identifier for the enterprise user account, a login or email address"""
        )
        login: String,
        @GQLDescription("""The name of the enterprise user account""")
        name: Option[String],
        @GQLDescription(
          """A list of enterprise organizations this user is a member of."""
        )
        organizations: EnterpriseUserAccountOrganizationsArgs => EnterpriseOrganizationMembershipConnection,
        @GQLDescription("""The HTTP path for this user.""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user.""")
        url: URI,
        @GQLDescription("""The user within the enterprise.""")
        user: Option[User]
    ) extends EnterpriseMember
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends EnterpriseMember
  }

  @GQLDescription("""Types that can be an actor.""")
  sealed trait PushAllowanceActor extends scala.Product with scala.Serializable

  object PushAllowanceActor {
    @GQLDescription("""A GitHub App.""")
    case class App(
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The description of the app.""")
        description: Option[String],
        id: ID,
        @GQLDescription(
          """The hex color code, without the leading '#', for the logo background."""
        )
        logoBackgroundColor: String,
        @GQLDescription("""A URL pointing to the app's logo.""")
        logoUrl: AppLogoUrlArgs => URI,
        @GQLDescription("""The name of the app.""")
        name: String,
        @GQLDescription(
          """A slug based on the name of the app for use in URLs."""
        )
        slug: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The URL to the app's homepage.""")
        url: URI
    ) extends PushAllowanceActor
    @GQLDescription("""A team of users in an organization.""")
    case class Team(
        @GQLDescription("""A list of teams that are ancestors of this team.""")
        ancestors: TeamAncestorsArgs => TeamConnection,
        @GQLDescription("""A URL pointing to the team's avatar.""")
        avatarUrl: TeamAvatarUrlArgs => Option[URI],
        @GQLDescription("""List of child teams belonging to this team""")
        childTeams: TeamChildTeamsArgs => TeamConnection,
        @GQLDescription(
          """The slug corresponding to the organization and team."""
        )
        combinedSlug: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The description of the team.""")
        description: Option[String],
        @GQLDescription("""Find a team discussion by its number.""")
        discussion: TeamDiscussionArgs => Option[TeamDiscussion],
        @GQLDescription("""A list of team discussions.""")
        discussions: TeamDiscussionsArgs => TeamDiscussionConnection,
        @GQLDescription("""The HTTP path for team discussions""")
        discussionsResourcePath: URI,
        @GQLDescription("""The HTTP URL for team discussions""")
        discussionsUrl: URI,
        @GQLDescription("""The HTTP path for editing this team""")
        editTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL for editing this team""")
        editTeamUrl: URI,
        id: ID,
        @GQLDescription(
          """A list of pending invitations for users to this team"""
        )
        invitations: TeamInvitationsArgs => Option[
          OrganizationInvitationConnection
        ],
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: TeamMemberStatusesArgs => UserStatusConnection,
        @GQLDescription("""A list of users who are members of this team.""")
        members: TeamMembersArgs => TeamMemberConnection,
        @GQLDescription("""The HTTP path for the team' members""")
        membersResourcePath: URI,
        @GQLDescription("""The HTTP URL for the team' members""")
        membersUrl: URI,
        @GQLDescription("""The name of the team.""")
        name: String,
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The organization that owns this team.""")
        organization: Organization,
        @GQLDescription("""The parent team of the team.""")
        parentTeam: Option[Team],
        @GQLDescription("""The level of privacy the team has.""")
        privacy: TeamPrivacy,
        @GQLDescription("""A list of repositories this team has access to.""")
        repositories: TeamRepositoriesArgs => TeamRepositoryConnection,
        @GQLDescription("""The HTTP path for this team's repositories""")
        repositoriesResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's repositories""")
        repositoriesUrl: URI,
        @GQLDescription("""The HTTP path for this team""")
        resourcePath: URI,
        @GQLDescription("""The slug corresponding to the team.""")
        slug: String,
        @GQLDescription("""The HTTP path for this team's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this team""")
        url: URI,
        @GQLDescription("""Team is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends PushAllowanceActor
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends PushAllowanceActor
  }

  @GQLDescription("""Types that can be assigned to issues.""")
  sealed trait Assignee extends scala.Product with scala.Serializable

  object Assignee {
    @GQLDescription(
      """A special type of user which takes actions on behalf of GitHub Apps."""
    )
    case class Bot(
        @GQLDescription("""A URL pointing to the GitHub App's public avatar.""")
        avatarUrl: BotAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        id: ID,
        @GQLDescription("""The username of the actor.""")
        login: String,
        @GQLDescription("""The HTTP path for this bot""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this bot""")
        url: URI
    ) extends Assignee
    @GQLDescription(
      """A placeholder user for attribution of imported data on GitHub."""
    )
    case class Mannequin(
        @GQLDescription("""A URL pointing to the GitHub App's public avatar.""")
        avatarUrl: MannequinAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The mannequin's email on the source instance.""")
        email: Option[String],
        id: ID,
        @GQLDescription("""The username of the actor.""")
        login: String,
        @GQLDescription("""The HTML path to this resource.""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The URL to this resource.""")
        url: URI
    ) extends Assignee
    @GQLDescription(
      """An account on GitHub, with one or more owners, that has repositories, members and teams."""
    )
    case class Organization(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: OrganizationAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""Audit log entries of the organization""")
        auditLog: OrganizationAuditLogArgs => OrganizationAuditEntryConnection,
        @GQLDescription(
          """A URL pointing to the organization's public avatar."""
        )
        avatarUrl: OrganizationAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The organization's public profile description.""")
        description: Option[String],
        @GQLDescription(
          """The organization's public profile description rendered to HTML."""
        )
        descriptionHTML: Option[String],
        @GQLDescription("""The organization's public email.""")
        email: Option[String],
        id: ID,
        @GQLDescription(
          """Whether the organization has verified its profile email and website."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The organization's public profile location.""")
        location: Option[String],
        @GQLDescription("""The organization's login name.""")
        login: String,
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: OrganizationMemberStatusesArgs => UserStatusConnection,
        @GQLDescription(
          """A list of users who are members of this organization."""
        )
        membersWithRole: OrganizationMembersWithRoleArgs => OrganizationMemberConnection,
        @GQLDescription("""The organization's public profile name.""")
        name: Option[String],
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The billing email for the organization.""")
        organizationBillingEmail: Option[String],
        @GQLDescription(
          """A list of users who have been invited to join this organization."""
        )
        pendingMembers: OrganizationPendingMembersArgs => UserConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: OrganizationPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: OrganizationPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: OrganizationPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: OrganizationProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: OrganizationProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing organization's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: OrganizationRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: OrganizationRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: OrganizationRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: OrganizationRepositoryArgs => Option[Repository],
        @GQLDescription(
          """When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication."""
        )
        requiresTwoFactorAuthentication: Option[Boolean],
        @GQLDescription("""The HTTP path for this organization.""")
        resourcePath: URI,
        @GQLDescription("""The Organization's SAML identity providers""")
        samlIdentityProvider: Option[OrganizationIdentityProvider],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: OrganizationSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: OrganizationSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Find an organization's team by its slug.""")
        team: OrganizationTeamArgs => Option[Team],
        @GQLDescription("""A list of teams in this organization.""")
        teams: OrganizationTeamsArgs => TeamConnection,
        @GQLDescription("""The HTTP path listing organization's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this organization.""")
        url: URI,
        @GQLDescription("""Organization is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Viewer can create repositories on this organization"""
        )
        viewerCanCreateRepositories: Boolean,
        @GQLDescription("""Viewer can create teams on this organization.""")
        viewerCanCreateTeams: Boolean,
        @GQLDescription("""Viewer is an active member of this organization.""")
        viewerIsAMember: Boolean,
        @GQLDescription("""The organization's public profile URL.""")
        websiteUrl: Option[URI]
    ) extends Assignee
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends Assignee
  }

  @GQLDescription("""An object which has a renamable title""")
  sealed trait RenamedTitleSubject extends scala.Product with scala.Serializable

  object RenamedTitleSubject {
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends RenamedTitleSubject
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends RenamedTitleSubject
  }

  @GQLDescription("""An item in an pull request timeline""")
  sealed trait PullRequestTimelineItem
      extends scala.Product
      with scala.Serializable

  object PullRequestTimelineItem {
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case class AssignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was assigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the user who was assigned.""")
        user: Option[User]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'base_ref_force_pushed' event on a given pull request."""
    )
    case class BaseRefForcePushedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the after commit SHA for the 'base_ref_force_pushed' event."""
        )
        afterCommit: Option[Commit],
        @GQLDescription(
          """Identifies the before commit SHA for the 'base_ref_force_pushed' event."""
        )
        beforeCommit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the fully qualified ref name for the 'base_ref_force_pushed' event."""
        )
        ref: Option[Ref]
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case class ClosedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was closed.""")
        closable: Closable,
        @GQLDescription(
          """Object which triggered the creation of this event."""
        )
        closer: Option[Closer],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The HTTP path for this closed event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this closed event.""")
        url: URI
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a Git commit.""")
    case class Commit(
        @GQLDescription("""An abbreviated version of the Git object ID""")
        abbreviatedOid: String,
        @GQLDescription("""The number of additions in this commit.""")
        additions: Int,
        @GQLDescription("""The pull requests associated with a commit""")
        associatedPullRequests: CommitAssociatedPullRequestsArgs => Option[
          PullRequestConnection
        ],
        @GQLDescription("""Authorship details of the commit.""")
        author: Option[GitActor],
        @GQLDescription("""Check if the committer and the author match.""")
        authoredByCommitter: Boolean,
        @GQLDescription("""The datetime when this commit was authored.""")
        authoredDate: DateTime,
        @GQLDescription("""Fetches `git blame` information.""")
        blame: CommitBlameArgs => Blame,
        @GQLDescription("""The number of changed files in this commit.""")
        changedFiles: Int,
        @GQLDescription("""Comments made on the commit.""")
        comments: CommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The HTTP path for this Git object""")
        commitResourcePath: URI,
        @GQLDescription("""The HTTP URL for this Git object""")
        commitUrl: URI,
        @GQLDescription("""The datetime when this commit was committed.""")
        committedDate: DateTime,
        @GQLDescription("""Check if commited via GitHub web UI.""")
        committedViaWeb: Boolean,
        @GQLDescription("""Committership details of the commit.""")
        committer: Option[GitActor],
        @GQLDescription("""The number of deletions in this commit.""")
        deletions: Int,
        @GQLDescription("""The deployments associated with a commit.""")
        deployments: CommitDeploymentsArgs => Option[DeploymentConnection],
        @GQLDescription(
          """The linear commit history starting from (and including) this commit, in the same order as `git log`."""
        )
        history: CommitHistoryArgs => CommitHistoryConnection,
        id: ID,
        @GQLDescription("""The Git commit message""")
        message: String,
        @GQLDescription("""The Git commit message body""")
        messageBody: String,
        @GQLDescription("""The commit message body rendered to HTML.""")
        messageBodyHTML: HTML,
        @GQLDescription("""The Git commit message headline""")
        messageHeadline: String,
        @GQLDescription("""The commit message headline rendered to HTML.""")
        messageHeadlineHTML: HTML,
        @GQLDescription("""The Git object ID""")
        oid: GitObjectID,
        @GQLDescription("""The parents of a commit.""")
        parents: CommitParentsArgs => CommitConnection,
        @GQLDescription("""The datetime when this commit was pushed.""")
        pushedDate: Option[DateTime],
        @GQLDescription("""The Repository this commit belongs to""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this commit""")
        resourcePath: URI,
        @GQLDescription("""Commit signing information, if present.""")
        signature: Option[GitSignature],
        @GQLDescription("""Status information for this commit""")
        status: Option[Status],
        @GQLDescription(
          """Check and Status rollup information for this commit."""
        )
        statusCheckRollup: Option[StatusCheckRollup],
        @GQLDescription(
          """Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file."""
        )
        submodules: CommitSubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        tarballUrl: URI,
        @GQLDescription("""Commit's root Tree""")
        tree: Tree,
        @GQLDescription("""The HTTP path for the tree of this commit""")
        treeResourcePath: URI,
        @GQLDescription("""The HTTP URL for the tree of this commit""")
        treeUrl: URI,
        @GQLDescription("""The HTTP URL for this commit""")
        url: URI,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes."""
        )
        zipballUrl: URI
    ) extends PullRequestTimelineItem
    @GQLDescription("""A thread of comments on a commit.""")
    case class CommitCommentThread(
        @GQLDescription("""The comments that exist in this thread.""")
        comments: CommitCommentThreadCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The commit the comments were made on.""")
        commit: Option[Commit],
        id: ID,
        @GQLDescription("""The file the comments were made on.""")
        path: Option[String],
        @GQLDescription(
          """The position in the diff for the commit that the comment was made on."""
        )
        position: Option[Int],
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case class CrossReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies when the reference was made.""")
        referencedAt: DateTime,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""Issue or pull request that made the reference.""")
        source: ReferencedSubject,
        @GQLDescription(
          """Issue or pull request to which the reference was made."""
        )
        target: ReferencedSubject,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription(
          """Checks if the target will be closed when the source is merged."""
        )
        willCloseTarget: Boolean
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case class DemilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'demilestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'deployed' event on a given pull request."""
    )
    case class DeployedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """The deployment associated with the 'deployed' event."""
        )
        deployment: Deployment,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription("""The ref associated with the 'deployed' event.""")
        ref: Option[Ref]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'deployment_environment_changed' event on a given pull request."""
    )
    case class DeploymentEnvironmentChangedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """The deployment status that updated the deployment environment."""
        )
        deploymentStatus: DeploymentStatus,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'head_ref_deleted' event on a given pull request."""
    )
    case class HeadRefDeletedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the Ref associated with the `head_ref_deleted` event."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the Ref associated with the `head_ref_deleted` event."""
        )
        headRefName: String,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'head_ref_force_pushed' event on a given pull request."""
    )
    case class HeadRefForcePushedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the after commit SHA for the 'head_ref_force_pushed' event."""
        )
        afterCommit: Option[Commit],
        @GQLDescription(
          """Identifies the before commit SHA for the 'head_ref_force_pushed' event."""
        )
        beforeCommit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the fully qualified ref name for the 'head_ref_force_pushed' event."""
        )
        ref: Option[Ref]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'head_ref_restored' event on a given pull request."""
    )
    case class HeadRefRestoredEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a comment on an Issue.""")
    case class IssueComment(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription(
          """Returns whether or not a comment has been minimized."""
        )
        isMinimized: Boolean,
        @GQLDescription("""Identifies the issue associated with the comment.""")
        issue: Issue,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""Returns why the comment was minimized.""")
        minimizedReason: Option[String],
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Returns the pull request associated with the comment, if this comment was made on a
pull request."""
        )
        pullRequest: Option[PullRequest],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueCommentReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue comment""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue comment""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueCommentUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription(
          """Check if the current viewer can minimize this object."""
        )
        viewerCanMinimize: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case class LabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'labeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case class LockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Reason that the conversation was locked (optional)."""
        )
        lockReason: Option[LockReason],
        @GQLDescription("""Object that was locked.""")
        lockable: Lockable
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a 'merged' event on a given pull request.""")
    case class MergedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the `merge` event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the Ref associated with the `merge` event."""
        )
        mergeRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the Ref associated with the `merge` event."""
        )
        mergeRefName: String,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription("""The HTTP path for this merged event.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this merged event.""")
        url: URI
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case class MilestonedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the milestone title associated with the 'milestoned' event."""
        )
        milestoneTitle: String,
        @GQLDescription("""Object referenced by event.""")
        subject: MilestoneItem
    ) extends PullRequestTimelineItem
    @GQLDescription("""A review object for a given pull request.""")
    case class PullRequestReview(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the pull request review body.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body of this review rendered as plain text.""")
        bodyText: String,
        @GQLDescription(
          """A list of review comments for the current pull request review."""
        )
        comments: PullRequestReviewCommentsArgs => PullRequestReviewCommentConnection,
        @GQLDescription(
          """Identifies the commit associated with this pull request review."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription(
          """A list of teams that this review was made on behalf of."""
        )
        onBehalfOf: PullRequestReviewOnBehalfOfArgs => TeamConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """Identifies the pull request associated with this pull request review."""
        )
        pullRequest: PullRequest,
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReviewReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription(
          """The HTTP path permalink for this PullRequestReview."""
        )
        resourcePath: URI,
        @GQLDescription(
          """Identifies the current state of the pull request review."""
        )
        state: PullRequestReviewState,
        @GQLDescription(
          """Identifies when the Pull Request Review was submitted"""
        )
        submittedAt: Option[DateTime],
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription(
          """The HTTP URL permalink for this PullRequestReview."""
        )
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestReviewUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """A review comment associated with a given repository pull request."""
    )
    case class PullRequestReviewComment(
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""The comment body of this review comment.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """The comment body of this review comment rendered as plain text."""
        )
        bodyText: String,
        @GQLDescription(
          """Identifies the commit associated with the comment."""
        )
        commit: Option[Commit],
        @GQLDescription("""Identifies when the comment was created.""")
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The diff hunk to which the comment applies.""")
        diffHunk: String,
        @GQLDescription(
          """Identifies when the comment was created in a draft state."""
        )
        draftedAt: DateTime,
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription(
          """Returns whether or not a comment has been minimized."""
        )
        isMinimized: Boolean,
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""Returns why the comment was minimized.""")
        minimizedReason: Option[String],
        @GQLDescription(
          """Identifies the original commit associated with the comment."""
        )
        originalCommit: Option[Commit],
        @GQLDescription(
          """The original line index in the diff to which the comment applies."""
        )
        originalPosition: Int,
        @GQLDescription("""Identifies when the comment body is outdated""")
        outdated: Boolean,
        @GQLDescription("""The path to which the comment applies.""")
        path: String,
        @GQLDescription(
          """The line index in the diff to which the comment applies."""
        )
        position: Option[Int],
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """The pull request associated with this review comment."""
        )
        pullRequest: PullRequest,
        @GQLDescription(
          """The pull request review associated with this review comment."""
        )
        pullRequestReview: Option[PullRequestReview],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReviewCommentReactionsArgs => ReactionConnection,
        @GQLDescription("""The comment this is a reply to.""")
        replyTo: Option[PullRequestReviewComment],
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path permalink for this review comment.""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the comment.""")
        state: PullRequestReviewCommentState,
        @GQLDescription("""Identifies when the comment was last updated.""")
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL permalink for this review comment.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestReviewCommentUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription(
          """Check if the current viewer can delete this object."""
        )
        viewerCanDelete: Boolean,
        @GQLDescription(
          """Check if the current viewer can minimize this object."""
        )
        viewerCanMinimize: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean
    ) extends PullRequestTimelineItem
    @GQLDescription("""A threaded list of comments for a given pull request.""")
    case class PullRequestReviewThread(
        @GQLDescription(
          """A list of pull request comments associated with the thread."""
        )
        comments: PullRequestReviewThreadCommentsArgs => PullRequestReviewCommentConnection,
        id: ID,
        @GQLDescription("""Whether this thread has been resolved""")
        isResolved: Boolean,
        @GQLDescription(
          """Identifies the pull request associated with this thread."""
        )
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the repository associated with this thread."""
        )
        repository: Repository,
        @GQLDescription("""The user who resolved this thread""")
        resolvedBy: Option[User],
        @GQLDescription("""Whether or not the viewer can resolve this thread""")
        viewerCanResolve: Boolean,
        @GQLDescription(
          """Whether or not the viewer can unresolve this thread"""
        )
        viewerCanUnresolve: Boolean
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case class ReferencedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the commit associated with the 'referenced' event."""
        )
        commit: Option[Commit],
        @GQLDescription(
          """Identifies the repository associated with the 'referenced' event."""
        )
        commitRepository: Repository,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Reference originated in a different repository.""")
        isCrossRepository: Boolean,
        @GQLDescription(
          """Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference."""
        )
        isDirectReference: Boolean,
        @GQLDescription("""Object referenced by event.""")
        subject: ReferencedSubject
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case class RenamedTitleEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Identifies the current title of the issue or pull request."""
        )
        currentTitle: String,
        id: ID,
        @GQLDescription(
          """Identifies the previous title of the issue or pull request."""
        )
        previousTitle: String,
        @GQLDescription("""Subject that was renamed.""")
        subject: RenamedTitleSubject
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case class ReopenedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Object that was reopened.""")
        closable: Closable,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'review_dismissed' event on a given issue or pull request."""
    )
    case class ReviewDismissedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """Identifies the optional message associated with the 'review_dismissed' event."""
        )
        dismissalMessage: Option[String],
        @GQLDescription(
          """Identifies the optional message associated with the event, rendered to HTML."""
        )
        dismissalMessageHTML: Option[String],
        id: ID,
        @GQLDescription(
          """Identifies the previous state of the review with the 'review_dismissed' event."""
        )
        previousReviewState: PullRequestReviewState,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the commit which caused the review to become stale."""
        )
        pullRequestCommit: Option[PullRequestCommit],
        @GQLDescription("""The HTTP path for this review dismissed event.""")
        resourcePath: URI,
        @GQLDescription(
          """Identifies the review associated with the 'review_dismissed' event."""
        )
        review: Option[PullRequestReview],
        @GQLDescription("""The HTTP URL for this review dismissed event.""")
        url: URI
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'review_request_removed' event on a given pull request."""
    )
    case class ReviewRequestRemovedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the reviewer whose review request was removed."""
        )
        requestedReviewer: Option[RequestedReviewer]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'review_requested' event on a given pull request."""
    )
    case class ReviewRequestedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""PullRequest referenced by event.""")
        pullRequest: PullRequest,
        @GQLDescription(
          """Identifies the reviewer whose review was requested."""
        )
        requestedReviewer: Option[RequestedReviewer]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case class SubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case class UnassignedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the assignable associated with the event."""
        )
        assignable: Assignable,
        @GQLDescription(
          """Identifies the user or mannequin that was unassigned."""
        )
        assignee: Option[Assignee],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Identifies the subject (user) who was unassigned.""")
        user: Option[User]
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case class UnlabeledEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription(
          """Identifies the label associated with the 'unlabeled' event."""
        )
        label: Label,
        @GQLDescription(
          """Identifies the `Labelable` associated with the event."""
        )
        labelable: Labelable
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case class UnlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object that was unlocked.""")
        lockable: Lockable
    ) extends PullRequestTimelineItem
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case class UnsubscribedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""Object referenced by event.""")
        subscribable: Subscribable
    ) extends PullRequestTimelineItem
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case class UserBlockedEvent(
        @GQLDescription("""Identifies the actor who performed the event.""")
        actor: Option[Actor],
        @GQLDescription("""Number of days that the user was blocked for.""")
        blockDuration: UserBlockDuration,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        id: ID,
        @GQLDescription("""The user who was blocked.""")
        subject: Option[User]
    ) extends PullRequestTimelineItem
  }

  @GQLDescription("""Types that can be inside Project Cards.""")
  sealed trait ProjectCardItem extends scala.Product with scala.Serializable

  object ProjectCardItem {
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends ProjectCardItem
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends ProjectCardItem
  }

  @GQLDescription("""Types that can be an actor.""")
  sealed trait ReviewDismissalAllowanceActor
      extends scala.Product
      with scala.Serializable

  object ReviewDismissalAllowanceActor {
    @GQLDescription("""A team of users in an organization.""")
    case class Team(
        @GQLDescription("""A list of teams that are ancestors of this team.""")
        ancestors: TeamAncestorsArgs => TeamConnection,
        @GQLDescription("""A URL pointing to the team's avatar.""")
        avatarUrl: TeamAvatarUrlArgs => Option[URI],
        @GQLDescription("""List of child teams belonging to this team""")
        childTeams: TeamChildTeamsArgs => TeamConnection,
        @GQLDescription(
          """The slug corresponding to the organization and team."""
        )
        combinedSlug: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The description of the team.""")
        description: Option[String],
        @GQLDescription("""Find a team discussion by its number.""")
        discussion: TeamDiscussionArgs => Option[TeamDiscussion],
        @GQLDescription("""A list of team discussions.""")
        discussions: TeamDiscussionsArgs => TeamDiscussionConnection,
        @GQLDescription("""The HTTP path for team discussions""")
        discussionsResourcePath: URI,
        @GQLDescription("""The HTTP URL for team discussions""")
        discussionsUrl: URI,
        @GQLDescription("""The HTTP path for editing this team""")
        editTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL for editing this team""")
        editTeamUrl: URI,
        id: ID,
        @GQLDescription(
          """A list of pending invitations for users to this team"""
        )
        invitations: TeamInvitationsArgs => Option[
          OrganizationInvitationConnection
        ],
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: TeamMemberStatusesArgs => UserStatusConnection,
        @GQLDescription("""A list of users who are members of this team.""")
        members: TeamMembersArgs => TeamMemberConnection,
        @GQLDescription("""The HTTP path for the team' members""")
        membersResourcePath: URI,
        @GQLDescription("""The HTTP URL for the team' members""")
        membersUrl: URI,
        @GQLDescription("""The name of the team.""")
        name: String,
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The organization that owns this team.""")
        organization: Organization,
        @GQLDescription("""The parent team of the team.""")
        parentTeam: Option[Team],
        @GQLDescription("""The level of privacy the team has.""")
        privacy: TeamPrivacy,
        @GQLDescription("""A list of repositories this team has access to.""")
        repositories: TeamRepositoriesArgs => TeamRepositoryConnection,
        @GQLDescription("""The HTTP path for this team's repositories""")
        repositoriesResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's repositories""")
        repositoriesUrl: URI,
        @GQLDescription("""The HTTP path for this team""")
        resourcePath: URI,
        @GQLDescription("""The slug corresponding to the team.""")
        slug: String,
        @GQLDescription("""The HTTP path for this team's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this team""")
        url: URI,
        @GQLDescription("""Team is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends ReviewDismissalAllowanceActor
    @GQLDescription(
      """A user is an individual's account on GitHub that owns repositories and can make new content."""
    )
    case class User(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: UserAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""A URL pointing to the user's public avatar.""")
        avatarUrl: UserAvatarUrlArgs => URI,
        @GQLDescription("""The user's public profile bio.""")
        bio: Option[String],
        @GQLDescription("""The user's public profile bio as HTML.""")
        bioHTML: HTML,
        @GQLDescription("""A list of commit comments made by this user.""")
        commitComments: UserCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription("""The user's public profile company.""")
        company: Option[String],
        @GQLDescription("""The user's public profile company as HTML.""")
        companyHTML: HTML,
        @GQLDescription(
          """The collection of contributions this user has made to different repositories."""
        )
        contributionsCollection: UserContributionsCollectionArgs => ContributionsCollection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The user's publicly visible profile email.""")
        email: String,
        @GQLDescription("""A list of users the given user is followed by.""")
        followers: UserFollowersArgs => FollowerConnection,
        @GQLDescription("""A list of users the given user is following.""")
        following: UserFollowingArgs => FollowingConnection,
        @GQLDescription("""Find gist by repo name.""")
        gist: UserGistArgs => Option[Gist],
        @GQLDescription("""A list of gist comments made by this user.""")
        gistComments: UserGistCommentsArgs => GistCommentConnection,
        @GQLDescription("""A list of the Gists the user has created.""")
        gists: UserGistsArgs => GistConnection,
        @GQLDescription(
          """The hovercard information for this user in a given context"""
        )
        hovercard: UserHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Security Bug Bounty."""
        )
        isBountyHunter: Boolean,
        @GQLDescription(
          """Whether or not this user is a participant in the GitHub Campus Experts Program."""
        )
        isCampusExpert: Boolean,
        @GQLDescription(
          """Whether or not this user is a GitHub Developer Program member."""
        )
        isDeveloperProgramMember: Boolean,
        @GQLDescription("""Whether or not this user is a GitHub employee.""")
        isEmployee: Boolean,
        @GQLDescription(
          """Whether or not the user has marked themselves as for hire."""
        )
        isHireable: Boolean,
        @GQLDescription("""Whether or not this user is a site administrator.""")
        isSiteAdmin: Boolean,
        @GQLDescription("""Whether or not this user is the viewing user.""")
        isViewer: Boolean,
        @GQLDescription("""A list of issue comments made by this user.""")
        issueComments: UserIssueCommentsArgs => IssueCommentConnection,
        @GQLDescription("""A list of issues associated with this user.""")
        issues: UserIssuesArgs => IssueConnection,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The user's public profile location.""")
        location: Option[String],
        @GQLDescription("""The username used to login.""")
        login: String,
        @GQLDescription("""The user's public profile name.""")
        name: Option[String],
        @GQLDescription(
          """Find an organization by its login that the user belongs to."""
        )
        organization: UserOrganizationArgs => Option[Organization],
        @GQLDescription("""A list of organizations the user belongs to.""")
        organizations: UserOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: UserPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: UserPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: UserPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: UserProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: UserProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing user's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing user's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of public keys associated with this user.""")
        publicKeys: UserPublicKeysArgs => PublicKeyConnection,
        @GQLDescription(
          """A list of pull requests associated with this user."""
        )
        pullRequests: UserPullRequestsArgs => PullRequestConnection,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: UserRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: UserRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: UserRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """A list of repositories that the user recently contributed to."""
        )
        repositoriesContributedTo: UserRepositoriesContributedToArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: UserRepositoryArgs => Option[Repository],
        @GQLDescription("""The HTTP path for this user""")
        resourcePath: URI,
        @GQLDescription("""Replies this user has saved""")
        savedReplies: UserSavedRepliesArgs => Option[SavedReplyConnection],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: UserSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: UserSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Repositories the user has starred.""")
        starredRepositories: UserStarredRepositoriesArgs => StarredRepositoryConnection,
        @GQLDescription(
          """The user's description of what they're currently doing."""
        )
        status: Option[UserStatus],
        @GQLDescription(
          """Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created"""
        )
        topRepositories: UserTopRepositoriesArgs => RepositoryConnection,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this user""")
        url: URI,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Whether or not the viewer is able to follow the user."""
        )
        viewerCanFollow: Boolean,
        @GQLDescription(
          """Whether or not this user is followed by the viewer."""
        )
        viewerIsFollowing: Boolean,
        @GQLDescription(
          """A list of repositories the given user is watching."""
        )
        watching: UserWatchingArgs => RepositoryConnection,
        @GQLDescription("""A URL pointing to the user's public website/blog.""")
        websiteUrl: Option[URI]
    ) extends ReviewDismissalAllowanceActor
  }

  @GQLDescription("""Types that can own an IP allow list.""")
  sealed trait IpAllowListOwner extends scala.Product with scala.Serializable

  object IpAllowListOwner {
    @GQLDescription(
      """An account to manage multiple organizations with consolidated policy and billing."""
    )
    case class Enterprise(
        @GQLDescription("""A URL pointing to the enterprise's public avatar.""")
        avatarUrl: EnterpriseAvatarUrlArgs => URI,
        @GQLDescription(
          """Enterprise billing information visible to enterprise billing managers."""
        )
        billingInfo: Option[EnterpriseBillingInfo],
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The description of the enterprise.""")
        description: Option[String],
        @GQLDescription("""The description of the enterprise as HTML.""")
        descriptionHTML: HTML,
        id: ID,
        @GQLDescription("""The location of the enterprise.""")
        location: Option[String],
        @GQLDescription(
          """A list of users who are members of this enterprise."""
        )
        members: EnterpriseMembersArgs => EnterpriseMemberConnection,
        @GQLDescription("""The name of the enterprise.""")
        name: String,
        @GQLDescription(
          """A list of organizations that belong to this enterprise."""
        )
        organizations: EnterpriseOrganizationsArgs => OrganizationConnection,
        @GQLDescription(
          """Enterprise information only visible to enterprise owners."""
        )
        ownerInfo: Option[EnterpriseOwnerInfo],
        @GQLDescription("""The HTTP path for this enterprise.""")
        resourcePath: URI,
        @GQLDescription("""The URL-friendly identifier for the enterprise.""")
        slug: String,
        @GQLDescription("""The HTTP URL for this enterprise.""")
        url: URI,
        @GQLDescription("""A list of user accounts on this enterprise.""")
        userAccounts: EnterpriseUserAccountsArgs => EnterpriseUserAccountConnection,
        @GQLDescription(
          """Is the current viewer an admin of this enterprise?"""
        )
        viewerIsAdmin: Boolean,
        @GQLDescription("""The URL of the enterprise website.""")
        websiteUrl: Option[URI]
    ) extends IpAllowListOwner
    @GQLDescription(
      """An account on GitHub, with one or more owners, that has repositories, members and teams."""
    )
    case class Organization(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: OrganizationAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""Audit log entries of the organization""")
        auditLog: OrganizationAuditLogArgs => OrganizationAuditEntryConnection,
        @GQLDescription(
          """A URL pointing to the organization's public avatar."""
        )
        avatarUrl: OrganizationAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The organization's public profile description.""")
        description: Option[String],
        @GQLDescription(
          """The organization's public profile description rendered to HTML."""
        )
        descriptionHTML: Option[String],
        @GQLDescription("""The organization's public email.""")
        email: Option[String],
        id: ID,
        @GQLDescription(
          """Whether the organization has verified its profile email and website."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The organization's public profile location.""")
        location: Option[String],
        @GQLDescription("""The organization's login name.""")
        login: String,
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: OrganizationMemberStatusesArgs => UserStatusConnection,
        @GQLDescription(
          """A list of users who are members of this organization."""
        )
        membersWithRole: OrganizationMembersWithRoleArgs => OrganizationMemberConnection,
        @GQLDescription("""The organization's public profile name.""")
        name: Option[String],
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The billing email for the organization.""")
        organizationBillingEmail: Option[String],
        @GQLDescription(
          """A list of users who have been invited to join this organization."""
        )
        pendingMembers: OrganizationPendingMembersArgs => UserConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: OrganizationPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: OrganizationPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: OrganizationPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: OrganizationProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: OrganizationProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing organization's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: OrganizationRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: OrganizationRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: OrganizationRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: OrganizationRepositoryArgs => Option[Repository],
        @GQLDescription(
          """When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication."""
        )
        requiresTwoFactorAuthentication: Option[Boolean],
        @GQLDescription("""The HTTP path for this organization.""")
        resourcePath: URI,
        @GQLDescription("""The Organization's SAML identity providers""")
        samlIdentityProvider: Option[OrganizationIdentityProvider],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: OrganizationSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: OrganizationSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Find an organization's team by its slug.""")
        team: OrganizationTeamArgs => Option[Team],
        @GQLDescription("""A list of teams in this organization.""")
        teams: OrganizationTeamsArgs => TeamConnection,
        @GQLDescription("""The HTTP path listing organization's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this organization.""")
        url: URI,
        @GQLDescription("""Organization is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Viewer can create repositories on this organization"""
        )
        viewerCanCreateRepositories: Boolean,
        @GQLDescription("""Viewer can create teams on this organization.""")
        viewerCanCreateTeams: Boolean,
        @GQLDescription("""Viewer is an active member of this organization.""")
        viewerIsAMember: Boolean,
        @GQLDescription("""The organization's public profile URL.""")
        websiteUrl: Option[URI]
    ) extends IpAllowListOwner
  }

  @GQLDescription("""Used for return value of Repository.issueOrPullRequest.""")
  sealed trait IssueOrPullRequest extends scala.Product with scala.Serializable

  object IssueOrPullRequest {
    @GQLDescription(
      """An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project."""
    )
    case class Issue(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: IssueAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription("""Identifies the body of the issue.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription(
          """Identifies the body of the issue rendered to text."""
        )
        bodyText: String,
        @GQLDescription(
          """`true` if the object is closed (definition of closed may depend on type)"""
        )
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription("""A list of comments associated with the Issue.""")
        comments: IssueCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The actor who edited the comment.""")
        editor: Option[Actor],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: IssueHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: IssueLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the object is locked""")
        locked: Boolean,
        @GQLDescription(
          """Identifies the milestone associated with the issue."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the issue number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Issue conversation."""
        )
        participants: IssueParticipantsArgs => UserConnection,
        @GQLDescription("""List of project cards associated with this issue.""")
        projectCards: IssueProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: IssueReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this issue""")
        resourcePath: URI,
        @GQLDescription("""Identifies the state of the issue.""")
        state: IssueState,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timeline: IssueTimelineArgs => IssueTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the issue."""
        )
        timelineItems: IssueTimelineItemsArgs => IssueTimelineItemsConnection,
        @GQLDescription("""Identifies the issue title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this issue""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: IssueUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends IssueOrPullRequest
    @GQLDescription("""A repository pull request.""")
    case class PullRequest(
        @GQLDescription("""Reason that the conversation was locked.""")
        activeLockReason: Option[LockReason],
        @GQLDescription("""The number of additions in this pull request.""")
        additions: Int,
        @GQLDescription("""A list of Users assigned to this object.""")
        assignees: PullRequestAssigneesArgs => UserConnection,
        @GQLDescription("""The actor who authored the comment.""")
        author: Option[Actor],
        @GQLDescription(
          """Author's association with the subject of the comment."""
        )
        authorAssociation: CommentAuthorAssociation,
        @GQLDescription(
          """Identifies the base Ref associated with the pull request."""
        )
        baseRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefName: String,
        @GQLDescription(
          """Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted."""
        )
        baseRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's base Ref."""
        )
        baseRepository: Option[Repository],
        @GQLDescription("""The body as Markdown.""")
        body: String,
        @GQLDescription("""The body rendered to HTML.""")
        bodyHTML: HTML,
        @GQLDescription("""The body rendered to text.""")
        bodyText: String,
        @GQLDescription("""The number of changed files in this pull request.""")
        changedFiles: Int,
        @GQLDescription(
          """The HTTP path for the checks of this pull request."""
        )
        checksResourcePath: URI,
        @GQLDescription("""The HTTP URL for the checks of this pull request.""")
        checksUrl: URI,
        @GQLDescription("""`true` if the pull request is closed""")
        closed: Boolean,
        @GQLDescription(
          """Identifies the date and time when the object was closed."""
        )
        closedAt: Option[DateTime],
        @GQLDescription(
          """A list of comments associated with the pull request."""
        )
        comments: PullRequestCommentsArgs => IssueCommentConnection,
        @GQLDescription(
          """A list of commits present in this pull request's head branch not present in the base branch."""
        )
        commits: PullRequestCommitsArgs => PullRequestCommitConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription(
          """Check if this comment was created via an email reply."""
        )
        createdViaEmail: Boolean,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The number of deletions in this pull request.""")
        deletions: Int,
        @GQLDescription("""The actor who edited this pull request's body.""")
        editor: Option[Actor],
        @GQLDescription("""Lists the files changed within this pull request.""")
        files: PullRequestFilesArgs => Option[PullRequestChangedFileConnection],
        @GQLDescription(
          """Identifies the head Ref associated with the pull request."""
        )
        headRef: Option[Ref],
        @GQLDescription(
          """Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefName: String,
        @GQLDescription(
          """Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted."""
        )
        headRefOid: GitObjectID,
        @GQLDescription(
          """The repository associated with this pull request's head Ref."""
        )
        headRepository: Option[Repository],
        @GQLDescription(
          """The owner of the repository associated with this pull request's head Ref."""
        )
        headRepositoryOwner: Option[RepositoryOwner],
        @GQLDescription("""The hovercard information for this issue""")
        hovercard: PullRequestHovercardArgs => Hovercard,
        id: ID,
        @GQLDescription(
          """Check if this comment was edited and includes an edit with the creation data"""
        )
        includesCreatedEdit: Boolean,
        @GQLDescription("""The head and base repositories are different.""")
        isCrossRepository: Boolean,
        @GQLDescription("""Identifies if the pull request is a draft.""")
        isDraft: Boolean,
        @GQLDescription("""A list of labels associated with the object.""")
        labels: PullRequestLabelsArgs => Option[LabelConnection],
        @GQLDescription("""The moment the editor made the last edit""")
        lastEditedAt: Option[DateTime],
        @GQLDescription("""`true` if the pull request is locked""")
        locked: Boolean,
        @GQLDescription(
          """Indicates whether maintainers can modify the pull request."""
        )
        maintainerCanModify: Boolean,
        @GQLDescription(
          """The commit that was created when this pull request was merged."""
        )
        mergeCommit: Option[Commit],
        @GQLDescription(
          """Whether or not the pull request can be merged based on the existence of merge conflicts."""
        )
        mergeable: MergeableState,
        @GQLDescription("""Whether or not the pull request was merged.""")
        merged: Boolean,
        @GQLDescription(
          """The date and time that the pull request was merged."""
        )
        mergedAt: Option[DateTime],
        @GQLDescription("""The actor who merged the pull request.""")
        mergedBy: Option[Actor],
        @GQLDescription(
          """Identifies the milestone associated with the pull request."""
        )
        milestone: Option[Milestone],
        @GQLDescription("""Identifies the pull request number.""")
        number: Int,
        @GQLDescription(
          """A list of Users that are participating in the Pull Request conversation."""
        )
        participants: PullRequestParticipantsArgs => UserConnection,
        @GQLDescription("""The permalink to the pull request.""")
        permalink: URI,
        @GQLDescription(
          """The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request."""
        )
        potentialMergeCommit: Option[Commit],
        @GQLDescription(
          """List of project cards associated with this pull request."""
        )
        projectCards: PullRequestProjectCardsArgs => ProjectCardConnection,
        @GQLDescription("""Identifies when the comment was published at.""")
        publishedAt: Option[DateTime],
        @GQLDescription(
          """A list of reactions grouped by content left on the subject."""
        )
        reactionGroups: Option[List[ReactionGroup]],
        @GQLDescription("""A list of Reactions left on the Issue.""")
        reactions: PullRequestReactionsArgs => ReactionConnection,
        @GQLDescription("""The repository associated with this node.""")
        repository: Repository,
        @GQLDescription("""The HTTP path for this pull request.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP path for reverting this pull request.""")
        revertResourcePath: URI,
        @GQLDescription("""The HTTP URL for reverting this pull request.""")
        revertUrl: URI,
        @GQLDescription(
          """The current status of this pull request with respect to code review."""
        )
        reviewDecision: Option[PullRequestReviewDecision],
        @GQLDescription(
          """A list of review requests associated with the pull request."""
        )
        reviewRequests: PullRequestReviewRequestsArgs => Option[
          ReviewRequestConnection
        ],
        @GQLDescription(
          """The list of all review threads for this pull request."""
        )
        reviewThreads: PullRequestReviewThreadsArgs => PullRequestReviewThreadConnection,
        @GQLDescription(
          """A list of reviews associated with the pull request."""
        )
        reviews: PullRequestReviewsArgs => Option[PullRequestReviewConnection],
        @GQLDescription("""Identifies the state of the pull request.""")
        state: PullRequestState,
        @GQLDescription(
          """A list of reviewer suggestions based on commit history and past review comments."""
        )
        suggestedReviewers: List[Option[SuggestedReviewer]],
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timeline: PullRequestTimelineArgs => PullRequestTimelineConnection,
        @GQLDescription(
          """A list of events, comments, commits, etc. associated with the pull request."""
        )
        timelineItems: PullRequestTimelineItemsArgs => PullRequestTimelineItemsConnection,
        @GQLDescription("""Identifies the pull request title.""")
        title: String,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this pull request.""")
        url: URI,
        @GQLDescription("""A list of edits to this content.""")
        userContentEdits: PullRequestUserContentEditsArgs => Option[
          UserContentEditConnection
        ],
        @GQLDescription("""Whether or not the viewer can apply suggestion.""")
        viewerCanApplySuggestion: Boolean,
        @GQLDescription("""Can user react to this subject""")
        viewerCanReact: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Check if the current viewer can update this object."""
        )
        viewerCanUpdate: Boolean,
        @GQLDescription(
          """Reasons why the current viewer can not update this comment."""
        )
        viewerCannotUpdateReasons: List[CommentCannotUpdateReason],
        @GQLDescription("""Did the viewer author this comment.""")
        viewerDidAuthor: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends IssueOrPullRequest
  }

  @GQLDescription(
    """Types that can grant permissions on a repository to a user"""
  )
  sealed trait PermissionGranter extends scala.Product with scala.Serializable

  object PermissionGranter {
    @GQLDescription(
      """An account on GitHub, with one or more owners, that has repositories, members and teams."""
    )
    case class Organization(
        @GQLDescription(
          """Determine if this repository owner has any items that can be pinned to their profile."""
        )
        anyPinnableItems: OrganizationAnyPinnableItemsArgs => Boolean,
        @GQLDescription("""Audit log entries of the organization""")
        auditLog: OrganizationAuditLogArgs => OrganizationAuditEntryConnection,
        @GQLDescription(
          """A URL pointing to the organization's public avatar."""
        )
        avatarUrl: OrganizationAvatarUrlArgs => URI,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription("""The organization's public profile description.""")
        description: Option[String],
        @GQLDescription(
          """The organization's public profile description rendered to HTML."""
        )
        descriptionHTML: Option[String],
        @GQLDescription("""The organization's public email.""")
        email: Option[String],
        id: ID,
        @GQLDescription(
          """Whether the organization has verified its profile email and website."""
        )
        isVerified: Boolean,
        @GQLDescription(
          """Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity."""
        )
        itemShowcase: ProfileItemShowcase,
        @GQLDescription("""The organization's public profile location.""")
        location: Option[String],
        @GQLDescription("""The organization's login name.""")
        login: String,
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: OrganizationMemberStatusesArgs => UserStatusConnection,
        @GQLDescription(
          """A list of users who are members of this organization."""
        )
        membersWithRole: OrganizationMembersWithRoleArgs => OrganizationMemberConnection,
        @GQLDescription("""The organization's public profile name.""")
        name: Option[String],
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The billing email for the organization.""")
        organizationBillingEmail: Option[String],
        @GQLDescription(
          """A list of users who have been invited to join this organization."""
        )
        pendingMembers: OrganizationPendingMembersArgs => UserConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner can pin to their profile."""
        )
        pinnableItems: OrganizationPinnableItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """A list of repositories and gists this profile owner has pinned to their profile"""
        )
        pinnedItems: OrganizationPinnedItemsArgs => PinnableItemConnection,
        @GQLDescription(
          """Returns how many more items this profile owner can pin to their profile."""
        )
        pinnedItemsRemaining: Int,
        @GQLDescription(
          """A list of repositories this user has pinned to their profile"""
        )
        pinnedRepositories: OrganizationPinnedRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find project by number.""")
        project: OrganizationProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: OrganizationProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing organization's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's projects""")
        projectsUrl: URI,
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: OrganizationRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: OrganizationRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""A list of repositories that the user owns.""")
        repositories: OrganizationRepositoriesArgs => RepositoryConnection,
        @GQLDescription("""Find Repository.""")
        repository: OrganizationRepositoryArgs => Option[Repository],
        @GQLDescription(
          """When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication."""
        )
        requiresTwoFactorAuthentication: Option[Boolean],
        @GQLDescription("""The HTTP path for this organization.""")
        resourcePath: URI,
        @GQLDescription("""The Organization's SAML identity providers""")
        samlIdentityProvider: Option[OrganizationIdentityProvider],
        @GQLDescription("""The GitHub Sponsors listing for this user.""")
        sponsorsListing: Option[SponsorsListing],
        @GQLDescription("""This object's sponsorships as the maintainer.""")
        sponsorshipsAsMaintainer: OrganizationSponsorshipsAsMaintainerArgs => SponsorshipConnection,
        @GQLDescription("""This object's sponsorships as the sponsor.""")
        sponsorshipsAsSponsor: OrganizationSponsorshipsAsSponsorArgs => SponsorshipConnection,
        @GQLDescription("""Find an organization's team by its slug.""")
        team: OrganizationTeamArgs => Option[Team],
        @GQLDescription("""A list of teams in this organization.""")
        teams: OrganizationTeamsArgs => TeamConnection,
        @GQLDescription("""The HTTP path listing organization's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing organization's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this organization.""")
        url: URI,
        @GQLDescription("""Organization is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the viewer pin repositories and gists to the profile?"""
        )
        viewerCanChangePinnedItems: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Viewer can create repositories on this organization"""
        )
        viewerCanCreateRepositories: Boolean,
        @GQLDescription("""Viewer can create teams on this organization.""")
        viewerCanCreateTeams: Boolean,
        @GQLDescription("""Viewer is an active member of this organization.""")
        viewerIsAMember: Boolean,
        @GQLDescription("""The organization's public profile URL.""")
        websiteUrl: Option[URI]
    ) extends PermissionGranter
    @GQLDescription("""A repository contains the content for a project.""")
    case class Repository(
        @GQLDescription(
          """A list of users that can be assigned to issues in this repository."""
        )
        assignableUsers: RepositoryAssignableUsersArgs => UserConnection,
        @GQLDescription(
          """A list of branch protection rules for this repository."""
        )
        branchProtectionRules: RepositoryBranchProtectionRulesArgs => BranchProtectionRuleConnection,
        @GQLDescription("""Returns the code of conduct for this repository""")
        codeOfConduct: Option[CodeOfConduct],
        @GQLDescription(
          """A list of collaborators associated with the repository."""
        )
        collaborators: RepositoryCollaboratorsArgs => Option[
          RepositoryCollaboratorConnection
        ],
        @GQLDescription(
          """A list of commit comments associated with the repository."""
        )
        commitComments: RepositoryCommitCommentsArgs => CommitCommentConnection,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""Identifies the primary key from the database.""")
        databaseId: Option[Int],
        @GQLDescription(
          """The Ref associated with the repository's default branch."""
        )
        defaultBranchRef: Option[Ref],
        @GQLDescription(
          """Whether or not branches are automatically deleted when merged in this repository."""
        )
        deleteBranchOnMerge: Boolean,
        @GQLDescription(
          """A list of deploy keys that are on this repository."""
        )
        deployKeys: RepositoryDeployKeysArgs => DeployKeyConnection,
        @GQLDescription("""Deployments associated with the repository""")
        deployments: RepositoryDeploymentsArgs => DeploymentConnection,
        @GQLDescription("""The description of the repository.""")
        description: Option[String],
        @GQLDescription(
          """The description of the repository rendered to HTML."""
        )
        descriptionHTML: HTML,
        @GQLDescription(
          """The number of kilobytes this repository occupies on disk."""
        )
        diskUsage: Option[Int],
        @GQLDescription(
          """Returns how many forks there are of this repository in the whole network."""
        )
        forkCount: Int,
        @GQLDescription("""A list of direct forked repositories.""")
        forks: RepositoryForksArgs => RepositoryConnection,
        @GQLDescription("""The funding links for this repository""")
        fundingLinks: List[FundingLink],
        @GQLDescription(
          """Indicates if the repository has issues feature enabled."""
        )
        hasIssuesEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has the Projects feature enabled."""
        )
        hasProjectsEnabled: Boolean,
        @GQLDescription(
          """Indicates if the repository has wiki feature enabled."""
        )
        hasWikiEnabled: Boolean,
        @GQLDescription("""The repository's URL.""")
        homepageUrl: Option[URI],
        id: ID,
        @GQLDescription("""Indicates if the repository is unmaintained.""")
        isArchived: Boolean,
        @GQLDescription("""Returns whether or not this repository disabled.""")
        isDisabled: Boolean,
        @GQLDescription("""Identifies if the repository is a fork.""")
        isFork: Boolean,
        @GQLDescription(
          """Indicates if the repository has been locked or not."""
        )
        isLocked: Boolean,
        @GQLDescription("""Identifies if the repository is a mirror.""")
        isMirror: Boolean,
        @GQLDescription("""Identifies if the repository is private.""")
        isPrivate: Boolean,
        @GQLDescription(
          """Identifies if the repository is a template that can be used to generate new repositories."""
        )
        isTemplate: Boolean,
        @GQLDescription(
          """Returns a single issue from the current repository by number."""
        )
        issue: RepositoryIssueArgs => Option[Issue],
        @GQLDescription(
          """Returns a single issue-like object from the current repository by number."""
        )
        issueOrPullRequest: RepositoryIssueOrPullRequestArgs => Option[
          IssueOrPullRequest
        ],
        @GQLDescription(
          """A list of issues that have been opened in the repository."""
        )
        issues: RepositoryIssuesArgs => IssueConnection,
        @GQLDescription("""Returns a single label by name""")
        label: RepositoryLabelArgs => Option[Label],
        @GQLDescription("""A list of labels associated with the repository.""")
        labels: RepositoryLabelsArgs => Option[LabelConnection],
        @GQLDescription(
          """A list containing a breakdown of the language composition of the repository."""
        )
        languages: RepositoryLanguagesArgs => Option[LanguageConnection],
        @GQLDescription("""The license associated with the repository""")
        licenseInfo: Option[License],
        @GQLDescription("""The reason the repository has been locked.""")
        lockReason: Option[RepositoryLockReason],
        @GQLDescription(
          """A list of Users that can be mentioned in the context of the repository."""
        )
        mentionableUsers: RepositoryMentionableUsersArgs => UserConnection,
        @GQLDescription(
          """Whether or not PRs are merged with a merge commit on this repository."""
        )
        mergeCommitAllowed: Boolean,
        @GQLDescription(
          """Returns a single milestone from the current repository by number."""
        )
        milestone: RepositoryMilestoneArgs => Option[Milestone],
        @GQLDescription(
          """A list of milestones associated with the repository."""
        )
        milestones: RepositoryMilestonesArgs => Option[MilestoneConnection],
        @GQLDescription("""The repository's original mirror URL.""")
        mirrorUrl: Option[URI],
        @GQLDescription("""The name of the repository.""")
        name: String,
        @GQLDescription("""The repository's name with owner.""")
        nameWithOwner: String,
        @GQLDescription("""A Git object in the repository""")
        `object`: RepositoryObjectArgs => Option[GitObject],
        @GQLDescription(
          """The image used to represent this repository in Open Graph data."""
        )
        openGraphImageUrl: URI,
        @GQLDescription("""The User owner of the repository.""")
        owner: RepositoryOwner,
        @GQLDescription("""The repository parent, if this is a fork.""")
        parent: Option[Repository],
        @GQLDescription("""The primary language of the repository's code.""")
        primaryLanguage: Option[Language],
        @GQLDescription("""Find project by number.""")
        project: RepositoryProjectArgs => Option[Project],
        @GQLDescription("""A list of projects under the owner.""")
        projects: RepositoryProjectsArgs => ProjectConnection,
        @GQLDescription("""The HTTP path listing the repository's projects""")
        projectsResourcePath: URI,
        @GQLDescription("""The HTTP URL listing the repository's projects""")
        projectsUrl: URI,
        @GQLDescription(
          """Returns a single pull request from the current repository by number."""
        )
        pullRequest: RepositoryPullRequestArgs => Option[PullRequest],
        @GQLDescription(
          """A list of pull requests that have been opened in the repository."""
        )
        pullRequests: RepositoryPullRequestsArgs => PullRequestConnection,
        @GQLDescription(
          """Identifies when the repository was last pushed to."""
        )
        pushedAt: Option[DateTime],
        @GQLDescription(
          """Whether or not rebase-merging is enabled on this repository."""
        )
        rebaseMergeAllowed: Boolean,
        @GQLDescription("""Fetch a given ref from the repository""")
        ref: RepositoryRefArgs => Option[Ref],
        @GQLDescription("""Fetch a list of refs from the repository""")
        refs: RepositoryRefsArgs => Option[RefConnection],
        @GQLDescription("""A list of registry packages under the owner.""")
        registryPackages: RepositoryRegistryPackagesArgs => RegistryPackageConnection,
        @GQLDescription(
          """A list of registry packages for a particular search query."""
        )
        registryPackagesForQuery: RepositoryRegistryPackagesForQueryArgs => RegistryPackageConnection,
        @GQLDescription("""Lookup a single release given various criteria.""")
        release: RepositoryReleaseArgs => Option[Release],
        @GQLDescription(
          """List of releases which are dependent on this repository."""
        )
        releases: RepositoryReleasesArgs => ReleaseConnection,
        @GQLDescription(
          """A list of applied repository-topic associations for this repository."""
        )
        repositoryTopics: RepositoryRepositoryTopicsArgs => RepositoryTopicConnection,
        @GQLDescription("""The HTTP path for this repository""")
        resourcePath: URI,
        @GQLDescription(
          """A description of the repository, rendered to HTML without any links in it."""
        )
        shortDescriptionHTML: RepositoryShortDescriptionHTMLArgs => HTML,
        @GQLDescription(
          """Whether or not squash-merging is enabled on this repository."""
        )
        squashMergeAllowed: Boolean,
        @GQLDescription("""The SSH URL to clone this repository""")
        sshUrl: GitSSHRemote,
        @GQLDescription("""A list of users who have starred this starrable.""")
        stargazers: RepositoryStargazersArgs => StargazerConnection,
        @GQLDescription(
          """Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit."""
        )
        submodules: RepositorySubmodulesArgs => SubmoduleConnection,
        @GQLDescription(
          """Temporary authentication token for cloning this repository."""
        )
        tempCloneToken: Option[String],
        @GQLDescription(
          """The repository from which this repository was generated, if any."""
        )
        templateRepository: Option[Repository],
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this repository""")
        url: URI,
        @GQLDescription(
          """Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar."""
        )
        usesCustomOpenGraphImage: Boolean,
        @GQLDescription(
          """Indicates whether the viewer has admin permissions on this repository."""
        )
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Can the current viewer create new projects on this owner."""
        )
        viewerCanCreateProjects: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Indicates whether the viewer can update the topics of this repository."""
        )
        viewerCanUpdateTopics: Boolean,
        @GQLDescription(
          """Returns a boolean indicating whether the viewing user has starred this starrable."""
        )
        viewerHasStarred: Boolean,
        @GQLDescription(
          """The users permission level on the repository. Will return null if authenticated as an GitHub App."""
        )
        viewerPermission: Option[RepositoryPermission],
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState],
        @GQLDescription(
          """A list of vulnerability alerts that are on this repository."""
        )
        vulnerabilityAlerts: RepositoryVulnerabilityAlertsArgs => Option[
          RepositoryVulnerabilityAlertConnection
        ],
        @GQLDescription("""A list of users watching the repository.""")
        watchers: RepositoryWatchersArgs => UserConnection
    ) extends PermissionGranter
    @GQLDescription("""A team of users in an organization.""")
    case class Team(
        @GQLDescription("""A list of teams that are ancestors of this team.""")
        ancestors: TeamAncestorsArgs => TeamConnection,
        @GQLDescription("""A URL pointing to the team's avatar.""")
        avatarUrl: TeamAvatarUrlArgs => Option[URI],
        @GQLDescription("""List of child teams belonging to this team""")
        childTeams: TeamChildTeamsArgs => TeamConnection,
        @GQLDescription(
          """The slug corresponding to the organization and team."""
        )
        combinedSlug: String,
        @GQLDescription(
          """Identifies the date and time when the object was created."""
        )
        createdAt: DateTime,
        @GQLDescription("""The description of the team.""")
        description: Option[String],
        @GQLDescription("""Find a team discussion by its number.""")
        discussion: TeamDiscussionArgs => Option[TeamDiscussion],
        @GQLDescription("""A list of team discussions.""")
        discussions: TeamDiscussionsArgs => TeamDiscussionConnection,
        @GQLDescription("""The HTTP path for team discussions""")
        discussionsResourcePath: URI,
        @GQLDescription("""The HTTP URL for team discussions""")
        discussionsUrl: URI,
        @GQLDescription("""The HTTP path for editing this team""")
        editTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL for editing this team""")
        editTeamUrl: URI,
        id: ID,
        @GQLDescription(
          """A list of pending invitations for users to this team"""
        )
        invitations: TeamInvitationsArgs => Option[
          OrganizationInvitationConnection
        ],
        @GQLDescription(
          """Get the status messages members of this entity have set that are either public or visible only to the organization."""
        )
        memberStatuses: TeamMemberStatusesArgs => UserStatusConnection,
        @GQLDescription("""A list of users who are members of this team.""")
        members: TeamMembersArgs => TeamMemberConnection,
        @GQLDescription("""The HTTP path for the team' members""")
        membersResourcePath: URI,
        @GQLDescription("""The HTTP URL for the team' members""")
        membersUrl: URI,
        @GQLDescription("""The name of the team.""")
        name: String,
        @GQLDescription("""The HTTP path creating a new team""")
        newTeamResourcePath: URI,
        @GQLDescription("""The HTTP URL creating a new team""")
        newTeamUrl: URI,
        @GQLDescription("""The organization that owns this team.""")
        organization: Organization,
        @GQLDescription("""The parent team of the team.""")
        parentTeam: Option[Team],
        @GQLDescription("""The level of privacy the team has.""")
        privacy: TeamPrivacy,
        @GQLDescription("""A list of repositories this team has access to.""")
        repositories: TeamRepositoriesArgs => TeamRepositoryConnection,
        @GQLDescription("""The HTTP path for this team's repositories""")
        repositoriesResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's repositories""")
        repositoriesUrl: URI,
        @GQLDescription("""The HTTP path for this team""")
        resourcePath: URI,
        @GQLDescription("""The slug corresponding to the team.""")
        slug: String,
        @GQLDescription("""The HTTP path for this team's teams""")
        teamsResourcePath: URI,
        @GQLDescription("""The HTTP URL for this team's teams""")
        teamsUrl: URI,
        @GQLDescription(
          """Identifies the date and time when the object was last updated."""
        )
        updatedAt: DateTime,
        @GQLDescription("""The HTTP URL for this team""")
        url: URI,
        @GQLDescription("""Team is adminable by the viewer.""")
        viewerCanAdminister: Boolean,
        @GQLDescription(
          """Check if the viewer is able to change their subscription status for the repository."""
        )
        viewerCanSubscribe: Boolean,
        @GQLDescription(
          """Identifies if the viewer is watching, not watching, or ignoring the subscribable entity."""
        )
        viewerSubscription: Option[SubscriptionState]
    ) extends PermissionGranter
  }

  @GQLDescription(
    """Represents either a issue the viewer can access or a restricted contribution."""
  )
  sealed trait CreatedIssueOrRestrictedContribution
      extends scala.Product
      with scala.Serializable

  object CreatedIssueOrRestrictedContribution {
    @GQLDescription(
      """Represents the contribution a user made on GitHub by opening an issue."""
    )
    case class CreatedIssueContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""The issue that was opened.""")
        issue: Issue,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedIssueOrRestrictedContribution
    @GQLDescription(
      """Represents a private contribution a user made on GitHub."""
    )
    case class RestrictedContribution(
        @GQLDescription(
          """Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access."""
        )
        isRestricted: Boolean,
        @GQLDescription("""When this contribution was made.""")
        occurredAt: DateTime,
        @GQLDescription("""The HTTP path for this contribution.""")
        resourcePath: URI,
        @GQLDescription("""The HTTP URL for this contribution.""")
        url: URI,
        @GQLDescription("""The user who made this contribution.""")
        user: User
    ) extends CreatedIssueOrRestrictedContribution
  }

  @GQLDescription(
    """The possible capabilities for action executions setting."""
  )
  sealed trait ActionExecutionCapabilitySetting
      extends scala.Product
      with scala.Serializable

  object ActionExecutionCapabilitySetting {
    @GQLDescription("""All action executions are enabled.""")
    case object ALL_ACTIONS extends ActionExecutionCapabilitySetting
    @GQLDescription("""All action executions are disabled.""")
    case object DISABLED extends ActionExecutionCapabilitySetting
    @GQLDescription("""Only actions defined within the repo are allowed.""")
    case object LOCAL_ACTIONS_ONLY extends ActionExecutionCapabilitySetting
    @GQLDescription(
      """Organization administrators action execution capabilities."""
    )
    case object NO_POLICY extends ActionExecutionCapabilitySetting
  }

  @GQLDescription(
    """Properties by which Audit Log connections can be ordered."""
  )
  sealed trait AuditLogOrderField extends scala.Product with scala.Serializable

  object AuditLogOrderField {
    @GQLDescription("""Order audit log entries by timestamp""")
    case object CREATED_AT extends AuditLogOrderField
  }

  @GQLDescription("""Collaborators affiliation level with a subject.""")
  sealed trait CollaboratorAffiliation
      extends scala.Product
      with scala.Serializable

  object CollaboratorAffiliation {
    @GQLDescription("""All collaborators the authenticated user can see.""")
    case object ALL extends CollaboratorAffiliation
    @GQLDescription(
      """All collaborators with permissions to an organization-owned subject, regardless of organization membership status."""
    )
    case object DIRECT extends CollaboratorAffiliation
    @GQLDescription(
      """All outside collaborators of an organization-owned subject."""
    )
    case object OUTSIDE extends CollaboratorAffiliation
  }

  @GQLDescription("""A comment author association with repository.""")
  sealed trait CommentAuthorAssociation
      extends scala.Product
      with scala.Serializable

  object CommentAuthorAssociation {
    @GQLDescription(
      """Author has been invited to collaborate on the repository."""
    )
    case object COLLABORATOR extends CommentAuthorAssociation
    @GQLDescription("""Author has previously committed to the repository.""")
    case object CONTRIBUTOR extends CommentAuthorAssociation
    @GQLDescription("""Author has not previously committed to GitHub.""")
    case object FIRST_TIMER extends CommentAuthorAssociation
    @GQLDescription(
      """Author has not previously committed to the repository."""
    )
    case object FIRST_TIME_CONTRIBUTOR extends CommentAuthorAssociation
    @GQLDescription(
      """Author is a member of the organization that owns the repository."""
    )
    case object MEMBER extends CommentAuthorAssociation
    @GQLDescription("""Author has no association with the repository.""")
    case object NONE extends CommentAuthorAssociation
    @GQLDescription("""Author is the owner of the repository.""")
    case object OWNER extends CommentAuthorAssociation
  }

  @GQLDescription(
    """The possible errors that will prevent a user from updating a comment."""
  )
  sealed trait CommentCannotUpdateReason
      extends scala.Product
      with scala.Serializable

  object CommentCannotUpdateReason {
    @GQLDescription(
      """Unable to create comment because repository is archived."""
    )
    case object ARCHIVED extends CommentCannotUpdateReason
    @GQLDescription("""You cannot update this comment""")
    case object DENIED extends CommentCannotUpdateReason
    @GQLDescription(
      """You must be the author or have write access to this repository to update this comment."""
    )
    case object INSUFFICIENT_ACCESS extends CommentCannotUpdateReason
    @GQLDescription("""Unable to create comment because issue is locked.""")
    case object LOCKED extends CommentCannotUpdateReason
    @GQLDescription("""You must be logged in to update this comment.""")
    case object LOGIN_REQUIRED extends CommentCannotUpdateReason
    @GQLDescription("""Repository is under maintenance.""")
    case object MAINTENANCE extends CommentCannotUpdateReason
    @GQLDescription(
      """At least one email address must be verified to update this comment."""
    )
    case object VERIFIED_EMAIL_REQUIRED extends CommentCannotUpdateReason
  }

  @GQLDescription(
    """Properties by which commit contribution connections can be ordered."""
  )
  sealed trait CommitContributionOrderField
      extends scala.Product
      with scala.Serializable

  object CommitContributionOrderField {
    @GQLDescription(
      """Order commit contributions by how many commits they represent."""
    )
    case object COMMIT_COUNT extends CommitContributionOrderField
    @GQLDescription("""Order commit contributions by when they were made.""")
    case object OCCURRED_AT extends CommitContributionOrderField
  }

  @GQLDescription(
    """Properties by which contribution connections can be ordered."""
  )
  sealed trait ContributionOrderField
      extends scala.Product
      with scala.Serializable

  object ContributionOrderField {
    @GQLDescription("""Order contributions by when they were made.""")
    case object OCCURRED_AT extends ContributionOrderField
  }

  @GQLDescription("""The possible default permissions for repositories.""")
  sealed trait DefaultRepositoryPermissionField
      extends scala.Product
      with scala.Serializable

  object DefaultRepositoryPermissionField {
    @GQLDescription("""Can read, write, and administrate repos by default""")
    case object ADMIN extends DefaultRepositoryPermissionField
    @GQLDescription("""No access""")
    case object NONE extends DefaultRepositoryPermissionField
    @GQLDescription("""Can read repos by default""")
    case object READ extends DefaultRepositoryPermissionField
    @GQLDescription("""Can read and write repos by default""")
    case object WRITE extends DefaultRepositoryPermissionField
  }

  @GQLDescription(
    """Properties by which deployment connections can be ordered."""
  )
  sealed trait DeploymentOrderField
      extends scala.Product
      with scala.Serializable

  object DeploymentOrderField {
    @GQLDescription("""Order collection by creation time""")
    case object CREATED_AT extends DeploymentOrderField
  }

  @GQLDescription("""The possible states in which a deployment can be.""")
  sealed trait DeploymentState extends scala.Product with scala.Serializable

  object DeploymentState {
    @GQLDescription(
      """The pending deployment was not updated after 30 minutes."""
    )
    case object ABANDONED extends DeploymentState
    @GQLDescription("""The deployment is currently active.""")
    case object ACTIVE extends DeploymentState
    @GQLDescription("""An inactive transient deployment.""")
    case object DESTROYED extends DeploymentState
    @GQLDescription("""The deployment experienced an error.""")
    case object ERROR extends DeploymentState
    @GQLDescription("""The deployment has failed.""")
    case object FAILURE extends DeploymentState
    @GQLDescription("""The deployment is inactive.""")
    case object INACTIVE extends DeploymentState
    @GQLDescription("""The deployment is in progress.""")
    case object IN_PROGRESS extends DeploymentState
    @GQLDescription("""The deployment is pending.""")
    case object PENDING extends DeploymentState
    @GQLDescription("""The deployment has queued""")
    case object QUEUED extends DeploymentState
  }

  @GQLDescription("""The possible states for a deployment status.""")
  sealed trait DeploymentStatusState
      extends scala.Product
      with scala.Serializable

  object DeploymentStatusState {
    @GQLDescription("""The deployment experienced an error.""")
    case object ERROR extends DeploymentStatusState
    @GQLDescription("""The deployment has failed.""")
    case object FAILURE extends DeploymentStatusState
    @GQLDescription("""The deployment is inactive.""")
    case object INACTIVE extends DeploymentStatusState
    @GQLDescription("""The deployment is in progress.""")
    case object IN_PROGRESS extends DeploymentStatusState
    @GQLDescription("""The deployment is pending.""")
    case object PENDING extends DeploymentStatusState
    @GQLDescription("""The deployment is queued""")
    case object QUEUED extends DeploymentStatusState
    @GQLDescription("""The deployment was successful.""")
    case object SUCCESS extends DeploymentStatusState
  }

  @GQLDescription(
    """Properties by which enterprise administrator invitation connections can be ordered."""
  )
  sealed trait EnterpriseAdministratorInvitationOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseAdministratorInvitationOrderField {
    @GQLDescription(
      """Order enterprise administrator member invitations by creation time"""
    )
    case object CREATED_AT extends EnterpriseAdministratorInvitationOrderField
  }

  @GQLDescription(
    """The possible administrator roles in an enterprise account."""
  )
  sealed trait EnterpriseAdministratorRole
      extends scala.Product
      with scala.Serializable

  object EnterpriseAdministratorRole {
    @GQLDescription(
      """Represents a billing manager of the enterprise account."""
    )
    case object BILLING_MANAGER extends EnterpriseAdministratorRole
    @GQLDescription("""Represents an owner of the enterprise account.""")
    case object OWNER extends EnterpriseAdministratorRole
  }

  @GQLDescription(
    """The possible values for the enterprise default repository permission setting."""
  )
  sealed trait EnterpriseDefaultRepositoryPermissionSettingValue
      extends scala.Product
      with scala.Serializable

  object EnterpriseDefaultRepositoryPermissionSettingValue {
    @GQLDescription(
      """Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories."""
    )
    case object ADMIN extends EnterpriseDefaultRepositoryPermissionSettingValue
    @GQLDescription(
      """Organization members will only be able to clone and pull public repositories."""
    )
    case object NONE extends EnterpriseDefaultRepositoryPermissionSettingValue
    @GQLDescription(
      """Organizations in the enterprise choose default repository permissions for their members."""
    )
    case object NO_POLICY
        extends EnterpriseDefaultRepositoryPermissionSettingValue
    @GQLDescription(
      """Organization members will be able to clone and pull all organization repositories."""
    )
    case object READ extends EnterpriseDefaultRepositoryPermissionSettingValue
    @GQLDescription(
      """Organization members will be able to clone, pull, and push all organization repositories."""
    )
    case object WRITE extends EnterpriseDefaultRepositoryPermissionSettingValue
  }

  @GQLDescription(
    """The possible values for an enabled/disabled enterprise setting."""
  )
  sealed trait EnterpriseEnabledDisabledSettingValue
      extends scala.Product
      with scala.Serializable

  object EnterpriseEnabledDisabledSettingValue {
    @GQLDescription(
      """The setting is disabled for organizations in the enterprise."""
    )
    case object DISABLED extends EnterpriseEnabledDisabledSettingValue
    @GQLDescription(
      """The setting is enabled for organizations in the enterprise."""
    )
    case object ENABLED extends EnterpriseEnabledDisabledSettingValue
    @GQLDescription(
      """There is no policy set for organizations in the enterprise."""
    )
    case object NO_POLICY extends EnterpriseEnabledDisabledSettingValue
  }

  @GQLDescription(
    """The possible values for an enabled/no policy enterprise setting."""
  )
  sealed trait EnterpriseEnabledSettingValue
      extends scala.Product
      with scala.Serializable

  object EnterpriseEnabledSettingValue {
    @GQLDescription(
      """The setting is enabled for organizations in the enterprise."""
    )
    case object ENABLED extends EnterpriseEnabledSettingValue
    @GQLDescription(
      """There is no policy set for organizations in the enterprise."""
    )
    case object NO_POLICY extends EnterpriseEnabledSettingValue
  }

  @GQLDescription(
    """Properties by which enterprise member connections can be ordered."""
  )
  sealed trait EnterpriseMemberOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseMemberOrderField {
    @GQLDescription("""Order enterprise members by creation time""")
    case object CREATED_AT extends EnterpriseMemberOrderField
    @GQLDescription("""Order enterprise members by login""")
    case object LOGIN extends EnterpriseMemberOrderField
  }

  @GQLDescription(
    """The possible values for the enterprise members can create repositories setting."""
  )
  sealed trait EnterpriseMembersCanCreateRepositoriesSettingValue
      extends scala.Product
      with scala.Serializable

  object EnterpriseMembersCanCreateRepositoriesSettingValue {
    @GQLDescription(
      """Members will be able to create public and private repositories."""
    )
    case object ALL extends EnterpriseMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Members will not be able to create public or private repositories."""
    )
    case object DISABLED
        extends EnterpriseMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Organization administrators choose whether to allow members to create repositories."""
    )
    case object NO_POLICY
        extends EnterpriseMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Members will be able to create only private repositories."""
    )
    case object PRIVATE
        extends EnterpriseMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Members will be able to create only public repositories."""
    )
    case object PUBLIC
        extends EnterpriseMembersCanCreateRepositoriesSettingValue
  }

  @GQLDescription(
    """The possible values for the members can make purchases setting."""
  )
  sealed trait EnterpriseMembersCanMakePurchasesSettingValue
      extends scala.Product
      with scala.Serializable

  object EnterpriseMembersCanMakePurchasesSettingValue {
    @GQLDescription(
      """The setting is disabled for organizations in the enterprise."""
    )
    case object DISABLED extends EnterpriseMembersCanMakePurchasesSettingValue
    @GQLDescription(
      """The setting is enabled for organizations in the enterprise."""
    )
    case object ENABLED extends EnterpriseMembersCanMakePurchasesSettingValue
  }

  @GQLDescription(
    """Properties by which Enterprise Server installation connections can be ordered."""
  )
  sealed trait EnterpriseServerInstallationOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseServerInstallationOrderField {
    @GQLDescription(
      """Order Enterprise Server installations by creation time"""
    )
    case object CREATED_AT extends EnterpriseServerInstallationOrderField
    @GQLDescription(
      """Order Enterprise Server installations by customer name"""
    )
    case object CUSTOMER_NAME extends EnterpriseServerInstallationOrderField
    @GQLDescription("""Order Enterprise Server installations by host name""")
    case object HOST_NAME extends EnterpriseServerInstallationOrderField
  }

  @GQLDescription(
    """Properties by which Enterprise Server user account email connections can be ordered."""
  )
  sealed trait EnterpriseServerUserAccountEmailOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountEmailOrderField {
    @GQLDescription("""Order emails by email""")
    case object EMAIL extends EnterpriseServerUserAccountEmailOrderField
  }

  @GQLDescription(
    """Properties by which Enterprise Server user account connections can be ordered."""
  )
  sealed trait EnterpriseServerUserAccountOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountOrderField {
    @GQLDescription("""Order user accounts by login""")
    case object LOGIN extends EnterpriseServerUserAccountOrderField
    @GQLDescription(
      """Order user accounts by creation time on the Enterprise Server installation"""
    )
    case object REMOTE_CREATED_AT extends EnterpriseServerUserAccountOrderField
  }

  @GQLDescription(
    """Properties by which Enterprise Server user accounts upload connections can be ordered."""
  )
  sealed trait EnterpriseServerUserAccountsUploadOrderField
      extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountsUploadOrderField {
    @GQLDescription("""Order user accounts uploads by creation time""")
    case object CREATED_AT extends EnterpriseServerUserAccountsUploadOrderField
  }

  @GQLDescription(
    """Synchronization state of the Enterprise Server user accounts upload"""
  )
  sealed trait EnterpriseServerUserAccountsUploadSyncState
      extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountsUploadSyncState {
    @GQLDescription("""The synchronization of the upload failed.""")
    case object FAILURE extends EnterpriseServerUserAccountsUploadSyncState
    @GQLDescription("""The synchronization of the upload is pending.""")
    case object PENDING extends EnterpriseServerUserAccountsUploadSyncState
    @GQLDescription("""The synchronization of the upload succeeded.""")
    case object SUCCESS extends EnterpriseServerUserAccountsUploadSyncState
  }

  @GQLDescription("""The possible roles for enterprise membership.""")
  sealed trait EnterpriseUserAccountMembershipRole
      extends scala.Product
      with scala.Serializable

  object EnterpriseUserAccountMembershipRole {
    @GQLDescription("""The user is a member of the enterprise membership.""")
    case object MEMBER extends EnterpriseUserAccountMembershipRole
    @GQLDescription("""The user is an owner of the enterprise membership.""")
    case object OWNER extends EnterpriseUserAccountMembershipRole
  }

  @GQLDescription(
    """The possible GitHub Enterprise deployments where this user can exist."""
  )
  sealed trait EnterpriseUserDeployment
      extends scala.Product
      with scala.Serializable

  object EnterpriseUserDeployment {
    @GQLDescription(
      """The user is part of a GitHub Enterprise Cloud deployment."""
    )
    case object CLOUD extends EnterpriseUserDeployment
    @GQLDescription(
      """The user is part of a GitHub Enterprise Server deployment."""
    )
    case object SERVER extends EnterpriseUserDeployment
  }

  @GQLDescription(
    """The possible funding platforms for repository funding links."""
  )
  sealed trait FundingPlatform extends scala.Product with scala.Serializable

  object FundingPlatform {
    @GQLDescription("""Community Bridge funding platform.""")
    case object COMMUNITY_BRIDGE extends FundingPlatform
    @GQLDescription("""Custom funding platform.""")
    case object CUSTOM extends FundingPlatform
    @GQLDescription("""GitHub funding platform.""")
    case object GITHUB extends FundingPlatform
    @GQLDescription("""IssueHunt funding platform.""")
    case object ISSUEHUNT extends FundingPlatform
    @GQLDescription("""Ko-fi funding platform.""")
    case object KO_FI extends FundingPlatform
    @GQLDescription("""Liberapay funding platform.""")
    case object LIBERAPAY extends FundingPlatform
    @GQLDescription("""Open Collective funding platform.""")
    case object OPEN_COLLECTIVE extends FundingPlatform
    @GQLDescription("""Otechie funding platform.""")
    case object OTECHIE extends FundingPlatform
    @GQLDescription("""Patreon funding platform.""")
    case object PATREON extends FundingPlatform
    @GQLDescription("""Tidelift funding platform.""")
    case object TIDELIFT extends FundingPlatform
  }

  @GQLDescription("""Properties by which gist connections can be ordered.""")
  sealed trait GistOrderField extends scala.Product with scala.Serializable

  object GistOrderField {
    @GQLDescription("""Order gists by creation time""")
    case object CREATED_AT extends GistOrderField
    @GQLDescription("""Order gists by push time""")
    case object PUSHED_AT extends GistOrderField
    @GQLDescription("""Order gists by update time""")
    case object UPDATED_AT extends GistOrderField
  }

  @GQLDescription("""The privacy of a Gist""")
  sealed trait GistPrivacy extends scala.Product with scala.Serializable

  object GistPrivacy {
    @GQLDescription("""Gists that are public and secret""")
    case object ALL extends GistPrivacy
    @GQLDescription("""Public""")
    case object PUBLIC extends GistPrivacy
    @GQLDescription("""Secret""")
    case object SECRET extends GistPrivacy
  }

  @GQLDescription("""The state of a Git signature.""")
  sealed trait GitSignatureState extends scala.Product with scala.Serializable

  object GitSignatureState {
    @GQLDescription(
      """The signing certificate or its chain could not be verified"""
    )
    case object BAD_CERT extends GitSignatureState
    @GQLDescription("""Invalid email used for signing""")
    case object BAD_EMAIL extends GitSignatureState
    @GQLDescription("""Signing key expired""")
    case object EXPIRED_KEY extends GitSignatureState
    @GQLDescription(
      """Internal error - the GPG verification service misbehaved"""
    )
    case object GPGVERIFY_ERROR extends GitSignatureState
    @GQLDescription(
      """Internal error - the GPG verification service is unavailable at the moment"""
    )
    case object GPGVERIFY_UNAVAILABLE extends GitSignatureState
    @GQLDescription("""Invalid signature""")
    case object INVALID extends GitSignatureState
    @GQLDescription("""Malformed signature""")
    case object MALFORMED_SIG extends GitSignatureState
    @GQLDescription(
      """The usage flags for the key that signed this don't allow signing"""
    )
    case object NOT_SIGNING_KEY extends GitSignatureState
    @GQLDescription("""Email used for signing not known to GitHub""")
    case object NO_USER extends GitSignatureState
    @GQLDescription(
      """Valid siganture, though certificate revocation check failed"""
    )
    case object OCSP_ERROR extends GitSignatureState
    @GQLDescription(
      """Valid signature, pending certificate revocation checking"""
    )
    case object OCSP_PENDING extends GitSignatureState
    @GQLDescription("""One or more certificates in chain has been revoked""")
    case object OCSP_REVOKED extends GitSignatureState
    @GQLDescription("""Key used for signing not known to GitHub""")
    case object UNKNOWN_KEY extends GitSignatureState
    @GQLDescription("""Unknown signature type""")
    case object UNKNOWN_SIG_TYPE extends GitSignatureState
    @GQLDescription("""Unsigned""")
    case object UNSIGNED extends GitSignatureState
    @GQLDescription("""Email used for signing unverified on GitHub""")
    case object UNVERIFIED_EMAIL extends GitSignatureState
    @GQLDescription("""Valid signature and verified by GitHub""")
    case object VALID extends GitSignatureState
  }

  @GQLDescription(
    """The possible states in which authentication can be configured with an identity provider."""
  )
  sealed trait IdentityProviderConfigurationState
      extends scala.Product
      with scala.Serializable

  object IdentityProviderConfigurationState {
    @GQLDescription(
      """Authentication with an identity provider is configured but not enforced."""
    )
    case object CONFIGURED extends IdentityProviderConfigurationState
    @GQLDescription(
      """Authentication with an identity provider is configured and enforced."""
    )
    case object ENFORCED extends IdentityProviderConfigurationState
    @GQLDescription(
      """Authentication with an identity provider is not configured."""
    )
    case object UNCONFIGURED extends IdentityProviderConfigurationState
  }

  @GQLDescription(
    """The possible values for the IP allow list enabled setting."""
  )
  sealed trait IpAllowListEnabledSettingValue
      extends scala.Product
      with scala.Serializable

  object IpAllowListEnabledSettingValue {
    @GQLDescription("""The setting is disabled for the owner.""")
    case object DISABLED extends IpAllowListEnabledSettingValue
    @GQLDescription("""The setting is enabled for the owner.""")
    case object ENABLED extends IpAllowListEnabledSettingValue
  }

  @GQLDescription(
    """Properties by which IP allow list entry connections can be ordered."""
  )
  sealed trait IpAllowListEntryOrderField
      extends scala.Product
      with scala.Serializable

  object IpAllowListEntryOrderField {
    @GQLDescription("""Order IP allow list entries by the allow list value.""")
    case object ALLOW_LIST_VALUE extends IpAllowListEntryOrderField
    @GQLDescription("""Order IP allow list entries by creation time.""")
    case object CREATED_AT extends IpAllowListEntryOrderField
  }

  @GQLDescription("""Properties by which issue connections can be ordered.""")
  sealed trait IssueOrderField extends scala.Product with scala.Serializable

  object IssueOrderField {
    @GQLDescription("""Order issues by comment count""")
    case object COMMENTS extends IssueOrderField
    @GQLDescription("""Order issues by creation time""")
    case object CREATED_AT extends IssueOrderField
    @GQLDescription("""Order issues by update time""")
    case object UPDATED_AT extends IssueOrderField
  }

  @GQLDescription("""The possible states of an issue.""")
  sealed trait IssueState extends scala.Product with scala.Serializable

  object IssueState {
    @GQLDescription("""An issue that has been closed""")
    case object CLOSED extends IssueState
    @GQLDescription("""An issue that is still open""")
    case object OPEN extends IssueState
  }

  @GQLDescription("""The possible item types found in a timeline.""")
  sealed trait IssueTimelineItemsItemType
      extends scala.Product
      with scala.Serializable

  object IssueTimelineItemsItemType {
    @GQLDescription(
      """Represents a 'added_to_project' event on a given issue or pull request."""
    )
    case object ADDED_TO_PROJECT_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case object ASSIGNED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case object CLOSED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'comment_deleted' event on a given issue or pull request."""
    )
    case object COMMENT_DELETED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'connected' event on a given issue or pull request."""
    )
    case object CONNECTED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'converted_note_to_issue' event on a given issue or pull request."""
    )
    case object CONVERTED_NOTE_TO_ISSUE_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case object CROSS_REFERENCED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case object DEMILESTONED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'disconnected' event on a given issue or pull request."""
    )
    case object DISCONNECTED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription("""Represents a comment on an Issue.""")
    case object ISSUE_COMMENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case object LABELED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case object LOCKED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'marked_as_duplicate' event on a given issue or pull request."""
    )
    case object MARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'mentioned' event on a given issue or pull request."""
    )
    case object MENTIONED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case object MILESTONED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'moved_columns_in_project' event on a given issue or pull request."""
    )
    case object MOVED_COLUMNS_IN_PROJECT_EVENT
        extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'pinned' event on a given issue or pull request."""
    )
    case object PINNED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case object REFERENCED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'removed_from_project' event on a given issue or pull request."""
    )
    case object REMOVED_FROM_PROJECT_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case object RENAMED_TITLE_EVENT extends IssueTimelineItemsItemType
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case object REOPENED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case object SUBSCRIBED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents a 'transferred' event on a given issue or pull request."""
    )
    case object TRANSFERRED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case object UNASSIGNED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case object UNLABELED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case object UNLOCKED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unmarked_as_duplicate' event on a given issue or pull request."""
    )
    case object UNMARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unpinned' event on a given issue or pull request."""
    )
    case object UNPINNED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case object UNSUBSCRIBED_EVENT extends IssueTimelineItemsItemType
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case object USER_BLOCKED_EVENT extends IssueTimelineItemsItemType
  }

  @GQLDescription("""Properties by which label connections can be ordered.""")
  sealed trait LabelOrderField extends scala.Product with scala.Serializable

  object LabelOrderField {
    @GQLDescription("""Order labels by creation time""")
    case object CREATED_AT extends LabelOrderField
    @GQLDescription("""Order labels by name """)
    case object NAME extends LabelOrderField
  }

  @GQLDescription(
    """Properties by which language connections can be ordered."""
  )
  sealed trait LanguageOrderField extends scala.Product with scala.Serializable

  object LanguageOrderField {
    @GQLDescription(
      """Order languages by the size of all files containing the language"""
    )
    case object SIZE extends LanguageOrderField
  }

  @GQLDescription(
    """The possible reasons that an issue or pull request was locked."""
  )
  sealed trait LockReason extends scala.Product with scala.Serializable

  object LockReason {
    @GQLDescription(
      """The issue or pull request was locked because the conversation was off-topic."""
    )
    case object OFF_TOPIC extends LockReason
    @GQLDescription(
      """The issue or pull request was locked because the conversation was resolved."""
    )
    case object RESOLVED extends LockReason
    @GQLDescription(
      """The issue or pull request was locked because the conversation was spam."""
    )
    case object SPAM extends LockReason
    @GQLDescription(
      """The issue or pull request was locked because the conversation was too heated."""
    )
    case object TOO_HEATED extends LockReason
  }

  @GQLDescription("""Whether or not a PullRequest can be merged.""")
  sealed trait MergeableState extends scala.Product with scala.Serializable

  object MergeableState {
    @GQLDescription(
      """The pull request cannot be merged due to merge conflicts."""
    )
    case object CONFLICTING extends MergeableState
    @GQLDescription("""The pull request can be merged.""")
    case object MERGEABLE extends MergeableState
    @GQLDescription(
      """The mergeability of the pull request is still being calculated."""
    )
    case object UNKNOWN extends MergeableState
  }

  @GQLDescription(
    """Properties by which milestone connections can be ordered."""
  )
  sealed trait MilestoneOrderField extends scala.Product with scala.Serializable

  object MilestoneOrderField {
    @GQLDescription("""Order milestones by when they were created.""")
    case object CREATED_AT extends MilestoneOrderField
    @GQLDescription("""Order milestones by when they are due.""")
    case object DUE_DATE extends MilestoneOrderField
    @GQLDescription("""Order milestones by their number.""")
    case object NUMBER extends MilestoneOrderField
    @GQLDescription("""Order milestones by when they were last updated.""")
    case object UPDATED_AT extends MilestoneOrderField
  }

  @GQLDescription("""The possible states of a milestone.""")
  sealed trait MilestoneState extends scala.Product with scala.Serializable

  object MilestoneState {
    @GQLDescription("""A milestone that has been closed.""")
    case object CLOSED extends MilestoneState
    @GQLDescription("""A milestone that is still open.""")
    case object OPEN extends MilestoneState
  }

  @GQLDescription("""The state of an OAuth Application when it was created.""")
  sealed trait OauthApplicationCreateAuditEntryState
      extends scala.Product
      with scala.Serializable

  object OauthApplicationCreateAuditEntryState {
    @GQLDescription(
      """The OAuth Application was active and allowed to have OAuth Accesses."""
    )
    case object ACTIVE extends OauthApplicationCreateAuditEntryState
    @GQLDescription(
      """The OAuth Application was in the process of being deleted."""
    )
    case object PENDING_DELETION extends OauthApplicationCreateAuditEntryState
    @GQLDescription(
      """The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns."""
    )
    case object SUSPENDED extends OauthApplicationCreateAuditEntryState
  }

  @GQLDescription("""The corresponding operation type for the action""")
  sealed trait OperationType extends scala.Product with scala.Serializable

  object OperationType {
    @GQLDescription("""An existing resource was accessed""")
    case object ACCESS extends OperationType
    @GQLDescription("""A resource performed an authentication event""")
    case object AUTHENTICATION extends OperationType
    @GQLDescription("""A new resource was created""")
    case object CREATE extends OperationType
    @GQLDescription("""An existing resource was modified""")
    case object MODIFY extends OperationType
    @GQLDescription("""An existing resource was removed""")
    case object REMOVE extends OperationType
    @GQLDescription("""An existing resource was restored""")
    case object RESTORE extends OperationType
    @GQLDescription(
      """An existing resource was transferred between multiple resources"""
    )
    case object TRANSFER extends OperationType
  }

  @GQLDescription(
    """Possible directions in which to order a list of items when provided an `orderBy` argument."""
  )
  sealed trait OrderDirection extends scala.Product with scala.Serializable

  object OrderDirection {
    @GQLDescription(
      """Specifies an ascending order for a given `orderBy` argument."""
    )
    case object ASC extends OrderDirection
    @GQLDescription(
      """Specifies a descending order for a given `orderBy` argument."""
    )
    case object DESC extends OrderDirection
  }

  @GQLDescription(
    """The permissions available to members on an Organization."""
  )
  sealed trait OrgAddMemberAuditEntryPermission
      extends scala.Product
      with scala.Serializable

  object OrgAddMemberAuditEntryPermission {
    @GQLDescription(
      """Can read, clone, push, and add collaborators to repositories."""
    )
    case object ADMIN extends OrgAddMemberAuditEntryPermission
    @GQLDescription("""Can read and clone repositories.""")
    case object READ extends OrgAddMemberAuditEntryPermission
  }

  @GQLDescription("""The billing plans available for organizations.""")
  sealed trait OrgCreateAuditEntryBillingPlan
      extends scala.Product
      with scala.Serializable

  object OrgCreateAuditEntryBillingPlan {
    @GQLDescription("""Team Plan""")
    case object BUSINESS extends OrgCreateAuditEntryBillingPlan
    @GQLDescription("""Enterprise Cloud Plan""")
    case object BUSINESS_PLUS extends OrgCreateAuditEntryBillingPlan
    @GQLDescription("""Free Plan""")
    case object FREE extends OrgCreateAuditEntryBillingPlan
    @GQLDescription("""Tiered Per Seat Plan""")
    case object TIERED_PER_SEAT extends OrgCreateAuditEntryBillingPlan
    @GQLDescription("""Legacy Unlimited Plan""")
    case object UNLIMITED extends OrgCreateAuditEntryBillingPlan
  }

  @GQLDescription(
    """The reason a billing manager was removed from an Organization."""
  )
  sealed trait OrgRemoveBillingManagerAuditEntryReason
      extends scala.Product
      with scala.Serializable

  object OrgRemoveBillingManagerAuditEntryReason {
    @GQLDescription("""SAML external identity missing""")
    case object SAML_EXTERNAL_IDENTITY_MISSING
        extends OrgRemoveBillingManagerAuditEntryReason
    @GQLDescription("""SAML SSO enforcement requires an external identity""")
    case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
        extends OrgRemoveBillingManagerAuditEntryReason
    @GQLDescription(
      """The organization required 2FA of its billing managers and this user did not have 2FA enabled."""
    )
    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        extends OrgRemoveBillingManagerAuditEntryReason
  }

  @GQLDescription("""The type of membership a user has with an Organization.""")
  sealed trait OrgRemoveMemberAuditEntryMembershipType
      extends scala.Product
      with scala.Serializable

  object OrgRemoveMemberAuditEntryMembershipType {
    @GQLDescription(
      """Organization administrators have full access and can change several settings,
including the names of repositories that belong to the Organization and Owners
team membership. In addition, organization admins can delete the organization
and all of its repositories."""
    )
    case object ADMIN extends OrgRemoveMemberAuditEntryMembershipType
    @GQLDescription(
      """A billing manager is a user who manages the billing settings for the Organization, such as updating payment information."""
    )
    case object BILLING_MANAGER extends OrgRemoveMemberAuditEntryMembershipType
    @GQLDescription(
      """A direct member is a user that is a member of the Organization."""
    )
    case object DIRECT_MEMBER extends OrgRemoveMemberAuditEntryMembershipType
    @GQLDescription(
      """An outside collaborator is a person who isn't explicitly a member of the
Organization, but who has Read, Write, or Admin permissions to one or more
repositories in the organization."""
    )
    case object OUTSIDE_COLLABORATOR
        extends OrgRemoveMemberAuditEntryMembershipType
    @GQLDescription(
      """An unaffiliated collaborator is a person who is not a member of the
Organization and does not have access to any repositories in the Organization."""
    )
    case object UNAFFILIATED extends OrgRemoveMemberAuditEntryMembershipType
  }

  @GQLDescription("""The reason a member was removed from an Organization.""")
  sealed trait OrgRemoveMemberAuditEntryReason
      extends scala.Product
      with scala.Serializable

  object OrgRemoveMemberAuditEntryReason {
    @GQLDescription("""SAML external identity missing""")
    case object SAML_EXTERNAL_IDENTITY_MISSING
        extends OrgRemoveMemberAuditEntryReason
    @GQLDescription("""SAML SSO enforcement requires an external identity""")
    case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
        extends OrgRemoveMemberAuditEntryReason
    @GQLDescription(
      """The organization required 2FA of its billing managers and this user did not have 2FA enabled."""
    )
    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        extends OrgRemoveMemberAuditEntryReason
  }

  @GQLDescription("""The type of membership a user has with an Organization.""")
  sealed trait OrgRemoveOutsideCollaboratorAuditEntryMembershipType
      extends scala.Product
      with scala.Serializable

  object OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
    @GQLDescription(
      """A billing manager is a user who manages the billing settings for the Organization, such as updating payment information."""
    )
    case object BILLING_MANAGER
        extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType
    @GQLDescription(
      """An outside collaborator is a person who isn't explicitly a member of the
Organization, but who has Read, Write, or Admin permissions to one or more
repositories in the organization."""
    )
    case object OUTSIDE_COLLABORATOR
        extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType
    @GQLDescription(
      """An unaffiliated collaborator is a person who is not a member of the
Organization and does not have access to any repositories in the organization."""
    )
    case object UNAFFILIATED
        extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType
  }

  @GQLDescription(
    """The reason an outside collaborator was removed from an Organization."""
  )
  sealed trait OrgRemoveOutsideCollaboratorAuditEntryReason
      extends scala.Product
      with scala.Serializable

  object OrgRemoveOutsideCollaboratorAuditEntryReason {
    @GQLDescription("""SAML external identity missing""")
    case object SAML_EXTERNAL_IDENTITY_MISSING
        extends OrgRemoveOutsideCollaboratorAuditEntryReason
    @GQLDescription(
      """The organization required 2FA of its billing managers and this user did not have 2FA enabled."""
    )
    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        extends OrgRemoveOutsideCollaboratorAuditEntryReason
  }

  @GQLDescription(
    """The default permission a repository can have in an Organization."""
  )
  sealed trait OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
      extends scala.Product
      with scala.Serializable

  object OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
    @GQLDescription(
      """Can read, clone, push, and add collaborators to repositories."""
    )
    case object ADMIN
        extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    @GQLDescription("""No default permission value.""")
    case object NONE
        extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    @GQLDescription("""Can read and clone repositories.""")
    case object READ
        extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    @GQLDescription("""Can read, clone and push to repositories.""")
    case object WRITE
        extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  }

  @GQLDescription(
    """The permissions available to members on an Organization."""
  )
  sealed trait OrgUpdateMemberAuditEntryPermission
      extends scala.Product
      with scala.Serializable

  object OrgUpdateMemberAuditEntryPermission {
    @GQLDescription(
      """Can read, clone, push, and add collaborators to repositories."""
    )
    case object ADMIN extends OrgUpdateMemberAuditEntryPermission
    @GQLDescription("""Can read and clone repositories.""")
    case object READ extends OrgUpdateMemberAuditEntryPermission
  }

  @GQLDescription(
    """The permissions available for repository creation on an Organization."""
  )
  sealed trait OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
    @GQLDescription(
      """All organization members are restricted from creating any repositories."""
    )
    case object ALL
        extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    @GQLDescription(
      """All organization members are restricted from creating public repositories."""
    )
    case object PUBLIC
        extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
  }

  @GQLDescription("""The possible organization invitation roles.""")
  sealed trait OrganizationInvitationRole
      extends scala.Product
      with scala.Serializable

  object OrganizationInvitationRole {
    @GQLDescription(
      """The user is invited to be an admin of the organization."""
    )
    case object ADMIN extends OrganizationInvitationRole
    @GQLDescription(
      """The user is invited to be a billing manager of the organization."""
    )
    case object BILLING_MANAGER extends OrganizationInvitationRole
    @GQLDescription(
      """The user is invited to be a direct member of the organization."""
    )
    case object DIRECT_MEMBER extends OrganizationInvitationRole
    @GQLDescription("""The user's previous role will be reinstated.""")
    case object REINSTATE extends OrganizationInvitationRole
  }

  @GQLDescription("""The possible organization invitation types.""")
  sealed trait OrganizationInvitationType
      extends scala.Product
      with scala.Serializable

  object OrganizationInvitationType {
    @GQLDescription("""The invitation was to an email address.""")
    case object EMAIL extends OrganizationInvitationType
    @GQLDescription("""The invitation was to an existing user.""")
    case object USER extends OrganizationInvitationType
  }

  @GQLDescription(
    """The possible roles within an organization for its members."""
  )
  sealed trait OrganizationMemberRole
      extends scala.Product
      with scala.Serializable

  object OrganizationMemberRole {
    @GQLDescription("""The user is an administrator of the organization.""")
    case object ADMIN extends OrganizationMemberRole
    @GQLDescription("""The user is a member of the organization.""")
    case object MEMBER extends OrganizationMemberRole
  }

  @GQLDescription(
    """The possible values for the members can create repositories setting on an organization."""
  )
  sealed trait OrganizationMembersCanCreateRepositoriesSettingValue
      extends scala.Product
      with scala.Serializable

  object OrganizationMembersCanCreateRepositoriesSettingValue {
    @GQLDescription(
      """Members will be able to create public and private repositories."""
    )
    case object ALL extends OrganizationMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Members will not be able to create public or private repositories."""
    )
    case object DISABLED
        extends OrganizationMembersCanCreateRepositoriesSettingValue
    @GQLDescription(
      """Members will be able to create only private repositories."""
    )
    case object PRIVATE
        extends OrganizationMembersCanCreateRepositoriesSettingValue
  }

  @GQLDescription(
    """Properties by which organization connections can be ordered."""
  )
  sealed trait OrganizationOrderField
      extends scala.Product
      with scala.Serializable

  object OrganizationOrderField {
    @GQLDescription("""Order organizations by creation time""")
    case object CREATED_AT extends OrganizationOrderField
    @GQLDescription("""Order organizations by login""")
    case object LOGIN extends OrganizationOrderField
  }

  @GQLDescription(
    """Represents items that can be pinned to a profile page or dashboard."""
  )
  sealed trait PinnableItemType extends scala.Product with scala.Serializable

  object PinnableItemType {
    @GQLDescription("""A gist.""")
    case object GIST extends PinnableItemType
    @GQLDescription("""An issue.""")
    case object ISSUE extends PinnableItemType
    @GQLDescription("""An organization.""")
    case object ORGANIZATION extends PinnableItemType
    @GQLDescription("""A project.""")
    case object PROJECT extends PinnableItemType
    @GQLDescription("""A pull request.""")
    case object PULL_REQUEST extends PinnableItemType
    @GQLDescription("""A repository.""")
    case object REPOSITORY extends PinnableItemType
    @GQLDescription("""A team.""")
    case object TEAM extends PinnableItemType
    @GQLDescription("""A user.""")
    case object USER extends PinnableItemType
  }

  @GQLDescription("""The possible archived states of a project card.""")
  sealed trait ProjectCardArchivedState
      extends scala.Product
      with scala.Serializable

  object ProjectCardArchivedState {
    @GQLDescription("""A project card that is archived""")
    case object ARCHIVED extends ProjectCardArchivedState
    @GQLDescription("""A project card that is not archived""")
    case object NOT_ARCHIVED extends ProjectCardArchivedState
  }

  @GQLDescription("""Various content states of a ProjectCard""")
  sealed trait ProjectCardState extends scala.Product with scala.Serializable

  object ProjectCardState {
    @GQLDescription("""The card has content only.""")
    case object CONTENT_ONLY extends ProjectCardState
    @GQLDescription("""The card has a note only.""")
    case object NOTE_ONLY extends ProjectCardState
    @GQLDescription("""The card is redacted.""")
    case object REDACTED extends ProjectCardState
  }

  @GQLDescription(
    """The semantic purpose of the column - todo, in progress, or done."""
  )
  sealed trait ProjectColumnPurpose
      extends scala.Product
      with scala.Serializable

  object ProjectColumnPurpose {
    @GQLDescription("""The column contains cards which are complete""")
    case object DONE extends ProjectColumnPurpose
    @GQLDescription(
      """The column contains cards which are currently being worked on"""
    )
    case object IN_PROGRESS extends ProjectColumnPurpose
    @GQLDescription("""The column contains cards still to be worked on""")
    case object TODO extends ProjectColumnPurpose
  }

  @GQLDescription("""Properties by which project connections can be ordered.""")
  sealed trait ProjectOrderField extends scala.Product with scala.Serializable

  object ProjectOrderField {
    @GQLDescription("""Order projects by creation time""")
    case object CREATED_AT extends ProjectOrderField
    @GQLDescription("""Order projects by name""")
    case object NAME extends ProjectOrderField
    @GQLDescription("""Order projects by update time""")
    case object UPDATED_AT extends ProjectOrderField
  }

  @GQLDescription("""State of the project; either 'open' or 'closed'""")
  sealed trait ProjectState extends scala.Product with scala.Serializable

  object ProjectState {
    @GQLDescription("""The project is closed.""")
    case object CLOSED extends ProjectState
    @GQLDescription("""The project is open.""")
    case object OPEN extends ProjectState
  }

  @GQLDescription("""GitHub-provided templates for Projects""")
  sealed trait ProjectTemplate extends scala.Product with scala.Serializable

  object ProjectTemplate {
    @GQLDescription(
      """Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns."""
    )
    case object AUTOMATED_KANBAN_V2 extends ProjectTemplate
    @GQLDescription(
      """Create a board with triggers to automatically move cards across columns with review automation."""
    )
    case object AUTOMATED_REVIEWS_KANBAN extends ProjectTemplate
    @GQLDescription(
      """Create a board with columns for To do, In progress and Done."""
    )
    case object BASIC_KANBAN extends ProjectTemplate
    @GQLDescription(
      """Create a board to triage and prioritize bugs with To do, priority, and Done columns."""
    )
    case object BUG_TRIAGE extends ProjectTemplate
  }

  @GQLDescription(
    """Represents available types of methods to use when merging a pull request."""
  )
  sealed trait PullRequestMergeMethod
      extends scala.Product
      with scala.Serializable

  object PullRequestMergeMethod {
    @GQLDescription(
      """Add all commits from the head branch to the base branch with a merge commit."""
    )
    case object MERGE extends PullRequestMergeMethod
    @GQLDescription(
      """Add all commits from the head branch onto the base branch individually."""
    )
    case object REBASE extends PullRequestMergeMethod
    @GQLDescription(
      """Combine all commits from the head branch into a single commit in the base branch."""
    )
    case object SQUASH extends PullRequestMergeMethod
  }

  @GQLDescription(
    """Properties by which pull_requests connections can be ordered."""
  )
  sealed trait PullRequestOrderField
      extends scala.Product
      with scala.Serializable

  object PullRequestOrderField {
    @GQLDescription("""Order pull_requests by creation time""")
    case object CREATED_AT extends PullRequestOrderField
    @GQLDescription("""Order pull_requests by update time""")
    case object UPDATED_AT extends PullRequestOrderField
  }

  @GQLDescription("""The possible states of a pull request review comment.""")
  sealed trait PullRequestReviewCommentState
      extends scala.Product
      with scala.Serializable

  object PullRequestReviewCommentState {
    @GQLDescription("""A comment that is part of a pending review""")
    case object PENDING extends PullRequestReviewCommentState
    @GQLDescription("""A comment that is part of a submitted review""")
    case object SUBMITTED extends PullRequestReviewCommentState
  }

  @GQLDescription("""The review status of a pull request.""")
  sealed trait PullRequestReviewDecision
      extends scala.Product
      with scala.Serializable

  object PullRequestReviewDecision {
    @GQLDescription("""The pull request has received an approving review.""")
    case object APPROVED extends PullRequestReviewDecision
    @GQLDescription("""Changes have been requested on the pull request.""")
    case object CHANGES_REQUESTED extends PullRequestReviewDecision
    @GQLDescription(
      """A review is required before the pull request can be merged."""
    )
    case object REVIEW_REQUIRED extends PullRequestReviewDecision
  }

  @GQLDescription(
    """The possible events to perform on a pull request review."""
  )
  sealed trait PullRequestReviewEvent
      extends scala.Product
      with scala.Serializable

  object PullRequestReviewEvent {
    @GQLDescription("""Submit feedback and approve merging these changes.""")
    case object APPROVE extends PullRequestReviewEvent
    @GQLDescription("""Submit general feedback without explicit approval.""")
    case object COMMENT extends PullRequestReviewEvent
    @GQLDescription("""Dismiss review so it now longer effects merging.""")
    case object DISMISS extends PullRequestReviewEvent
    @GQLDescription(
      """Submit feedback that must be addressed before merging."""
    )
    case object REQUEST_CHANGES extends PullRequestReviewEvent
  }

  @GQLDescription("""The possible states of a pull request review.""")
  sealed trait PullRequestReviewState
      extends scala.Product
      with scala.Serializable

  object PullRequestReviewState {
    @GQLDescription("""A review allowing the pull request to merge.""")
    case object APPROVED extends PullRequestReviewState
    @GQLDescription("""A review blocking the pull request from merging.""")
    case object CHANGES_REQUESTED extends PullRequestReviewState
    @GQLDescription("""An informational review.""")
    case object COMMENTED extends PullRequestReviewState
    @GQLDescription("""A review that has been dismissed.""")
    case object DISMISSED extends PullRequestReviewState
    @GQLDescription("""A review that has not yet been submitted.""")
    case object PENDING extends PullRequestReviewState
  }

  @GQLDescription("""The possible states of a pull request.""")
  sealed trait PullRequestState extends scala.Product with scala.Serializable

  object PullRequestState {
    @GQLDescription(
      """A pull request that has been closed without being merged."""
    )
    case object CLOSED extends PullRequestState
    @GQLDescription("""A pull request that has been closed by being merged.""")
    case object MERGED extends PullRequestState
    @GQLDescription("""A pull request that is still open.""")
    case object OPEN extends PullRequestState
  }

  @GQLDescription("""The possible item types found in a timeline.""")
  sealed trait PullRequestTimelineItemsItemType
      extends scala.Product
      with scala.Serializable

  object PullRequestTimelineItemsItemType {
    @GQLDescription(
      """Represents a 'added_to_project' event on a given issue or pull request."""
    )
    case object ADDED_TO_PROJECT_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'assigned' event on any assignable object."""
    )
    case object ASSIGNED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'base_ref_changed' event on a given issue or pull request."""
    )
    case object BASE_REF_CHANGED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'base_ref_force_pushed' event on a given pull request."""
    )
    case object BASE_REF_FORCE_PUSHED_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a 'closed' event on any `Closable`.""")
    case object CLOSED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'comment_deleted' event on a given issue or pull request."""
    )
    case object COMMENT_DELETED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'connected' event on a given issue or pull request."""
    )
    case object CONNECTED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'converted_note_to_issue' event on a given issue or pull request."""
    )
    case object CONVERTED_NOTE_TO_ISSUE_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a mention made by one issue or pull request to another."""
    )
    case object CROSS_REFERENCED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'demilestoned' event on a given issue or pull request."""
    )
    case object DEMILESTONED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'deployed' event on a given pull request."""
    )
    case object DEPLOYED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'deployment_environment_changed' event on a given pull request."""
    )
    case object DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'disconnected' event on a given issue or pull request."""
    )
    case object DISCONNECTED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'head_ref_deleted' event on a given pull request."""
    )
    case object HEAD_REF_DELETED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'head_ref_force_pushed' event on a given pull request."""
    )
    case object HEAD_REF_FORCE_PUSHED_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'head_ref_restored' event on a given pull request."""
    )
    case object HEAD_REF_RESTORED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a comment on an Issue.""")
    case object ISSUE_COMMENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'labeled' event on a given issue or pull request."""
    )
    case object LABELED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'locked' event on a given issue or pull request."""
    )
    case object LOCKED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'marked_as_duplicate' event on a given issue or pull request."""
    )
    case object MARKED_AS_DUPLICATE_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'mentioned' event on a given issue or pull request."""
    )
    case object MENTIONED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a 'merged' event on a given pull request.""")
    case object MERGED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'milestoned' event on a given issue or pull request."""
    )
    case object MILESTONED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'moved_columns_in_project' event on a given issue or pull request."""
    )
    case object MOVED_COLUMNS_IN_PROJECT_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'pinned' event on a given issue or pull request."""
    )
    case object PINNED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a Git commit part of a pull request.""")
    case object PULL_REQUEST_COMMIT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a commit comment thread part of a pull request."""
    )
    case object PULL_REQUEST_COMMIT_COMMENT_THREAD
        extends PullRequestTimelineItemsItemType
    @GQLDescription("""A review object for a given pull request.""")
    case object PULL_REQUEST_REVIEW extends PullRequestTimelineItemsItemType
    @GQLDescription("""A threaded list of comments for a given pull request.""")
    case object PULL_REQUEST_REVIEW_THREAD
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits."""
    )
    case object PULL_REQUEST_REVISION_MARKER
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'ready_for_review' event on a given pull request."""
    )
    case object READY_FOR_REVIEW_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'referenced' event on a given `ReferencedSubject`."""
    )
    case object REFERENCED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'removed_from_project' event on a given issue or pull request."""
    )
    case object REMOVED_FROM_PROJECT_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'renamed' event on a given issue or pull request"""
    )
    case object RENAMED_TITLE_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a 'reopened' event on any `Closable`.""")
    case object REOPENED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'review_dismissed' event on a given issue or pull request."""
    )
    case object REVIEW_DISMISSED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'review_requested' event on a given pull request."""
    )
    case object REVIEW_REQUESTED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'review_request_removed' event on a given pull request."""
    )
    case object REVIEW_REQUEST_REMOVED_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'subscribed' event on a given `Subscribable`."""
    )
    case object SUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents a 'transferred' event on a given issue or pull request."""
    )
    case object TRANSFERRED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unassigned' event on any assignable object."""
    )
    case object UNASSIGNED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unlabeled' event on a given issue or pull request."""
    )
    case object UNLABELED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unlocked' event on a given issue or pull request."""
    )
    case object UNLOCKED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unmarked_as_duplicate' event on a given issue or pull request."""
    )
    case object UNMARKED_AS_DUPLICATE_EVENT
        extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unpinned' event on a given issue or pull request."""
    )
    case object UNPINNED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription(
      """Represents an 'unsubscribed' event on a given `Subscribable`."""
    )
    case object UNSUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType
    @GQLDescription("""Represents a 'user_blocked' event on a given user.""")
    case object USER_BLOCKED_EVENT extends PullRequestTimelineItemsItemType
  }

  @GQLDescription(
    """The possible target states when updating a pull request."""
  )
  sealed trait PullRequestUpdateState
      extends scala.Product
      with scala.Serializable

  object PullRequestUpdateState {
    @GQLDescription(
      """A pull request that has been closed without being merged."""
    )
    case object CLOSED extends PullRequestUpdateState
    @GQLDescription("""A pull request that is still open.""")
    case object OPEN extends PullRequestUpdateState
  }

  @GQLDescription(
    """Emojis that can be attached to Issues, Pull Requests and Comments."""
  )
  sealed trait ReactionContent extends scala.Product with scala.Serializable

  object ReactionContent {
    @GQLDescription("""Represents the `:confused:` emoji.""")
    case object CONFUSED extends ReactionContent
    @GQLDescription("""Represents the `:eyes:` emoji.""")
    case object EYES extends ReactionContent
    @GQLDescription("""Represents the `:heart:` emoji.""")
    case object HEART extends ReactionContent
    @GQLDescription("""Represents the `:hooray:` emoji.""")
    case object HOORAY extends ReactionContent
    @GQLDescription("""Represents the `:laugh:` emoji.""")
    case object LAUGH extends ReactionContent
    @GQLDescription("""Represents the `:rocket:` emoji.""")
    case object ROCKET extends ReactionContent
    @GQLDescription("""Represents the `:-1:` emoji.""")
    case object THUMBS_DOWN extends ReactionContent
    @GQLDescription("""Represents the `:+1:` emoji.""")
    case object THUMBS_UP extends ReactionContent
  }

  @GQLDescription("""A list of fields that reactions can be ordered by.""")
  sealed trait ReactionOrderField extends scala.Product with scala.Serializable

  object ReactionOrderField {
    @GQLDescription(
      """Allows ordering a list of reactions by when they were created."""
    )
    case object CREATED_AT extends ReactionOrderField
  }

  @GQLDescription("""Properties by which ref connections can be ordered.""")
  sealed trait RefOrderField extends scala.Product with scala.Serializable

  object RefOrderField {
    @GQLDescription("""Order refs by their alphanumeric name""")
    case object ALPHABETICAL extends RefOrderField
    @GQLDescription(
      """Order refs by underlying commit date if the ref prefix is refs/tags/"""
    )
    case object TAG_COMMIT_DATE extends RefOrderField
  }

  @GQLDescription("""The possible types of a registry package dependency.""")
  sealed trait RegistryPackageDependencyType
      extends scala.Product
      with scala.Serializable

  object RegistryPackageDependencyType {
    @GQLDescription("""An optional registry package dependency type.""")
    case object BUNDLED extends RegistryPackageDependencyType
    @GQLDescription("""A default registry package dependency type.""")
    case object DEFAULT extends RegistryPackageDependencyType
    @GQLDescription("""A dev registry package dependency type.""")
    case object DEV extends RegistryPackageDependencyType
    @GQLDescription("""An optional registry package dependency type.""")
    case object OPTIONAL extends RegistryPackageDependencyType
    @GQLDescription("""A peer registry package dependency type.""")
    case object PEER extends RegistryPackageDependencyType
    @GQLDescription("""A test registry package dependency type.""")
    case object TEST extends RegistryPackageDependencyType
  }

  @GQLDescription("""The possible types of a registry package.""")
  sealed trait RegistryPackageType extends scala.Product with scala.Serializable

  object RegistryPackageType {
    @GQLDescription("""A debian package.""")
    case object DEBIAN extends RegistryPackageType
    @GQLDescription("""A docker image.""")
    case object DOCKER extends RegistryPackageType
    @GQLDescription("""A maven registry package.""")
    case object MAVEN extends RegistryPackageType
    @GQLDescription("""An npm registry package.""")
    case object NPM extends RegistryPackageType
    @GQLDescription("""A nuget package.""")
    case object NUGET extends RegistryPackageType
    @GQLDescription("""A python package.""")
    case object PYTHON extends RegistryPackageType
    @GQLDescription("""A rubygems registry package.""")
    case object RUBYGEMS extends RegistryPackageType
  }

  @GQLDescription("""Properties by which release connections can be ordered.""")
  sealed trait ReleaseOrderField extends scala.Product with scala.Serializable

  object ReleaseOrderField {
    @GQLDescription("""Order releases by creation time""")
    case object CREATED_AT extends ReleaseOrderField
    @GQLDescription("""Order releases alphabetically by name""")
    case object NAME extends ReleaseOrderField
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoAccessAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoAccessAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoAccessAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoAccessAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoAccessAuditEntryVisibility
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoAddMemberAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoAddMemberAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoAddMemberAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoAddMemberAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoAddMemberAuditEntryVisibility
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoArchivedAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoArchivedAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoArchivedAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoArchivedAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoArchivedAuditEntryVisibility
  }

  @GQLDescription(
    """The merge options available for pull requests to this repository."""
  )
  sealed trait RepoChangeMergeSettingAuditEntryMergeType
      extends scala.Product
      with scala.Serializable

  object RepoChangeMergeSettingAuditEntryMergeType {
    @GQLDescription(
      """The pull request is added to the base branch in a merge commit."""
    )
    case object MERGE extends RepoChangeMergeSettingAuditEntryMergeType
    @GQLDescription(
      """Commits from the pull request are added onto the base branch individually without a merge commit."""
    )
    case object REBASE extends RepoChangeMergeSettingAuditEntryMergeType
    @GQLDescription(
      """The pull request's commits are squashed into a single commit before they are merged to the base branch."""
    )
    case object SQUASH extends RepoChangeMergeSettingAuditEntryMergeType
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoCreateAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoCreateAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoCreateAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoCreateAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoCreateAuditEntryVisibility
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoDestroyAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoDestroyAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoDestroyAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoDestroyAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoDestroyAuditEntryVisibility
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepoRemoveMemberAuditEntryVisibility
      extends scala.Product
      with scala.Serializable

  object RepoRemoveMemberAuditEntryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepoRemoveMemberAuditEntryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepoRemoveMemberAuditEntryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepoRemoveMemberAuditEntryVisibility
  }

  @GQLDescription("""The affiliation of a user to a repository""")
  sealed trait RepositoryAffiliation
      extends scala.Product
      with scala.Serializable

  object RepositoryAffiliation {
    @GQLDescription(
      """Repositories that the user has been added to as a collaborator."""
    )
    case object COLLABORATOR extends RepositoryAffiliation
    @GQLDescription(
      """Repositories that the user has access to through being a member of an
organization. This includes every repository on every team that the user is on."""
    )
    case object ORGANIZATION_MEMBER extends RepositoryAffiliation
    @GQLDescription(
      """Repositories that are owned by the authenticated user."""
    )
    case object OWNER extends RepositoryAffiliation
  }

  @GQLDescription("""The reason a repository is listed as 'contributed'.""")
  sealed trait RepositoryContributionType
      extends scala.Product
      with scala.Serializable

  object RepositoryContributionType {
    @GQLDescription("""Created a commit""")
    case object COMMIT extends RepositoryContributionType
    @GQLDescription("""Created an issue""")
    case object ISSUE extends RepositoryContributionType
    @GQLDescription("""Created a pull request""")
    case object PULL_REQUEST extends RepositoryContributionType
    @GQLDescription("""Reviewed a pull request""")
    case object PULL_REQUEST_REVIEW extends RepositoryContributionType
    @GQLDescription("""Created the repository""")
    case object REPOSITORY extends RepositoryContributionType
  }

  @GQLDescription(
    """Properties by which repository invitation connections can be ordered."""
  )
  sealed trait RepositoryInvitationOrderField
      extends scala.Product
      with scala.Serializable

  object RepositoryInvitationOrderField {
    @GQLDescription("""Order repository invitations by creation time""")
    case object CREATED_AT extends RepositoryInvitationOrderField
    @GQLDescription("""Order repository invitations by invitee login""")
    case object INVITEE_LOGIN extends RepositoryInvitationOrderField
  }

  @GQLDescription(
    """The possible reasons a given repository could be in a locked state."""
  )
  sealed trait RepositoryLockReason
      extends scala.Product
      with scala.Serializable

  object RepositoryLockReason {
    @GQLDescription(
      """The repository is locked due to a billing related reason."""
    )
    case object BILLING extends RepositoryLockReason
    @GQLDescription("""The repository is locked due to a migration.""")
    case object MIGRATING extends RepositoryLockReason
    @GQLDescription("""The repository is locked due to a move.""")
    case object MOVING extends RepositoryLockReason
    @GQLDescription("""The repository is locked due to a rename.""")
    case object RENAME extends RepositoryLockReason
  }

  @GQLDescription(
    """Properties by which repository connections can be ordered."""
  )
  sealed trait RepositoryOrderField
      extends scala.Product
      with scala.Serializable

  object RepositoryOrderField {
    @GQLDescription("""Order repositories by creation time""")
    case object CREATED_AT extends RepositoryOrderField
    @GQLDescription("""Order repositories by name""")
    case object NAME extends RepositoryOrderField
    @GQLDescription("""Order repositories by push time""")
    case object PUSHED_AT extends RepositoryOrderField
    @GQLDescription("""Order repositories by number of stargazers""")
    case object STARGAZERS extends RepositoryOrderField
    @GQLDescription("""Order repositories by update time""")
    case object UPDATED_AT extends RepositoryOrderField
  }

  @GQLDescription("""The access level to a repository""")
  sealed trait RepositoryPermission
      extends scala.Product
      with scala.Serializable

  object RepositoryPermission {
    @GQLDescription(
      """Can read, clone, and push to this repository. Can also manage issues, pull
requests, and repository settings, including adding collaborators"""
    )
    case object ADMIN extends RepositoryPermission
    @GQLDescription(
      """Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings"""
    )
    case object MAINTAIN extends RepositoryPermission
    @GQLDescription(
      """Can read and clone this repository. Can also open and comment on issues and pull requests"""
    )
    case object READ extends RepositoryPermission
    @GQLDescription(
      """Can read and clone this repository. Can also manage issues and pull requests"""
    )
    case object TRIAGE extends RepositoryPermission
    @GQLDescription(
      """Can read, clone, and push to this repository. Can also manage issues and pull requests"""
    )
    case object WRITE extends RepositoryPermission
  }

  @GQLDescription("""The privacy of a repository""")
  sealed trait RepositoryPrivacy extends scala.Product with scala.Serializable

  object RepositoryPrivacy {
    @GQLDescription("""Private""")
    case object PRIVATE extends RepositoryPrivacy
    @GQLDescription("""Public""")
    case object PUBLIC extends RepositoryPrivacy
  }

  @GQLDescription("""The repository's visibility level.""")
  sealed trait RepositoryVisibility
      extends scala.Product
      with scala.Serializable

  object RepositoryVisibility {
    @GQLDescription(
      """The repository is visible only to users in the same business."""
    )
    case object INTERNAL extends RepositoryVisibility
    @GQLDescription(
      """The repository is visible only to those with explicit access."""
    )
    case object PRIVATE extends RepositoryVisibility
    @GQLDescription("""The repository is visible to everyone.""")
    case object PUBLIC extends RepositoryVisibility
  }

  @GQLDescription(
    """The possible digest algorithms used to sign SAML requests for an identity provider."""
  )
  sealed trait SamlDigestAlgorithm extends scala.Product with scala.Serializable

  object SamlDigestAlgorithm {
    @GQLDescription("""SHA1""")
    case object SHA1 extends SamlDigestAlgorithm
    @GQLDescription("""SHA256""")
    case object SHA256 extends SamlDigestAlgorithm
    @GQLDescription("""SHA384""")
    case object SHA384 extends SamlDigestAlgorithm
    @GQLDescription("""SHA512""")
    case object SHA512 extends SamlDigestAlgorithm
  }

  @GQLDescription(
    """The possible signature algorithms used to sign SAML requests for a Identity Provider."""
  )
  sealed trait SamlSignatureAlgorithm
      extends scala.Product
      with scala.Serializable

  object SamlSignatureAlgorithm {
    @GQLDescription("""RSA-SHA1""")
    case object RSA_SHA1 extends SamlSignatureAlgorithm
    @GQLDescription("""RSA-SHA256""")
    case object RSA_SHA256 extends SamlSignatureAlgorithm
    @GQLDescription("""RSA-SHA384""")
    case object RSA_SHA384 extends SamlSignatureAlgorithm
    @GQLDescription("""RSA-SHA512""")
    case object RSA_SHA512 extends SamlSignatureAlgorithm
  }

  @GQLDescription(
    """Properties by which saved reply connections can be ordered."""
  )
  sealed trait SavedReplyOrderField
      extends scala.Product
      with scala.Serializable

  object SavedReplyOrderField {
    @GQLDescription("""Order saved reply by when they were updated.""")
    case object UPDATED_AT extends SavedReplyOrderField
  }

  @GQLDescription("""Represents the individual results of a search.""")
  sealed trait SearchType extends scala.Product with scala.Serializable

  object SearchType {
    @GQLDescription("""Returns results matching issues in repositories.""")
    case object ISSUE extends SearchType
    @GQLDescription("""Returns results matching repositories.""")
    case object REPOSITORY extends SearchType
    @GQLDescription(
      """Returns results matching users and organizations on GitHub."""
    )
    case object USER extends SearchType
  }

  @GQLDescription(
    """The possible ecosystems of a security vulnerability's package."""
  )
  sealed trait SecurityAdvisoryEcosystem
      extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryEcosystem {
    @GQLDescription("""PHP packages hosted at packagist.org""")
    case object COMPOSER extends SecurityAdvisoryEcosystem
    @GQLDescription("""Java artifacts hosted at the Maven central repository""")
    case object MAVEN extends SecurityAdvisoryEcosystem
    @GQLDescription("""JavaScript packages hosted at npmjs.com""")
    case object NPM extends SecurityAdvisoryEcosystem
    @GQLDescription(""".NET packages hosted at the NuGet Gallery""")
    case object NUGET extends SecurityAdvisoryEcosystem
    @GQLDescription("""Python packages hosted at PyPI.org""")
    case object PIP extends SecurityAdvisoryEcosystem
    @GQLDescription("""Ruby gems hosted at RubyGems.org""")
    case object RUBYGEMS extends SecurityAdvisoryEcosystem
  }

  @GQLDescription("""Identifier formats available for advisories.""")
  sealed trait SecurityAdvisoryIdentifierType
      extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryIdentifierType {
    @GQLDescription("""Common Vulnerabilities and Exposures Identifier.""")
    case object CVE extends SecurityAdvisoryIdentifierType
    @GQLDescription("""GitHub Security Advisory ID.""")
    case object GHSA extends SecurityAdvisoryIdentifierType
  }

  @GQLDescription(
    """Properties by which security advisory connections can be ordered."""
  )
  sealed trait SecurityAdvisoryOrderField
      extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryOrderField {
    @GQLDescription("""Order advisories by publication time""")
    case object PUBLISHED_AT extends SecurityAdvisoryOrderField
    @GQLDescription("""Order advisories by update time""")
    case object UPDATED_AT extends SecurityAdvisoryOrderField
  }

  @GQLDescription("""Severity of the vulnerability.""")
  sealed trait SecurityAdvisorySeverity
      extends scala.Product
      with scala.Serializable

  object SecurityAdvisorySeverity {
    @GQLDescription("""Critical.""")
    case object CRITICAL extends SecurityAdvisorySeverity
    @GQLDescription("""High.""")
    case object HIGH extends SecurityAdvisorySeverity
    @GQLDescription("""Low.""")
    case object LOW extends SecurityAdvisorySeverity
    @GQLDescription("""Moderate.""")
    case object MODERATE extends SecurityAdvisorySeverity
  }

  @GQLDescription(
    """Properties by which security vulnerability connections can be ordered."""
  )
  sealed trait SecurityVulnerabilityOrderField
      extends scala.Product
      with scala.Serializable

  object SecurityVulnerabilityOrderField {
    @GQLDescription("""Order vulnerability by update time""")
    case object UPDATED_AT extends SecurityVulnerabilityOrderField
  }

  @GQLDescription(
    """Properties by which Sponsors tiers connections can be ordered."""
  )
  sealed trait SponsorsTierOrderField
      extends scala.Product
      with scala.Serializable

  object SponsorsTierOrderField {
    @GQLDescription("""Order tiers by creation time.""")
    case object CREATED_AT extends SponsorsTierOrderField
    @GQLDescription("""Order tiers by their monthly price in cents""")
    case object MONTHLY_PRICE_IN_CENTS extends SponsorsTierOrderField
  }

  @GQLDescription(
    """Properties by which sponsorship connections can be ordered."""
  )
  sealed trait SponsorshipOrderField
      extends scala.Product
      with scala.Serializable

  object SponsorshipOrderField {
    @GQLDescription("""Order sponsorship by creation time.""")
    case object CREATED_AT extends SponsorshipOrderField
  }

  @GQLDescription("""The privacy of a sponsorship""")
  sealed trait SponsorshipPrivacy extends scala.Product with scala.Serializable

  object SponsorshipPrivacy {
    @GQLDescription("""Private""")
    case object PRIVATE extends SponsorshipPrivacy
    @GQLDescription("""Public""")
    case object PUBLIC extends SponsorshipPrivacy
  }

  @GQLDescription("""Properties by which star connections can be ordered.""")
  sealed trait StarOrderField extends scala.Product with scala.Serializable

  object StarOrderField {
    @GQLDescription(
      """Allows ordering a list of stars by when they were created."""
    )
    case object STARRED_AT extends StarOrderField
  }

  @GQLDescription("""The possible commit status states.""")
  sealed trait StatusState extends scala.Product with scala.Serializable

  object StatusState {
    @GQLDescription("""Status is errored.""")
    case object ERROR extends StatusState
    @GQLDescription("""Status is expected.""")
    case object EXPECTED extends StatusState
    @GQLDescription("""Status is failing.""")
    case object FAILURE extends StatusState
    @GQLDescription("""Status is pending.""")
    case object PENDING extends StatusState
    @GQLDescription("""Status is successful.""")
    case object SUCCESS extends StatusState
  }

  @GQLDescription("""The possible states of a subscription.""")
  sealed trait SubscriptionState extends scala.Product with scala.Serializable

  object SubscriptionState {
    @GQLDescription("""The User is never notified.""")
    case object IGNORED extends SubscriptionState
    @GQLDescription("""The User is notified of all conversations.""")
    case object SUBSCRIBED extends SubscriptionState
    @GQLDescription(
      """The User is only notified when participating or @mentioned."""
    )
    case object UNSUBSCRIBED extends SubscriptionState
  }

  @GQLDescription(
    """Properties by which team discussion comment connections can be ordered."""
  )
  sealed trait TeamDiscussionCommentOrderField
      extends scala.Product
      with scala.Serializable

  object TeamDiscussionCommentOrderField {
    @GQLDescription(
      """Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering)."""
    )
    case object NUMBER extends TeamDiscussionCommentOrderField
  }

  @GQLDescription(
    """Properties by which team discussion connections can be ordered."""
  )
  sealed trait TeamDiscussionOrderField
      extends scala.Product
      with scala.Serializable

  object TeamDiscussionOrderField {
    @GQLDescription("""Allows chronological ordering of team discussions.""")
    case object CREATED_AT extends TeamDiscussionOrderField
  }

  @GQLDescription(
    """Properties by which team member connections can be ordered."""
  )
  sealed trait TeamMemberOrderField
      extends scala.Product
      with scala.Serializable

  object TeamMemberOrderField {
    @GQLDescription("""Order team members by creation time""")
    case object CREATED_AT extends TeamMemberOrderField
    @GQLDescription("""Order team members by login""")
    case object LOGIN extends TeamMemberOrderField
  }

  @GQLDescription(
    """The possible team member roles; either 'maintainer' or 'member'."""
  )
  sealed trait TeamMemberRole extends scala.Product with scala.Serializable

  object TeamMemberRole {
    @GQLDescription(
      """A team maintainer has permission to add and remove team members."""
    )
    case object MAINTAINER extends TeamMemberRole
    @GQLDescription(
      """A team member has no administrative permissions on the team."""
    )
    case object MEMBER extends TeamMemberRole
  }

  @GQLDescription(
    """Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL."""
  )
  sealed trait TeamMembershipType extends scala.Product with scala.Serializable

  object TeamMembershipType {
    @GQLDescription(
      """Includes immediate and child team members for the team."""
    )
    case object ALL extends TeamMembershipType
    @GQLDescription("""Includes only child team members for the team.""")
    case object CHILD_TEAM extends TeamMembershipType
    @GQLDescription("""Includes only immediate members of the team.""")
    case object IMMEDIATE extends TeamMembershipType
  }

  @GQLDescription("""Properties by which team connections can be ordered.""")
  sealed trait TeamOrderField extends scala.Product with scala.Serializable

  object TeamOrderField {
    @GQLDescription("""Allows ordering a list of teams by name.""")
    case object NAME extends TeamOrderField
  }

  @GQLDescription("""The possible team privacy values.""")
  sealed trait TeamPrivacy extends scala.Product with scala.Serializable

  object TeamPrivacy {
    @GQLDescription("""A secret team can only be seen by its members.""")
    case object SECRET extends TeamPrivacy
    @GQLDescription(
      """A visible team can be seen and @mentioned by every member of the organization."""
    )
    case object VISIBLE extends TeamPrivacy
  }

  @GQLDescription(
    """Properties by which team repository connections can be ordered."""
  )
  sealed trait TeamRepositoryOrderField
      extends scala.Product
      with scala.Serializable

  object TeamRepositoryOrderField {
    @GQLDescription("""Order repositories by creation time""")
    case object CREATED_AT extends TeamRepositoryOrderField
    @GQLDescription("""Order repositories by name""")
    case object NAME extends TeamRepositoryOrderField
    @GQLDescription("""Order repositories by permission""")
    case object PERMISSION extends TeamRepositoryOrderField
    @GQLDescription("""Order repositories by push time""")
    case object PUSHED_AT extends TeamRepositoryOrderField
    @GQLDescription("""Order repositories by number of stargazers""")
    case object STARGAZERS extends TeamRepositoryOrderField
    @GQLDescription("""Order repositories by update time""")
    case object UPDATED_AT extends TeamRepositoryOrderField
  }

  @GQLDescription("""The role of a user on a team.""")
  sealed trait TeamRole extends scala.Product with scala.Serializable

  object TeamRole {
    @GQLDescription("""User has admin rights on the team.""")
    case object ADMIN extends TeamRole
    @GQLDescription("""User is a member of the team.""")
    case object MEMBER extends TeamRole
  }

  @GQLDescription("""Reason that the suggested topic is declined.""")
  sealed trait TopicSuggestionDeclineReason
      extends scala.Product
      with scala.Serializable

  object TopicSuggestionDeclineReason {
    @GQLDescription(
      """The suggested topic is not relevant to the repository."""
    )
    case object NOT_RELEVANT extends TopicSuggestionDeclineReason
    @GQLDescription("""The viewer does not like the suggested topic.""")
    case object PERSONAL_PREFERENCE extends TopicSuggestionDeclineReason
    @GQLDescription(
      """The suggested topic is too general for the repository."""
    )
    case object TOO_GENERAL extends TopicSuggestionDeclineReason
    @GQLDescription(
      """The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1)."""
    )
    case object TOO_SPECIFIC extends TopicSuggestionDeclineReason
  }

  @GQLDescription("""The possible durations that a user can be blocked for.""")
  sealed trait UserBlockDuration extends scala.Product with scala.Serializable

  object UserBlockDuration {
    @GQLDescription("""The user was blocked for 1 day""")
    case object ONE_DAY extends UserBlockDuration
    @GQLDescription("""The user was blocked for 30 days""")
    case object ONE_MONTH extends UserBlockDuration
    @GQLDescription("""The user was blocked for 7 days""")
    case object ONE_WEEK extends UserBlockDuration
    @GQLDescription("""The user was blocked permanently""")
    case object PERMANENT extends UserBlockDuration
    @GQLDescription("""The user was blocked for 3 days""")
    case object THREE_DAYS extends UserBlockDuration
  }

  @GQLDescription(
    """Properties by which user status connections can be ordered."""
  )
  sealed trait UserStatusOrderField
      extends scala.Product
      with scala.Serializable

  object UserStatusOrderField {
    @GQLDescription("""Order user statuses by when they were updated.""")
    case object UPDATED_AT extends UserStatusOrderField
  }

}

object Operations {

  @GQLDescription("""The query root of GitHub's GraphQL interface.""")
  case class Query(
      codeOfConduct: CodeOfConductArgs => Option[CodeOfConduct],
      codesOfConduct: () => Option[List[Option[CodeOfConduct]]],
      enterprise: EnterpriseArgs => Option[Enterprise],
      enterpriseAdministratorInvitation: EnterpriseAdministratorInvitationArgs => Option[
        EnterpriseAdministratorInvitation
      ],
      enterpriseAdministratorInvitationByToken: EnterpriseAdministratorInvitationByTokenArgs => Option[
        EnterpriseAdministratorInvitation
      ],
      license: LicenseArgs => Option[License],
      licenses: () => List[Option[License]],
      marketplaceCategories: MarketplaceCategoriesArgs => List[
        MarketplaceCategory
      ],
      marketplaceCategory: MarketplaceCategoryArgs => Option[
        MarketplaceCategory
      ],
      marketplaceListing: MarketplaceListingArgs => Option[MarketplaceListing],
      marketplaceListings: MarketplaceListingsArgs => MarketplaceListingConnection,
      meta: () => GitHubMetadata,
      node: NodeArgs => Option[Node],
      nodes: NodesArgs => List[Option[Node]],
      organization: OrganizationArgs => Option[Organization],
      rateLimit: RateLimitArgs => Option[RateLimit],
      relay: () => Query,
      repository: RepositoryArgs => Option[Repository],
      repositoryOwner: RepositoryOwnerArgs => Option[RepositoryOwner],
      resource: ResourceArgs => Option[UniformResourceLocatable],
      search: SearchArgs => SearchResultItemConnection,
      securityAdvisories: SecurityAdvisoriesArgs => SecurityAdvisoryConnection,
      securityAdvisory: SecurityAdvisoryArgs => Option[SecurityAdvisory],
      securityVulnerabilities: SecurityVulnerabilitiesArgs => SecurityVulnerabilityConnection,
      sponsorsListing: SponsorsListingArgs => Option[SponsorsListing],
      topic: TopicArgs => Option[Topic],
      user: UserArgs => Option[User],
      viewer: () => User
  )
  @GQLDescription("""The root query for implementing GraphQL mutations.""")
  case class Mutation(
      acceptEnterpriseAdministratorInvitation: AcceptEnterpriseAdministratorInvitationArgs => Option[
        AcceptEnterpriseAdministratorInvitationPayload
      ],
      acceptTopicSuggestion: AcceptTopicSuggestionArgs => Option[
        AcceptTopicSuggestionPayload
      ],
      addAssigneesToAssignable: AddAssigneesToAssignableArgs => Option[
        AddAssigneesToAssignablePayload
      ],
      addComment: AddCommentArgs => Option[AddCommentPayload],
      addLabelsToLabelable: AddLabelsToLabelableArgs => Option[
        AddLabelsToLabelablePayload
      ],
      addProjectCard: AddProjectCardArgs => Option[AddProjectCardPayload],
      addProjectColumn: AddProjectColumnArgs => Option[AddProjectColumnPayload],
      addPullRequestReview: AddPullRequestReviewArgs => Option[
        AddPullRequestReviewPayload
      ],
      addPullRequestReviewComment: AddPullRequestReviewCommentArgs => Option[
        AddPullRequestReviewCommentPayload
      ],
      addReaction: AddReactionArgs => Option[AddReactionPayload],
      addStar: AddStarArgs => Option[AddStarPayload],
      archiveRepository: ArchiveRepositoryArgs => Option[
        ArchiveRepositoryPayload
      ],
      cancelEnterpriseAdminInvitation: CancelEnterpriseAdminInvitationArgs => Option[
        CancelEnterpriseAdminInvitationPayload
      ],
      changeUserStatus: ChangeUserStatusArgs => Option[ChangeUserStatusPayload],
      clearLabelsFromLabelable: ClearLabelsFromLabelableArgs => Option[
        ClearLabelsFromLabelablePayload
      ],
      cloneProject: CloneProjectArgs => Option[CloneProjectPayload],
      cloneTemplateRepository: CloneTemplateRepositoryArgs => Option[
        CloneTemplateRepositoryPayload
      ],
      closeIssue: CloseIssueArgs => Option[CloseIssuePayload],
      closePullRequest: ClosePullRequestArgs => Option[ClosePullRequestPayload],
      convertProjectCardNoteToIssue: ConvertProjectCardNoteToIssueArgs => Option[
        ConvertProjectCardNoteToIssuePayload
      ],
      createBranchProtectionRule: CreateBranchProtectionRuleArgs => Option[
        CreateBranchProtectionRulePayload
      ],
      createEnterpriseOrganization: CreateEnterpriseOrganizationArgs => Option[
        CreateEnterpriseOrganizationPayload
      ],
      createIpAllowListEntry: CreateIpAllowListEntryArgs => Option[
        CreateIpAllowListEntryPayload
      ],
      createIssue: CreateIssueArgs => Option[CreateIssuePayload],
      createProject: CreateProjectArgs => Option[CreateProjectPayload],
      createPullRequest: CreatePullRequestArgs => Option[
        CreatePullRequestPayload
      ],
      createRef: CreateRefArgs => Option[CreateRefPayload],
      createRepository: CreateRepositoryArgs => Option[CreateRepositoryPayload],
      createTeamDiscussion: CreateTeamDiscussionArgs => Option[
        CreateTeamDiscussionPayload
      ],
      createTeamDiscussionComment: CreateTeamDiscussionCommentArgs => Option[
        CreateTeamDiscussionCommentPayload
      ],
      declineTopicSuggestion: DeclineTopicSuggestionArgs => Option[
        DeclineTopicSuggestionPayload
      ],
      deleteBranchProtectionRule: DeleteBranchProtectionRuleArgs => Option[
        DeleteBranchProtectionRulePayload
      ],
      deleteDeployment: DeleteDeploymentArgs => Option[DeleteDeploymentPayload],
      deleteIpAllowListEntry: DeleteIpAllowListEntryArgs => Option[
        DeleteIpAllowListEntryPayload
      ],
      deleteIssue: DeleteIssueArgs => Option[DeleteIssuePayload],
      deleteIssueComment: DeleteIssueCommentArgs => Option[
        DeleteIssueCommentPayload
      ],
      deleteProject: DeleteProjectArgs => Option[DeleteProjectPayload],
      deleteProjectCard: DeleteProjectCardArgs => Option[
        DeleteProjectCardPayload
      ],
      deleteProjectColumn: DeleteProjectColumnArgs => Option[
        DeleteProjectColumnPayload
      ],
      deletePullRequestReview: DeletePullRequestReviewArgs => Option[
        DeletePullRequestReviewPayload
      ],
      deletePullRequestReviewComment: DeletePullRequestReviewCommentArgs => Option[
        DeletePullRequestReviewCommentPayload
      ],
      deleteRef: DeleteRefArgs => Option[DeleteRefPayload],
      deleteTeamDiscussion: DeleteTeamDiscussionArgs => Option[
        DeleteTeamDiscussionPayload
      ],
      deleteTeamDiscussionComment: DeleteTeamDiscussionCommentArgs => Option[
        DeleteTeamDiscussionCommentPayload
      ],
      dismissPullRequestReview: DismissPullRequestReviewArgs => Option[
        DismissPullRequestReviewPayload
      ],
      followUser: FollowUserArgs => Option[FollowUserPayload],
      inviteEnterpriseAdmin: InviteEnterpriseAdminArgs => Option[
        InviteEnterpriseAdminPayload
      ],
      linkRepositoryToProject: LinkRepositoryToProjectArgs => Option[
        LinkRepositoryToProjectPayload
      ],
      lockLockable: LockLockableArgs => Option[LockLockablePayload],
      markPullRequestReadyForReview: MarkPullRequestReadyForReviewArgs => Option[
        MarkPullRequestReadyForReviewPayload
      ],
      mergeBranch: MergeBranchArgs => Option[MergeBranchPayload],
      mergePullRequest: MergePullRequestArgs => Option[MergePullRequestPayload],
      moveProjectCard: MoveProjectCardArgs => Option[MoveProjectCardPayload],
      moveProjectColumn: MoveProjectColumnArgs => Option[
        MoveProjectColumnPayload
      ],
      regenerateEnterpriseIdentityProviderRecoveryCodes: RegenerateEnterpriseIdentityProviderRecoveryCodesArgs => Option[
        RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
      ],
      removeAssigneesFromAssignable: RemoveAssigneesFromAssignableArgs => Option[
        RemoveAssigneesFromAssignablePayload
      ],
      removeEnterpriseAdmin: RemoveEnterpriseAdminArgs => Option[
        RemoveEnterpriseAdminPayload
      ],
      removeEnterpriseIdentityProvider: RemoveEnterpriseIdentityProviderArgs => Option[
        RemoveEnterpriseIdentityProviderPayload
      ],
      removeEnterpriseOrganization: RemoveEnterpriseOrganizationArgs => Option[
        RemoveEnterpriseOrganizationPayload
      ],
      removeLabelsFromLabelable: RemoveLabelsFromLabelableArgs => Option[
        RemoveLabelsFromLabelablePayload
      ],
      removeOutsideCollaborator: RemoveOutsideCollaboratorArgs => Option[
        RemoveOutsideCollaboratorPayload
      ],
      removeReaction: RemoveReactionArgs => Option[RemoveReactionPayload],
      removeStar: RemoveStarArgs => Option[RemoveStarPayload],
      reopenIssue: ReopenIssueArgs => Option[ReopenIssuePayload],
      reopenPullRequest: ReopenPullRequestArgs => Option[
        ReopenPullRequestPayload
      ],
      requestReviews: RequestReviewsArgs => Option[RequestReviewsPayload],
      resolveReviewThread: ResolveReviewThreadArgs => Option[
        ResolveReviewThreadPayload
      ],
      setEnterpriseIdentityProvider: SetEnterpriseIdentityProviderArgs => Option[
        SetEnterpriseIdentityProviderPayload
      ],
      submitPullRequestReview: SubmitPullRequestReviewArgs => Option[
        SubmitPullRequestReviewPayload
      ],
      transferIssue: TransferIssueArgs => Option[TransferIssuePayload],
      unarchiveRepository: UnarchiveRepositoryArgs => Option[
        UnarchiveRepositoryPayload
      ],
      unfollowUser: UnfollowUserArgs => Option[UnfollowUserPayload],
      unlinkRepositoryFromProject: UnlinkRepositoryFromProjectArgs => Option[
        UnlinkRepositoryFromProjectPayload
      ],
      unlockLockable: UnlockLockableArgs => Option[UnlockLockablePayload],
      unmarkIssueAsDuplicate: UnmarkIssueAsDuplicateArgs => Option[
        UnmarkIssueAsDuplicatePayload
      ],
      unresolveReviewThread: UnresolveReviewThreadArgs => Option[
        UnresolveReviewThreadPayload
      ],
      updateBranchProtectionRule: UpdateBranchProtectionRuleArgs => Option[
        UpdateBranchProtectionRulePayload
      ],
      updateEnterpriseActionExecutionCapabilitySetting: UpdateEnterpriseActionExecutionCapabilitySettingArgs => Option[
        UpdateEnterpriseActionExecutionCapabilitySettingPayload
      ],
      updateEnterpriseAdministratorRole: UpdateEnterpriseAdministratorRoleArgs => Option[
        UpdateEnterpriseAdministratorRolePayload
      ],
      updateEnterpriseAllowPrivateRepositoryForkingSetting: UpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs => Option[
        UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
      ],
      updateEnterpriseDefaultRepositoryPermissionSetting: UpdateEnterpriseDefaultRepositoryPermissionSettingArgs => Option[
        UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
      ],
      updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs => Option[
        UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
      ],
      updateEnterpriseMembersCanCreateRepositoriesSetting: UpdateEnterpriseMembersCanCreateRepositoriesSettingArgs => Option[
        UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
      ],
      updateEnterpriseMembersCanDeleteIssuesSetting: UpdateEnterpriseMembersCanDeleteIssuesSettingArgs => Option[
        UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
      ],
      updateEnterpriseMembersCanDeleteRepositoriesSetting: UpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs => Option[
        UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
      ],
      updateEnterpriseMembersCanInviteCollaboratorsSetting: UpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs => Option[
        UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
      ],
      updateEnterpriseMembersCanMakePurchasesSetting: UpdateEnterpriseMembersCanMakePurchasesSettingArgs => Option[
        UpdateEnterpriseMembersCanMakePurchasesSettingPayload
      ],
      updateEnterpriseMembersCanUpdateProtectedBranchesSetting: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs => Option[
        UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
      ],
      updateEnterpriseMembersCanViewDependencyInsightsSetting: UpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs => Option[
        UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
      ],
      updateEnterpriseOrganizationProjectsSetting: UpdateEnterpriseOrganizationProjectsSettingArgs => Option[
        UpdateEnterpriseOrganizationProjectsSettingPayload
      ],
      updateEnterpriseProfile: UpdateEnterpriseProfileArgs => Option[
        UpdateEnterpriseProfilePayload
      ],
      updateEnterpriseRepositoryProjectsSetting: UpdateEnterpriseRepositoryProjectsSettingArgs => Option[
        UpdateEnterpriseRepositoryProjectsSettingPayload
      ],
      updateEnterpriseTeamDiscussionsSetting: UpdateEnterpriseTeamDiscussionsSettingArgs => Option[
        UpdateEnterpriseTeamDiscussionsSettingPayload
      ],
      updateEnterpriseTwoFactorAuthenticationRequiredSetting: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs => Option[
        UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
      ],
      updateIpAllowListEnabledSetting: UpdateIpAllowListEnabledSettingArgs => Option[
        UpdateIpAllowListEnabledSettingPayload
      ],
      updateIpAllowListEntry: UpdateIpAllowListEntryArgs => Option[
        UpdateIpAllowListEntryPayload
      ],
      updateIssue: UpdateIssueArgs => Option[UpdateIssuePayload],
      updateIssueComment: UpdateIssueCommentArgs => Option[
        UpdateIssueCommentPayload
      ],
      updateProject: UpdateProjectArgs => Option[UpdateProjectPayload],
      updateProjectCard: UpdateProjectCardArgs => Option[
        UpdateProjectCardPayload
      ],
      updateProjectColumn: UpdateProjectColumnArgs => Option[
        UpdateProjectColumnPayload
      ],
      updatePullRequest: UpdatePullRequestArgs => Option[
        UpdatePullRequestPayload
      ],
      updatePullRequestReview: UpdatePullRequestReviewArgs => Option[
        UpdatePullRequestReviewPayload
      ],
      updatePullRequestReviewComment: UpdatePullRequestReviewCommentArgs => Option[
        UpdatePullRequestReviewCommentPayload
      ],
      updateRef: UpdateRefArgs => Option[UpdateRefPayload],
      updateRepository: UpdateRepositoryArgs => Option[UpdateRepositoryPayload],
      updateSubscription: UpdateSubscriptionArgs => Option[
        UpdateSubscriptionPayload
      ],
      updateTeamDiscussion: UpdateTeamDiscussionArgs => Option[
        UpdateTeamDiscussionPayload
      ],
      updateTeamDiscussionComment: UpdateTeamDiscussionCommentArgs => Option[
        UpdateTeamDiscussionCommentPayload
      ],
      updateTopics: UpdateTopicsArgs => Option[UpdateTopicsPayload]
  )

}
